// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  audio: (where?: AudioWhereInput) => Promise<boolean>;
  category: (where?: CategoryWhereInput) => Promise<boolean>;
  comment: (where?: CommentWhereInput) => Promise<boolean>;
  file: (where?: FileWhereInput) => Promise<boolean>;
  hashtag: (where?: HashtagWhereInput) => Promise<boolean>;
  image: (where?: ImageWhereInput) => Promise<boolean>;
  like: (where?: LikeWhereInput) => Promise<boolean>;
  message: (where?: MessageWhereInput) => Promise<boolean>;
  post: (where?: PostWhereInput) => Promise<boolean>;
  room: (where?: RoomWhereInput) => Promise<boolean>;
  text: (where?: TextWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
  video: (where?: VideoWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  audio: (where: AudioWhereUniqueInput) => AudioNullablePromise;
  audios: (args?: {
    where?: AudioWhereInput;
    orderBy?: AudioOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Audio>;
  audiosConnection: (args?: {
    where?: AudioWhereInput;
    orderBy?: AudioOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AudioConnectionPromise;
  category: (where: CategoryWhereUniqueInput) => CategoryNullablePromise;
  categories: (args?: {
    where?: CategoryWhereInput;
    orderBy?: CategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Category>;
  categoriesConnection: (args?: {
    where?: CategoryWhereInput;
    orderBy?: CategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CategoryConnectionPromise;
  comment: (where: CommentWhereUniqueInput) => CommentNullablePromise;
  comments: (args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Comment>;
  commentsConnection: (args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CommentConnectionPromise;
  file: (where: FileWhereUniqueInput) => FileNullablePromise;
  files: (args?: {
    where?: FileWhereInput;
    orderBy?: FileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<File>;
  filesConnection: (args?: {
    where?: FileWhereInput;
    orderBy?: FileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FileConnectionPromise;
  hashtag: (where: HashtagWhereUniqueInput) => HashtagNullablePromise;
  hashtags: (args?: {
    where?: HashtagWhereInput;
    orderBy?: HashtagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Hashtag>;
  hashtagsConnection: (args?: {
    where?: HashtagWhereInput;
    orderBy?: HashtagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => HashtagConnectionPromise;
  image: (where: ImageWhereUniqueInput) => ImageNullablePromise;
  images: (args?: {
    where?: ImageWhereInput;
    orderBy?: ImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Image>;
  imagesConnection: (args?: {
    where?: ImageWhereInput;
    orderBy?: ImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ImageConnectionPromise;
  like: (where: LikeWhereUniqueInput) => LikeNullablePromise;
  likes: (args?: {
    where?: LikeWhereInput;
    orderBy?: LikeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Like>;
  likesConnection: (args?: {
    where?: LikeWhereInput;
    orderBy?: LikeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => LikeConnectionPromise;
  message: (where: MessageWhereUniqueInput) => MessageNullablePromise;
  messages: (args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Message>;
  messagesConnection: (args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => MessageConnectionPromise;
  post: (where: PostWhereUniqueInput) => PostNullablePromise;
  posts: (args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Post>;
  postsConnection: (args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PostConnectionPromise;
  room: (where: RoomWhereUniqueInput) => RoomNullablePromise;
  rooms: (args?: {
    where?: RoomWhereInput;
    orderBy?: RoomOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Room>;
  roomsConnection: (args?: {
    where?: RoomWhereInput;
    orderBy?: RoomOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => RoomConnectionPromise;
  text: (where: TextWhereUniqueInput) => TextNullablePromise;
  texts: (args?: {
    where?: TextWhereInput;
    orderBy?: TextOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Text>;
  textsConnection: (args?: {
    where?: TextWhereInput;
    orderBy?: TextOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => TextConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  video: (where: VideoWhereUniqueInput) => VideoNullablePromise;
  videos: (args?: {
    where?: VideoWhereInput;
    orderBy?: VideoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Video>;
  videosConnection: (args?: {
    where?: VideoWhereInput;
    orderBy?: VideoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => VideoConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAudio: (data: AudioCreateInput) => AudioPromise;
  updateAudio: (args: {
    data: AudioUpdateInput;
    where: AudioWhereUniqueInput;
  }) => AudioPromise;
  updateManyAudios: (args: {
    data: AudioUpdateManyMutationInput;
    where?: AudioWhereInput;
  }) => BatchPayloadPromise;
  upsertAudio: (args: {
    where: AudioWhereUniqueInput;
    create: AudioCreateInput;
    update: AudioUpdateInput;
  }) => AudioPromise;
  deleteAudio: (where: AudioWhereUniqueInput) => AudioPromise;
  deleteManyAudios: (where?: AudioWhereInput) => BatchPayloadPromise;
  createCategory: (data: CategoryCreateInput) => CategoryPromise;
  updateCategory: (args: {
    data: CategoryUpdateInput;
    where: CategoryWhereUniqueInput;
  }) => CategoryPromise;
  updateManyCategories: (args: {
    data: CategoryUpdateManyMutationInput;
    where?: CategoryWhereInput;
  }) => BatchPayloadPromise;
  upsertCategory: (args: {
    where: CategoryWhereUniqueInput;
    create: CategoryCreateInput;
    update: CategoryUpdateInput;
  }) => CategoryPromise;
  deleteCategory: (where: CategoryWhereUniqueInput) => CategoryPromise;
  deleteManyCategories: (where?: CategoryWhereInput) => BatchPayloadPromise;
  createComment: (data: CommentCreateInput) => CommentPromise;
  updateComment: (args: {
    data: CommentUpdateInput;
    where: CommentWhereUniqueInput;
  }) => CommentPromise;
  updateManyComments: (args: {
    data: CommentUpdateManyMutationInput;
    where?: CommentWhereInput;
  }) => BatchPayloadPromise;
  upsertComment: (args: {
    where: CommentWhereUniqueInput;
    create: CommentCreateInput;
    update: CommentUpdateInput;
  }) => CommentPromise;
  deleteComment: (where: CommentWhereUniqueInput) => CommentPromise;
  deleteManyComments: (where?: CommentWhereInput) => BatchPayloadPromise;
  createFile: (data: FileCreateInput) => FilePromise;
  updateFile: (args: {
    data: FileUpdateInput;
    where: FileWhereUniqueInput;
  }) => FilePromise;
  updateManyFiles: (args: {
    data: FileUpdateManyMutationInput;
    where?: FileWhereInput;
  }) => BatchPayloadPromise;
  upsertFile: (args: {
    where: FileWhereUniqueInput;
    create: FileCreateInput;
    update: FileUpdateInput;
  }) => FilePromise;
  deleteFile: (where: FileWhereUniqueInput) => FilePromise;
  deleteManyFiles: (where?: FileWhereInput) => BatchPayloadPromise;
  createHashtag: (data: HashtagCreateInput) => HashtagPromise;
  updateHashtag: (args: {
    data: HashtagUpdateInput;
    where: HashtagWhereUniqueInput;
  }) => HashtagPromise;
  updateManyHashtags: (args: {
    data: HashtagUpdateManyMutationInput;
    where?: HashtagWhereInput;
  }) => BatchPayloadPromise;
  upsertHashtag: (args: {
    where: HashtagWhereUniqueInput;
    create: HashtagCreateInput;
    update: HashtagUpdateInput;
  }) => HashtagPromise;
  deleteHashtag: (where: HashtagWhereUniqueInput) => HashtagPromise;
  deleteManyHashtags: (where?: HashtagWhereInput) => BatchPayloadPromise;
  createImage: (data: ImageCreateInput) => ImagePromise;
  updateImage: (args: {
    data: ImageUpdateInput;
    where: ImageWhereUniqueInput;
  }) => ImagePromise;
  updateManyImages: (args: {
    data: ImageUpdateManyMutationInput;
    where?: ImageWhereInput;
  }) => BatchPayloadPromise;
  upsertImage: (args: {
    where: ImageWhereUniqueInput;
    create: ImageCreateInput;
    update: ImageUpdateInput;
  }) => ImagePromise;
  deleteImage: (where: ImageWhereUniqueInput) => ImagePromise;
  deleteManyImages: (where?: ImageWhereInput) => BatchPayloadPromise;
  createLike: (data: LikeCreateInput) => LikePromise;
  updateLike: (args: {
    data: LikeUpdateInput;
    where: LikeWhereUniqueInput;
  }) => LikePromise;
  upsertLike: (args: {
    where: LikeWhereUniqueInput;
    create: LikeCreateInput;
    update: LikeUpdateInput;
  }) => LikePromise;
  deleteLike: (where: LikeWhereUniqueInput) => LikePromise;
  deleteManyLikes: (where?: LikeWhereInput) => BatchPayloadPromise;
  createMessage: (data: MessageCreateInput) => MessagePromise;
  updateMessage: (args: {
    data: MessageUpdateInput;
    where: MessageWhereUniqueInput;
  }) => MessagePromise;
  updateManyMessages: (args: {
    data: MessageUpdateManyMutationInput;
    where?: MessageWhereInput;
  }) => BatchPayloadPromise;
  upsertMessage: (args: {
    where: MessageWhereUniqueInput;
    create: MessageCreateInput;
    update: MessageUpdateInput;
  }) => MessagePromise;
  deleteMessage: (where: MessageWhereUniqueInput) => MessagePromise;
  deleteManyMessages: (where?: MessageWhereInput) => BatchPayloadPromise;
  createPost: (data: PostCreateInput) => PostPromise;
  updatePost: (args: {
    data: PostUpdateInput;
    where: PostWhereUniqueInput;
  }) => PostPromise;
  updateManyPosts: (args: {
    data: PostUpdateManyMutationInput;
    where?: PostWhereInput;
  }) => BatchPayloadPromise;
  upsertPost: (args: {
    where: PostWhereUniqueInput;
    create: PostCreateInput;
    update: PostUpdateInput;
  }) => PostPromise;
  deletePost: (where: PostWhereUniqueInput) => PostPromise;
  deleteManyPosts: (where?: PostWhereInput) => BatchPayloadPromise;
  createRoom: (data: RoomCreateInput) => RoomPromise;
  updateRoom: (args: {
    data: RoomUpdateInput;
    where: RoomWhereUniqueInput;
  }) => RoomPromise;
  upsertRoom: (args: {
    where: RoomWhereUniqueInput;
    create: RoomCreateInput;
    update: RoomUpdateInput;
  }) => RoomPromise;
  deleteRoom: (where: RoomWhereUniqueInput) => RoomPromise;
  deleteManyRooms: (where?: RoomWhereInput) => BatchPayloadPromise;
  createText: (data: TextCreateInput) => TextPromise;
  updateText: (args: {
    data: TextUpdateInput;
    where: TextWhereUniqueInput;
  }) => TextPromise;
  updateManyTexts: (args: {
    data: TextUpdateManyMutationInput;
    where?: TextWhereInput;
  }) => BatchPayloadPromise;
  upsertText: (args: {
    where: TextWhereUniqueInput;
    create: TextCreateInput;
    update: TextUpdateInput;
  }) => TextPromise;
  deleteText: (where: TextWhereUniqueInput) => TextPromise;
  deleteManyTexts: (where?: TextWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;
  createVideo: (data: VideoCreateInput) => VideoPromise;
  updateVideo: (args: {
    data: VideoUpdateInput;
    where: VideoWhereUniqueInput;
  }) => VideoPromise;
  updateManyVideos: (args: {
    data: VideoUpdateManyMutationInput;
    where?: VideoWhereInput;
  }) => BatchPayloadPromise;
  upsertVideo: (args: {
    where: VideoWhereUniqueInput;
    create: VideoCreateInput;
    update: VideoUpdateInput;
  }) => VideoPromise;
  deleteVideo: (where: VideoWhereUniqueInput) => VideoPromise;
  deleteManyVideos: (where?: VideoWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  audio: (
    where?: AudioSubscriptionWhereInput
  ) => AudioSubscriptionPayloadSubscription;
  category: (
    where?: CategorySubscriptionWhereInput
  ) => CategorySubscriptionPayloadSubscription;
  comment: (
    where?: CommentSubscriptionWhereInput
  ) => CommentSubscriptionPayloadSubscription;
  file: (
    where?: FileSubscriptionWhereInput
  ) => FileSubscriptionPayloadSubscription;
  hashtag: (
    where?: HashtagSubscriptionWhereInput
  ) => HashtagSubscriptionPayloadSubscription;
  image: (
    where?: ImageSubscriptionWhereInput
  ) => ImageSubscriptionPayloadSubscription;
  like: (
    where?: LikeSubscriptionWhereInput
  ) => LikeSubscriptionPayloadSubscription;
  message: (
    where?: MessageSubscriptionWhereInput
  ) => MessageSubscriptionPayloadSubscription;
  post: (
    where?: PostSubscriptionWhereInput
  ) => PostSubscriptionPayloadSubscription;
  room: (
    where?: RoomSubscriptionWhereInput
  ) => RoomSubscriptionPayloadSubscription;
  text: (
    where?: TextSubscriptionWhereInput
  ) => TextSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  video: (
    where?: VideoSubscriptionWhereInput
  ) => VideoSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type FileOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "url_ASC"
  | "url_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "avatar_ASC"
  | "avatar_DESC"
  | "username_ASC"
  | "username_DESC"
  | "nickname_ASC"
  | "nickname_DESC"
  | "passwd_ASC"
  | "passwd_DESC"
  | "email_ASC"
  | "email_DESC"
  | "bio_ASC"
  | "bio_DESC"
  | "loginSecret_ASC"
  | "loginSecret_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "favCategory_ASC"
  | "favCategory_DESC";

export type PostOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "caption_ASC"
  | "caption_DESC"
  | "location_ASC"
  | "location_DESC"
  | "category_ASC"
  | "category_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type LikeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CommentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "text_ASC"
  | "text_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type RoomOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MessageOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "text_ASC"
  | "text_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type HashtagOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "tag_name_ASC"
  | "tag_name_DESC";

export type VideoOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "video_url_ASC"
  | "video_url_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type ImageOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "image_url_ASC"
  | "image_url_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type AudioOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "audio_url_ASC"
  | "audio_url_DESC"
  | "audio_img_url_ASC"
  | "audio_img_url_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type TextOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "text_img_url_ASC"
  | "text_img_url_DESC"
  | "content_ASC"
  | "content_DESC"
  | "relay_ASC"
  | "relay_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type CategoryOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "cat_name_ASC"
  | "cat_name_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type AudioWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface FileWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  post?: Maybe<PostWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  text_every?: Maybe<TextWhereInput>;
  text_some?: Maybe<TextWhereInput>;
  text_none?: Maybe<TextWhereInput>;
  video_every?: Maybe<VideoWhereInput>;
  video_some?: Maybe<VideoWhereInput>;
  video_none?: Maybe<VideoWhereInput>;
  audio_every?: Maybe<AudioWhereInput>;
  audio_some?: Maybe<AudioWhereInput>;
  audio_none?: Maybe<AudioWhereInput>;
  image_every?: Maybe<ImageWhereInput>;
  image_some?: Maybe<ImageWhereInput>;
  image_none?: Maybe<ImageWhereInput>;
  AND?: Maybe<FileWhereInput[] | FileWhereInput>;
  OR?: Maybe<FileWhereInput[] | FileWhereInput>;
  NOT?: Maybe<FileWhereInput[] | FileWhereInput>;
}

export interface PostWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  caption?: Maybe<String>;
  caption_not?: Maybe<String>;
  caption_in?: Maybe<String[] | String>;
  caption_not_in?: Maybe<String[] | String>;
  caption_lt?: Maybe<String>;
  caption_lte?: Maybe<String>;
  caption_gt?: Maybe<String>;
  caption_gte?: Maybe<String>;
  caption_contains?: Maybe<String>;
  caption_not_contains?: Maybe<String>;
  caption_starts_with?: Maybe<String>;
  caption_not_starts_with?: Maybe<String>;
  caption_ends_with?: Maybe<String>;
  caption_not_ends_with?: Maybe<String>;
  location?: Maybe<String>;
  location_not?: Maybe<String>;
  location_in?: Maybe<String[] | String>;
  location_not_in?: Maybe<String[] | String>;
  location_lt?: Maybe<String>;
  location_lte?: Maybe<String>;
  location_gt?: Maybe<String>;
  location_gte?: Maybe<String>;
  location_contains?: Maybe<String>;
  location_not_contains?: Maybe<String>;
  location_starts_with?: Maybe<String>;
  location_not_starts_with?: Maybe<String>;
  location_ends_with?: Maybe<String>;
  location_not_ends_with?: Maybe<String>;
  files_every?: Maybe<FileWhereInput>;
  files_some?: Maybe<FileWhereInput>;
  files_none?: Maybe<FileWhereInput>;
  user?: Maybe<UserWhereInput>;
  likes_every?: Maybe<LikeWhereInput>;
  likes_some?: Maybe<LikeWhereInput>;
  likes_none?: Maybe<LikeWhereInput>;
  hashtags_every?: Maybe<HashtagWhereInput>;
  hashtags_some?: Maybe<HashtagWhereInput>;
  hashtags_none?: Maybe<HashtagWhereInput>;
  comments_every?: Maybe<CommentWhereInput>;
  comments_some?: Maybe<CommentWhereInput>;
  comments_none?: Maybe<CommentWhereInput>;
  category?: Maybe<String>;
  category_not?: Maybe<String>;
  category_in?: Maybe<String[] | String>;
  category_not_in?: Maybe<String[] | String>;
  category_lt?: Maybe<String>;
  category_lte?: Maybe<String>;
  category_gt?: Maybe<String>;
  category_gte?: Maybe<String>;
  category_contains?: Maybe<String>;
  category_not_contains?: Maybe<String>;
  category_starts_with?: Maybe<String>;
  category_not_starts_with?: Maybe<String>;
  category_ends_with?: Maybe<String>;
  category_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  relChallenger_every?: Maybe<UserWhereInput>;
  relChallenger_some?: Maybe<UserWhereInput>;
  relChallenger_none?: Maybe<UserWhereInput>;
  preChallenger_every?: Maybe<UserWhereInput>;
  preChallenger_some?: Maybe<UserWhereInput>;
  preChallenger_none?: Maybe<UserWhereInput>;
  nextChallenger_every?: Maybe<UserWhereInput>;
  nextChallenger_some?: Maybe<UserWhereInput>;
  nextChallenger_none?: Maybe<UserWhereInput>;
  nextPosts_every?: Maybe<PostWhereInput>;
  nextPosts_some?: Maybe<PostWhereInput>;
  nextPosts_none?: Maybe<PostWhereInput>;
  prePosts_every?: Maybe<PostWhereInput>;
  prePosts_some?: Maybe<PostWhereInput>;
  prePosts_none?: Maybe<PostWhereInput>;
  tagChallenger_every?: Maybe<UserWhereInput>;
  tagChallenger_some?: Maybe<UserWhereInput>;
  tagChallenger_none?: Maybe<UserWhereInput>;
  video_every?: Maybe<VideoWhereInput>;
  video_some?: Maybe<VideoWhereInput>;
  video_none?: Maybe<VideoWhereInput>;
  image_every?: Maybe<ImageWhereInput>;
  image_some?: Maybe<ImageWhereInput>;
  image_none?: Maybe<ImageWhereInput>;
  audio_every?: Maybe<AudioWhereInput>;
  audio_some?: Maybe<AudioWhereInput>;
  audio_none?: Maybe<AudioWhereInput>;
  text_every?: Maybe<TextWhereInput>;
  text_some?: Maybe<TextWhereInput>;
  text_none?: Maybe<TextWhereInput>;
  AND?: Maybe<PostWhereInput[] | PostWhereInput>;
  OR?: Maybe<PostWhereInput[] | PostWhereInput>;
  NOT?: Maybe<PostWhereInput[] | PostWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  avatar?: Maybe<String>;
  avatar_not?: Maybe<String>;
  avatar_in?: Maybe<String[] | String>;
  avatar_not_in?: Maybe<String[] | String>;
  avatar_lt?: Maybe<String>;
  avatar_lte?: Maybe<String>;
  avatar_gt?: Maybe<String>;
  avatar_gte?: Maybe<String>;
  avatar_contains?: Maybe<String>;
  avatar_not_contains?: Maybe<String>;
  avatar_starts_with?: Maybe<String>;
  avatar_not_starts_with?: Maybe<String>;
  avatar_ends_with?: Maybe<String>;
  avatar_not_ends_with?: Maybe<String>;
  username?: Maybe<String>;
  username_not?: Maybe<String>;
  username_in?: Maybe<String[] | String>;
  username_not_in?: Maybe<String[] | String>;
  username_lt?: Maybe<String>;
  username_lte?: Maybe<String>;
  username_gt?: Maybe<String>;
  username_gte?: Maybe<String>;
  username_contains?: Maybe<String>;
  username_not_contains?: Maybe<String>;
  username_starts_with?: Maybe<String>;
  username_not_starts_with?: Maybe<String>;
  username_ends_with?: Maybe<String>;
  username_not_ends_with?: Maybe<String>;
  nickname?: Maybe<String>;
  nickname_not?: Maybe<String>;
  nickname_in?: Maybe<String[] | String>;
  nickname_not_in?: Maybe<String[] | String>;
  nickname_lt?: Maybe<String>;
  nickname_lte?: Maybe<String>;
  nickname_gt?: Maybe<String>;
  nickname_gte?: Maybe<String>;
  nickname_contains?: Maybe<String>;
  nickname_not_contains?: Maybe<String>;
  nickname_starts_with?: Maybe<String>;
  nickname_not_starts_with?: Maybe<String>;
  nickname_ends_with?: Maybe<String>;
  nickname_not_ends_with?: Maybe<String>;
  passwd?: Maybe<String>;
  passwd_not?: Maybe<String>;
  passwd_in?: Maybe<String[] | String>;
  passwd_not_in?: Maybe<String[] | String>;
  passwd_lt?: Maybe<String>;
  passwd_lte?: Maybe<String>;
  passwd_gt?: Maybe<String>;
  passwd_gte?: Maybe<String>;
  passwd_contains?: Maybe<String>;
  passwd_not_contains?: Maybe<String>;
  passwd_starts_with?: Maybe<String>;
  passwd_not_starts_with?: Maybe<String>;
  passwd_ends_with?: Maybe<String>;
  passwd_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  bio?: Maybe<String>;
  bio_not?: Maybe<String>;
  bio_in?: Maybe<String[] | String>;
  bio_not_in?: Maybe<String[] | String>;
  bio_lt?: Maybe<String>;
  bio_lte?: Maybe<String>;
  bio_gt?: Maybe<String>;
  bio_gte?: Maybe<String>;
  bio_contains?: Maybe<String>;
  bio_not_contains?: Maybe<String>;
  bio_starts_with?: Maybe<String>;
  bio_not_starts_with?: Maybe<String>;
  bio_ends_with?: Maybe<String>;
  bio_not_ends_with?: Maybe<String>;
  following_every?: Maybe<UserWhereInput>;
  following_some?: Maybe<UserWhereInput>;
  following_none?: Maybe<UserWhereInput>;
  followers_every?: Maybe<UserWhereInput>;
  followers_some?: Maybe<UserWhereInput>;
  followers_none?: Maybe<UserWhereInput>;
  posts_every?: Maybe<PostWhereInput>;
  posts_some?: Maybe<PostWhereInput>;
  posts_none?: Maybe<PostWhereInput>;
  likes_every?: Maybe<LikeWhereInput>;
  likes_some?: Maybe<LikeWhereInput>;
  likes_none?: Maybe<LikeWhereInput>;
  comments_every?: Maybe<CommentWhereInput>;
  comments_some?: Maybe<CommentWhereInput>;
  comments_none?: Maybe<CommentWhereInput>;
  rooms_every?: Maybe<RoomWhereInput>;
  rooms_some?: Maybe<RoomWhereInput>;
  rooms_none?: Maybe<RoomWhereInput>;
  relChallenger_every?: Maybe<PostWhereInput>;
  relChallenger_some?: Maybe<PostWhereInput>;
  relChallenger_none?: Maybe<PostWhereInput>;
  preChallenger_every?: Maybe<PostWhereInput>;
  preChallenger_some?: Maybe<PostWhereInput>;
  preChallenger_none?: Maybe<PostWhereInput>;
  nextChallenger_every?: Maybe<PostWhereInput>;
  nextChallenger_some?: Maybe<PostWhereInput>;
  nextChallenger_none?: Maybe<PostWhereInput>;
  tagChallenger_every?: Maybe<PostWhereInput>;
  tagChallenger_some?: Maybe<PostWhereInput>;
  tagChallenger_none?: Maybe<PostWhereInput>;
  loginSecret?: Maybe<String>;
  loginSecret_not?: Maybe<String>;
  loginSecret_in?: Maybe<String[] | String>;
  loginSecret_not_in?: Maybe<String[] | String>;
  loginSecret_lt?: Maybe<String>;
  loginSecret_lte?: Maybe<String>;
  loginSecret_gt?: Maybe<String>;
  loginSecret_gte?: Maybe<String>;
  loginSecret_contains?: Maybe<String>;
  loginSecret_not_contains?: Maybe<String>;
  loginSecret_starts_with?: Maybe<String>;
  loginSecret_not_starts_with?: Maybe<String>;
  loginSecret_ends_with?: Maybe<String>;
  loginSecret_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  favCategory?: Maybe<String>;
  favCategory_not?: Maybe<String>;
  favCategory_in?: Maybe<String[] | String>;
  favCategory_not_in?: Maybe<String[] | String>;
  favCategory_lt?: Maybe<String>;
  favCategory_lte?: Maybe<String>;
  favCategory_gt?: Maybe<String>;
  favCategory_gte?: Maybe<String>;
  favCategory_contains?: Maybe<String>;
  favCategory_not_contains?: Maybe<String>;
  favCategory_starts_with?: Maybe<String>;
  favCategory_not_starts_with?: Maybe<String>;
  favCategory_ends_with?: Maybe<String>;
  favCategory_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface LikeWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  post?: Maybe<PostWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<LikeWhereInput[] | LikeWhereInput>;
  OR?: Maybe<LikeWhereInput[] | LikeWhereInput>;
  NOT?: Maybe<LikeWhereInput[] | LikeWhereInput>;
}

export interface CommentWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  user?: Maybe<UserWhereInput>;
  post?: Maybe<PostWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CommentWhereInput[] | CommentWhereInput>;
  OR?: Maybe<CommentWhereInput[] | CommentWhereInput>;
  NOT?: Maybe<CommentWhereInput[] | CommentWhereInput>;
}

export interface RoomWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  participants_every?: Maybe<UserWhereInput>;
  participants_some?: Maybe<UserWhereInput>;
  participants_none?: Maybe<UserWhereInput>;
  messages_every?: Maybe<MessageWhereInput>;
  messages_some?: Maybe<MessageWhereInput>;
  messages_none?: Maybe<MessageWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<RoomWhereInput[] | RoomWhereInput>;
  OR?: Maybe<RoomWhereInput[] | RoomWhereInput>;
  NOT?: Maybe<RoomWhereInput[] | RoomWhereInput>;
}

export interface MessageWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  from?: Maybe<UserWhereInput>;
  to?: Maybe<UserWhereInput>;
  room?: Maybe<RoomWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<MessageWhereInput[] | MessageWhereInput>;
  OR?: Maybe<MessageWhereInput[] | MessageWhereInput>;
  NOT?: Maybe<MessageWhereInput[] | MessageWhereInput>;
}

export interface HashtagWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  tag_name?: Maybe<String>;
  tag_name_not?: Maybe<String>;
  tag_name_in?: Maybe<String[] | String>;
  tag_name_not_in?: Maybe<String[] | String>;
  tag_name_lt?: Maybe<String>;
  tag_name_lte?: Maybe<String>;
  tag_name_gt?: Maybe<String>;
  tag_name_gte?: Maybe<String>;
  tag_name_contains?: Maybe<String>;
  tag_name_not_contains?: Maybe<String>;
  tag_name_starts_with?: Maybe<String>;
  tag_name_not_starts_with?: Maybe<String>;
  tag_name_ends_with?: Maybe<String>;
  tag_name_not_ends_with?: Maybe<String>;
  post_every?: Maybe<PostWhereInput>;
  post_some?: Maybe<PostWhereInput>;
  post_none?: Maybe<PostWhereInput>;
  AND?: Maybe<HashtagWhereInput[] | HashtagWhereInput>;
  OR?: Maybe<HashtagWhereInput[] | HashtagWhereInput>;
  NOT?: Maybe<HashtagWhereInput[] | HashtagWhereInput>;
}

export interface VideoWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  video_url?: Maybe<String>;
  video_url_not?: Maybe<String>;
  video_url_in?: Maybe<String[] | String>;
  video_url_not_in?: Maybe<String[] | String>;
  video_url_lt?: Maybe<String>;
  video_url_lte?: Maybe<String>;
  video_url_gt?: Maybe<String>;
  video_url_gte?: Maybe<String>;
  video_url_contains?: Maybe<String>;
  video_url_not_contains?: Maybe<String>;
  video_url_starts_with?: Maybe<String>;
  video_url_not_starts_with?: Maybe<String>;
  video_url_ends_with?: Maybe<String>;
  video_url_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  post?: Maybe<PostWhereInput>;
  files_every?: Maybe<FileWhereInput>;
  files_some?: Maybe<FileWhereInput>;
  files_none?: Maybe<FileWhereInput>;
  AND?: Maybe<VideoWhereInput[] | VideoWhereInput>;
  OR?: Maybe<VideoWhereInput[] | VideoWhereInput>;
  NOT?: Maybe<VideoWhereInput[] | VideoWhereInput>;
}

export interface ImageWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  image_url?: Maybe<String>;
  image_url_not?: Maybe<String>;
  image_url_in?: Maybe<String[] | String>;
  image_url_not_in?: Maybe<String[] | String>;
  image_url_lt?: Maybe<String>;
  image_url_lte?: Maybe<String>;
  image_url_gt?: Maybe<String>;
  image_url_gte?: Maybe<String>;
  image_url_contains?: Maybe<String>;
  image_url_not_contains?: Maybe<String>;
  image_url_starts_with?: Maybe<String>;
  image_url_not_starts_with?: Maybe<String>;
  image_url_ends_with?: Maybe<String>;
  image_url_not_ends_with?: Maybe<String>;
  files_every?: Maybe<FileWhereInput>;
  files_some?: Maybe<FileWhereInput>;
  files_none?: Maybe<FileWhereInput>;
  post?: Maybe<PostWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ImageWhereInput[] | ImageWhereInput>;
  OR?: Maybe<ImageWhereInput[] | ImageWhereInput>;
  NOT?: Maybe<ImageWhereInput[] | ImageWhereInput>;
}

export interface AudioWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  audio_url?: Maybe<String>;
  audio_url_not?: Maybe<String>;
  audio_url_in?: Maybe<String[] | String>;
  audio_url_not_in?: Maybe<String[] | String>;
  audio_url_lt?: Maybe<String>;
  audio_url_lte?: Maybe<String>;
  audio_url_gt?: Maybe<String>;
  audio_url_gte?: Maybe<String>;
  audio_url_contains?: Maybe<String>;
  audio_url_not_contains?: Maybe<String>;
  audio_url_starts_with?: Maybe<String>;
  audio_url_not_starts_with?: Maybe<String>;
  audio_url_ends_with?: Maybe<String>;
  audio_url_not_ends_with?: Maybe<String>;
  audio_img_url?: Maybe<String>;
  audio_img_url_not?: Maybe<String>;
  audio_img_url_in?: Maybe<String[] | String>;
  audio_img_url_not_in?: Maybe<String[] | String>;
  audio_img_url_lt?: Maybe<String>;
  audio_img_url_lte?: Maybe<String>;
  audio_img_url_gt?: Maybe<String>;
  audio_img_url_gte?: Maybe<String>;
  audio_img_url_contains?: Maybe<String>;
  audio_img_url_not_contains?: Maybe<String>;
  audio_img_url_starts_with?: Maybe<String>;
  audio_img_url_not_starts_with?: Maybe<String>;
  audio_img_url_ends_with?: Maybe<String>;
  audio_img_url_not_ends_with?: Maybe<String>;
  audioFile?: Maybe<FileWhereInput>;
  post?: Maybe<PostWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<AudioWhereInput[] | AudioWhereInput>;
  OR?: Maybe<AudioWhereInput[] | AudioWhereInput>;
  NOT?: Maybe<AudioWhereInput[] | AudioWhereInput>;
}

export interface TextWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  text_img_url?: Maybe<String>;
  text_img_url_not?: Maybe<String>;
  text_img_url_in?: Maybe<String[] | String>;
  text_img_url_not_in?: Maybe<String[] | String>;
  text_img_url_lt?: Maybe<String>;
  text_img_url_lte?: Maybe<String>;
  text_img_url_gt?: Maybe<String>;
  text_img_url_gte?: Maybe<String>;
  text_img_url_contains?: Maybe<String>;
  text_img_url_not_contains?: Maybe<String>;
  text_img_url_starts_with?: Maybe<String>;
  text_img_url_not_starts_with?: Maybe<String>;
  text_img_url_ends_with?: Maybe<String>;
  text_img_url_not_ends_with?: Maybe<String>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  imageFile?: Maybe<FileWhereInput>;
  post?: Maybe<PostWhereInput>;
  relay?: Maybe<Boolean>;
  relay_not?: Maybe<Boolean>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<TextWhereInput[] | TextWhereInput>;
  OR?: Maybe<TextWhereInput[] | TextWhereInput>;
  NOT?: Maybe<TextWhereInput[] | TextWhereInput>;
}

export type CategoryWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface CategoryWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  cat_name?: Maybe<String>;
  cat_name_not?: Maybe<String>;
  cat_name_in?: Maybe<String[] | String>;
  cat_name_not_in?: Maybe<String[] | String>;
  cat_name_lt?: Maybe<String>;
  cat_name_lte?: Maybe<String>;
  cat_name_gt?: Maybe<String>;
  cat_name_gte?: Maybe<String>;
  cat_name_contains?: Maybe<String>;
  cat_name_not_contains?: Maybe<String>;
  cat_name_starts_with?: Maybe<String>;
  cat_name_not_starts_with?: Maybe<String>;
  cat_name_ends_with?: Maybe<String>;
  cat_name_not_ends_with?: Maybe<String>;
  AND?: Maybe<CategoryWhereInput[] | CategoryWhereInput>;
  OR?: Maybe<CategoryWhereInput[] | CategoryWhereInput>;
  NOT?: Maybe<CategoryWhereInput[] | CategoryWhereInput>;
}

export type CommentWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type FileWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type HashtagWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  tag_name?: Maybe<String>;
}>;

export type ImageWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type LikeWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type MessageWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type PostWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type RoomWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type TextWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  username?: Maybe<String>;
  email?: Maybe<String>;
}>;

export type VideoWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface AudioCreateInput {
  id?: Maybe<ID_Input>;
  audio_url: String;
  audio_img_url: String;
  audioFile: FileCreateOneWithoutAudioInput;
  post?: Maybe<PostCreateOneWithoutAudioInput>;
}

export interface FileCreateOneWithoutAudioInput {
  create?: Maybe<FileCreateWithoutAudioInput>;
  connect?: Maybe<FileWhereUniqueInput>;
}

export interface FileCreateWithoutAudioInput {
  id?: Maybe<ID_Input>;
  url: String;
  post?: Maybe<PostCreateOneWithoutFilesInput>;
  text?: Maybe<TextCreateManyWithoutImageFileInput>;
  video?: Maybe<VideoCreateManyWithoutFilesInput>;
  image?: Maybe<ImageCreateManyWithoutFilesInput>;
}

export interface PostCreateOneWithoutFilesInput {
  create?: Maybe<PostCreateWithoutFilesInput>;
  connect?: Maybe<PostWhereUniqueInput>;
}

export interface PostCreateWithoutFilesInput {
  id?: Maybe<ID_Input>;
  caption?: Maybe<String>;
  location?: Maybe<String>;
  user?: Maybe<UserCreateOneWithoutPostsInput>;
  likes?: Maybe<LikeCreateManyWithoutPostInput>;
  hashtags?: Maybe<HashtagCreateManyWithoutPostInput>;
  comments?: Maybe<CommentCreateManyWithoutPostInput>;
  category: String;
  relChallenger?: Maybe<UserCreateManyWithoutRelChallengerInput>;
  preChallenger?: Maybe<UserCreateManyWithoutPreChallengerInput>;
  nextChallenger?: Maybe<UserCreateManyWithoutNextChallengerInput>;
  nextPosts?: Maybe<PostCreateManyWithoutPrePostsInput>;
  prePosts?: Maybe<PostCreateManyWithoutNextPostsInput>;
  tagChallenger?: Maybe<UserCreateManyWithoutTagChallengerInput>;
  video?: Maybe<VideoCreateManyWithoutPostInput>;
  image?: Maybe<ImageCreateManyWithoutPostInput>;
  audio?: Maybe<AudioCreateManyWithoutPostInput>;
  text?: Maybe<TextCreateManyWithoutPostInput>;
}

export interface UserCreateOneWithoutPostsInput {
  create?: Maybe<UserCreateWithoutPostsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutPostsInput {
  id?: Maybe<ID_Input>;
  avatar?: Maybe<String>;
  username: String;
  nickname: String;
  passwd: String;
  email: String;
  bio?: Maybe<String>;
  following?: Maybe<UserCreateManyWithoutFollowersInput>;
  followers?: Maybe<UserCreateManyWithoutFollowingInput>;
  likes?: Maybe<LikeCreateManyWithoutUserInput>;
  comments?: Maybe<CommentCreateManyWithoutUserInput>;
  rooms?: Maybe<RoomCreateManyWithoutParticipantsInput>;
  relChallenger?: Maybe<PostCreateManyWithoutRelChallengerInput>;
  preChallenger?: Maybe<PostCreateManyWithoutPreChallengerInput>;
  nextChallenger?: Maybe<PostCreateManyWithoutNextChallengerInput>;
  tagChallenger?: Maybe<PostCreateManyWithoutTagChallengerInput>;
  loginSecret?: Maybe<String>;
  favCategory?: Maybe<String>;
}

export interface UserCreateManyWithoutFollowersInput {
  create?: Maybe<
    UserCreateWithoutFollowersInput[] | UserCreateWithoutFollowersInput
  >;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserCreateWithoutFollowersInput {
  id?: Maybe<ID_Input>;
  avatar?: Maybe<String>;
  username: String;
  nickname: String;
  passwd: String;
  email: String;
  bio?: Maybe<String>;
  following?: Maybe<UserCreateManyWithoutFollowersInput>;
  posts?: Maybe<PostCreateManyWithoutUserInput>;
  likes?: Maybe<LikeCreateManyWithoutUserInput>;
  comments?: Maybe<CommentCreateManyWithoutUserInput>;
  rooms?: Maybe<RoomCreateManyWithoutParticipantsInput>;
  relChallenger?: Maybe<PostCreateManyWithoutRelChallengerInput>;
  preChallenger?: Maybe<PostCreateManyWithoutPreChallengerInput>;
  nextChallenger?: Maybe<PostCreateManyWithoutNextChallengerInput>;
  tagChallenger?: Maybe<PostCreateManyWithoutTagChallengerInput>;
  loginSecret?: Maybe<String>;
  favCategory?: Maybe<String>;
}

export interface PostCreateManyWithoutUserInput {
  create?: Maybe<PostCreateWithoutUserInput[] | PostCreateWithoutUserInput>;
  connect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
}

export interface PostCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  caption?: Maybe<String>;
  location?: Maybe<String>;
  files?: Maybe<FileCreateManyWithoutPostInput>;
  likes?: Maybe<LikeCreateManyWithoutPostInput>;
  hashtags?: Maybe<HashtagCreateManyWithoutPostInput>;
  comments?: Maybe<CommentCreateManyWithoutPostInput>;
  category: String;
  relChallenger?: Maybe<UserCreateManyWithoutRelChallengerInput>;
  preChallenger?: Maybe<UserCreateManyWithoutPreChallengerInput>;
  nextChallenger?: Maybe<UserCreateManyWithoutNextChallengerInput>;
  nextPosts?: Maybe<PostCreateManyWithoutPrePostsInput>;
  prePosts?: Maybe<PostCreateManyWithoutNextPostsInput>;
  tagChallenger?: Maybe<UserCreateManyWithoutTagChallengerInput>;
  video?: Maybe<VideoCreateManyWithoutPostInput>;
  image?: Maybe<ImageCreateManyWithoutPostInput>;
  audio?: Maybe<AudioCreateManyWithoutPostInput>;
  text?: Maybe<TextCreateManyWithoutPostInput>;
}

export interface FileCreateManyWithoutPostInput {
  create?: Maybe<FileCreateWithoutPostInput[] | FileCreateWithoutPostInput>;
  connect?: Maybe<FileWhereUniqueInput[] | FileWhereUniqueInput>;
}

export interface FileCreateWithoutPostInput {
  id?: Maybe<ID_Input>;
  url: String;
  text?: Maybe<TextCreateManyWithoutImageFileInput>;
  video?: Maybe<VideoCreateManyWithoutFilesInput>;
  audio?: Maybe<AudioCreateManyWithoutAudioFileInput>;
  image?: Maybe<ImageCreateManyWithoutFilesInput>;
}

export interface TextCreateManyWithoutImageFileInput {
  create?: Maybe<
    TextCreateWithoutImageFileInput[] | TextCreateWithoutImageFileInput
  >;
  connect?: Maybe<TextWhereUniqueInput[] | TextWhereUniqueInput>;
}

export interface TextCreateWithoutImageFileInput {
  id?: Maybe<ID_Input>;
  text_img_url: String;
  content: String;
  post?: Maybe<PostCreateOneWithoutTextInput>;
  relay: Boolean;
}

export interface PostCreateOneWithoutTextInput {
  create?: Maybe<PostCreateWithoutTextInput>;
  connect?: Maybe<PostWhereUniqueInput>;
}

export interface PostCreateWithoutTextInput {
  id?: Maybe<ID_Input>;
  caption?: Maybe<String>;
  location?: Maybe<String>;
  files?: Maybe<FileCreateManyWithoutPostInput>;
  user?: Maybe<UserCreateOneWithoutPostsInput>;
  likes?: Maybe<LikeCreateManyWithoutPostInput>;
  hashtags?: Maybe<HashtagCreateManyWithoutPostInput>;
  comments?: Maybe<CommentCreateManyWithoutPostInput>;
  category: String;
  relChallenger?: Maybe<UserCreateManyWithoutRelChallengerInput>;
  preChallenger?: Maybe<UserCreateManyWithoutPreChallengerInput>;
  nextChallenger?: Maybe<UserCreateManyWithoutNextChallengerInput>;
  nextPosts?: Maybe<PostCreateManyWithoutPrePostsInput>;
  prePosts?: Maybe<PostCreateManyWithoutNextPostsInput>;
  tagChallenger?: Maybe<UserCreateManyWithoutTagChallengerInput>;
  video?: Maybe<VideoCreateManyWithoutPostInput>;
  image?: Maybe<ImageCreateManyWithoutPostInput>;
  audio?: Maybe<AudioCreateManyWithoutPostInput>;
}

export interface LikeCreateManyWithoutPostInput {
  create?: Maybe<LikeCreateWithoutPostInput[] | LikeCreateWithoutPostInput>;
  connect?: Maybe<LikeWhereUniqueInput[] | LikeWhereUniqueInput>;
}

export interface LikeCreateWithoutPostInput {
  id?: Maybe<ID_Input>;
  user?: Maybe<UserCreateOneWithoutLikesInput>;
}

export interface UserCreateOneWithoutLikesInput {
  create?: Maybe<UserCreateWithoutLikesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutLikesInput {
  id?: Maybe<ID_Input>;
  avatar?: Maybe<String>;
  username: String;
  nickname: String;
  passwd: String;
  email: String;
  bio?: Maybe<String>;
  following?: Maybe<UserCreateManyWithoutFollowersInput>;
  followers?: Maybe<UserCreateManyWithoutFollowingInput>;
  posts?: Maybe<PostCreateManyWithoutUserInput>;
  comments?: Maybe<CommentCreateManyWithoutUserInput>;
  rooms?: Maybe<RoomCreateManyWithoutParticipantsInput>;
  relChallenger?: Maybe<PostCreateManyWithoutRelChallengerInput>;
  preChallenger?: Maybe<PostCreateManyWithoutPreChallengerInput>;
  nextChallenger?: Maybe<PostCreateManyWithoutNextChallengerInput>;
  tagChallenger?: Maybe<PostCreateManyWithoutTagChallengerInput>;
  loginSecret?: Maybe<String>;
  favCategory?: Maybe<String>;
}

export interface UserCreateManyWithoutFollowingInput {
  create?: Maybe<
    UserCreateWithoutFollowingInput[] | UserCreateWithoutFollowingInput
  >;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserCreateWithoutFollowingInput {
  id?: Maybe<ID_Input>;
  avatar?: Maybe<String>;
  username: String;
  nickname: String;
  passwd: String;
  email: String;
  bio?: Maybe<String>;
  followers?: Maybe<UserCreateManyWithoutFollowingInput>;
  posts?: Maybe<PostCreateManyWithoutUserInput>;
  likes?: Maybe<LikeCreateManyWithoutUserInput>;
  comments?: Maybe<CommentCreateManyWithoutUserInput>;
  rooms?: Maybe<RoomCreateManyWithoutParticipantsInput>;
  relChallenger?: Maybe<PostCreateManyWithoutRelChallengerInput>;
  preChallenger?: Maybe<PostCreateManyWithoutPreChallengerInput>;
  nextChallenger?: Maybe<PostCreateManyWithoutNextChallengerInput>;
  tagChallenger?: Maybe<PostCreateManyWithoutTagChallengerInput>;
  loginSecret?: Maybe<String>;
  favCategory?: Maybe<String>;
}

export interface LikeCreateManyWithoutUserInput {
  create?: Maybe<LikeCreateWithoutUserInput[] | LikeCreateWithoutUserInput>;
  connect?: Maybe<LikeWhereUniqueInput[] | LikeWhereUniqueInput>;
}

export interface LikeCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  post?: Maybe<PostCreateOneWithoutLikesInput>;
}

export interface PostCreateOneWithoutLikesInput {
  create?: Maybe<PostCreateWithoutLikesInput>;
  connect?: Maybe<PostWhereUniqueInput>;
}

export interface PostCreateWithoutLikesInput {
  id?: Maybe<ID_Input>;
  caption?: Maybe<String>;
  location?: Maybe<String>;
  files?: Maybe<FileCreateManyWithoutPostInput>;
  user?: Maybe<UserCreateOneWithoutPostsInput>;
  hashtags?: Maybe<HashtagCreateManyWithoutPostInput>;
  comments?: Maybe<CommentCreateManyWithoutPostInput>;
  category: String;
  relChallenger?: Maybe<UserCreateManyWithoutRelChallengerInput>;
  preChallenger?: Maybe<UserCreateManyWithoutPreChallengerInput>;
  nextChallenger?: Maybe<UserCreateManyWithoutNextChallengerInput>;
  nextPosts?: Maybe<PostCreateManyWithoutPrePostsInput>;
  prePosts?: Maybe<PostCreateManyWithoutNextPostsInput>;
  tagChallenger?: Maybe<UserCreateManyWithoutTagChallengerInput>;
  video?: Maybe<VideoCreateManyWithoutPostInput>;
  image?: Maybe<ImageCreateManyWithoutPostInput>;
  audio?: Maybe<AudioCreateManyWithoutPostInput>;
  text?: Maybe<TextCreateManyWithoutPostInput>;
}

export interface HashtagCreateManyWithoutPostInput {
  create?: Maybe<
    HashtagCreateWithoutPostInput[] | HashtagCreateWithoutPostInput
  >;
  connect?: Maybe<HashtagWhereUniqueInput[] | HashtagWhereUniqueInput>;
}

export interface HashtagCreateWithoutPostInput {
  id?: Maybe<ID_Input>;
  tag_name: String;
}

export interface CommentCreateManyWithoutPostInput {
  create?: Maybe<
    CommentCreateWithoutPostInput[] | CommentCreateWithoutPostInput
  >;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
}

export interface CommentCreateWithoutPostInput {
  id?: Maybe<ID_Input>;
  text: String;
  user?: Maybe<UserCreateOneWithoutCommentsInput>;
}

export interface UserCreateOneWithoutCommentsInput {
  create?: Maybe<UserCreateWithoutCommentsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutCommentsInput {
  id?: Maybe<ID_Input>;
  avatar?: Maybe<String>;
  username: String;
  nickname: String;
  passwd: String;
  email: String;
  bio?: Maybe<String>;
  following?: Maybe<UserCreateManyWithoutFollowersInput>;
  followers?: Maybe<UserCreateManyWithoutFollowingInput>;
  posts?: Maybe<PostCreateManyWithoutUserInput>;
  likes?: Maybe<LikeCreateManyWithoutUserInput>;
  rooms?: Maybe<RoomCreateManyWithoutParticipantsInput>;
  relChallenger?: Maybe<PostCreateManyWithoutRelChallengerInput>;
  preChallenger?: Maybe<PostCreateManyWithoutPreChallengerInput>;
  nextChallenger?: Maybe<PostCreateManyWithoutNextChallengerInput>;
  tagChallenger?: Maybe<PostCreateManyWithoutTagChallengerInput>;
  loginSecret?: Maybe<String>;
  favCategory?: Maybe<String>;
}

export interface RoomCreateManyWithoutParticipantsInput {
  create?: Maybe<
    RoomCreateWithoutParticipantsInput[] | RoomCreateWithoutParticipantsInput
  >;
  connect?: Maybe<RoomWhereUniqueInput[] | RoomWhereUniqueInput>;
}

export interface RoomCreateWithoutParticipantsInput {
  id?: Maybe<ID_Input>;
  messages?: Maybe<MessageCreateManyWithoutRoomInput>;
}

export interface MessageCreateManyWithoutRoomInput {
  create?: Maybe<
    MessageCreateWithoutRoomInput[] | MessageCreateWithoutRoomInput
  >;
  connect?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
}

export interface MessageCreateWithoutRoomInput {
  id?: Maybe<ID_Input>;
  text: String;
  from: UserCreateOneInput;
  to: UserCreateOneInput;
}

export interface UserCreateOneInput {
  create?: Maybe<UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  avatar?: Maybe<String>;
  username: String;
  nickname: String;
  passwd: String;
  email: String;
  bio?: Maybe<String>;
  following?: Maybe<UserCreateManyWithoutFollowersInput>;
  followers?: Maybe<UserCreateManyWithoutFollowingInput>;
  posts?: Maybe<PostCreateManyWithoutUserInput>;
  likes?: Maybe<LikeCreateManyWithoutUserInput>;
  comments?: Maybe<CommentCreateManyWithoutUserInput>;
  rooms?: Maybe<RoomCreateManyWithoutParticipantsInput>;
  relChallenger?: Maybe<PostCreateManyWithoutRelChallengerInput>;
  preChallenger?: Maybe<PostCreateManyWithoutPreChallengerInput>;
  nextChallenger?: Maybe<PostCreateManyWithoutNextChallengerInput>;
  tagChallenger?: Maybe<PostCreateManyWithoutTagChallengerInput>;
  loginSecret?: Maybe<String>;
  favCategory?: Maybe<String>;
}

export interface CommentCreateManyWithoutUserInput {
  create?: Maybe<
    CommentCreateWithoutUserInput[] | CommentCreateWithoutUserInput
  >;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
}

export interface CommentCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  text: String;
  post?: Maybe<PostCreateOneWithoutCommentsInput>;
}

export interface PostCreateOneWithoutCommentsInput {
  create?: Maybe<PostCreateWithoutCommentsInput>;
  connect?: Maybe<PostWhereUniqueInput>;
}

export interface PostCreateWithoutCommentsInput {
  id?: Maybe<ID_Input>;
  caption?: Maybe<String>;
  location?: Maybe<String>;
  files?: Maybe<FileCreateManyWithoutPostInput>;
  user?: Maybe<UserCreateOneWithoutPostsInput>;
  likes?: Maybe<LikeCreateManyWithoutPostInput>;
  hashtags?: Maybe<HashtagCreateManyWithoutPostInput>;
  category: String;
  relChallenger?: Maybe<UserCreateManyWithoutRelChallengerInput>;
  preChallenger?: Maybe<UserCreateManyWithoutPreChallengerInput>;
  nextChallenger?: Maybe<UserCreateManyWithoutNextChallengerInput>;
  nextPosts?: Maybe<PostCreateManyWithoutPrePostsInput>;
  prePosts?: Maybe<PostCreateManyWithoutNextPostsInput>;
  tagChallenger?: Maybe<UserCreateManyWithoutTagChallengerInput>;
  video?: Maybe<VideoCreateManyWithoutPostInput>;
  image?: Maybe<ImageCreateManyWithoutPostInput>;
  audio?: Maybe<AudioCreateManyWithoutPostInput>;
  text?: Maybe<TextCreateManyWithoutPostInput>;
}

export interface UserCreateManyWithoutRelChallengerInput {
  create?: Maybe<
    UserCreateWithoutRelChallengerInput[] | UserCreateWithoutRelChallengerInput
  >;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserCreateWithoutRelChallengerInput {
  id?: Maybe<ID_Input>;
  avatar?: Maybe<String>;
  username: String;
  nickname: String;
  passwd: String;
  email: String;
  bio?: Maybe<String>;
  following?: Maybe<UserCreateManyWithoutFollowersInput>;
  followers?: Maybe<UserCreateManyWithoutFollowingInput>;
  posts?: Maybe<PostCreateManyWithoutUserInput>;
  likes?: Maybe<LikeCreateManyWithoutUserInput>;
  comments?: Maybe<CommentCreateManyWithoutUserInput>;
  rooms?: Maybe<RoomCreateManyWithoutParticipantsInput>;
  preChallenger?: Maybe<PostCreateManyWithoutPreChallengerInput>;
  nextChallenger?: Maybe<PostCreateManyWithoutNextChallengerInput>;
  tagChallenger?: Maybe<PostCreateManyWithoutTagChallengerInput>;
  loginSecret?: Maybe<String>;
  favCategory?: Maybe<String>;
}

export interface PostCreateManyWithoutPreChallengerInput {
  create?: Maybe<
    PostCreateWithoutPreChallengerInput[] | PostCreateWithoutPreChallengerInput
  >;
  connect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
}

export interface PostCreateWithoutPreChallengerInput {
  id?: Maybe<ID_Input>;
  caption?: Maybe<String>;
  location?: Maybe<String>;
  files?: Maybe<FileCreateManyWithoutPostInput>;
  user?: Maybe<UserCreateOneWithoutPostsInput>;
  likes?: Maybe<LikeCreateManyWithoutPostInput>;
  hashtags?: Maybe<HashtagCreateManyWithoutPostInput>;
  comments?: Maybe<CommentCreateManyWithoutPostInput>;
  category: String;
  relChallenger?: Maybe<UserCreateManyWithoutRelChallengerInput>;
  nextChallenger?: Maybe<UserCreateManyWithoutNextChallengerInput>;
  nextPosts?: Maybe<PostCreateManyWithoutPrePostsInput>;
  prePosts?: Maybe<PostCreateManyWithoutNextPostsInput>;
  tagChallenger?: Maybe<UserCreateManyWithoutTagChallengerInput>;
  video?: Maybe<VideoCreateManyWithoutPostInput>;
  image?: Maybe<ImageCreateManyWithoutPostInput>;
  audio?: Maybe<AudioCreateManyWithoutPostInput>;
  text?: Maybe<TextCreateManyWithoutPostInput>;
}

export interface UserCreateManyWithoutNextChallengerInput {
  create?: Maybe<
    | UserCreateWithoutNextChallengerInput[]
    | UserCreateWithoutNextChallengerInput
  >;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserCreateWithoutNextChallengerInput {
  id?: Maybe<ID_Input>;
  avatar?: Maybe<String>;
  username: String;
  nickname: String;
  passwd: String;
  email: String;
  bio?: Maybe<String>;
  following?: Maybe<UserCreateManyWithoutFollowersInput>;
  followers?: Maybe<UserCreateManyWithoutFollowingInput>;
  posts?: Maybe<PostCreateManyWithoutUserInput>;
  likes?: Maybe<LikeCreateManyWithoutUserInput>;
  comments?: Maybe<CommentCreateManyWithoutUserInput>;
  rooms?: Maybe<RoomCreateManyWithoutParticipantsInput>;
  relChallenger?: Maybe<PostCreateManyWithoutRelChallengerInput>;
  preChallenger?: Maybe<PostCreateManyWithoutPreChallengerInput>;
  tagChallenger?: Maybe<PostCreateManyWithoutTagChallengerInput>;
  loginSecret?: Maybe<String>;
  favCategory?: Maybe<String>;
}

export interface PostCreateManyWithoutRelChallengerInput {
  create?: Maybe<
    PostCreateWithoutRelChallengerInput[] | PostCreateWithoutRelChallengerInput
  >;
  connect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
}

export interface PostCreateWithoutRelChallengerInput {
  id?: Maybe<ID_Input>;
  caption?: Maybe<String>;
  location?: Maybe<String>;
  files?: Maybe<FileCreateManyWithoutPostInput>;
  user?: Maybe<UserCreateOneWithoutPostsInput>;
  likes?: Maybe<LikeCreateManyWithoutPostInput>;
  hashtags?: Maybe<HashtagCreateManyWithoutPostInput>;
  comments?: Maybe<CommentCreateManyWithoutPostInput>;
  category: String;
  preChallenger?: Maybe<UserCreateManyWithoutPreChallengerInput>;
  nextChallenger?: Maybe<UserCreateManyWithoutNextChallengerInput>;
  nextPosts?: Maybe<PostCreateManyWithoutPrePostsInput>;
  prePosts?: Maybe<PostCreateManyWithoutNextPostsInput>;
  tagChallenger?: Maybe<UserCreateManyWithoutTagChallengerInput>;
  video?: Maybe<VideoCreateManyWithoutPostInput>;
  image?: Maybe<ImageCreateManyWithoutPostInput>;
  audio?: Maybe<AudioCreateManyWithoutPostInput>;
  text?: Maybe<TextCreateManyWithoutPostInput>;
}

export interface UserCreateManyWithoutPreChallengerInput {
  create?: Maybe<
    UserCreateWithoutPreChallengerInput[] | UserCreateWithoutPreChallengerInput
  >;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserCreateWithoutPreChallengerInput {
  id?: Maybe<ID_Input>;
  avatar?: Maybe<String>;
  username: String;
  nickname: String;
  passwd: String;
  email: String;
  bio?: Maybe<String>;
  following?: Maybe<UserCreateManyWithoutFollowersInput>;
  followers?: Maybe<UserCreateManyWithoutFollowingInput>;
  posts?: Maybe<PostCreateManyWithoutUserInput>;
  likes?: Maybe<LikeCreateManyWithoutUserInput>;
  comments?: Maybe<CommentCreateManyWithoutUserInput>;
  rooms?: Maybe<RoomCreateManyWithoutParticipantsInput>;
  relChallenger?: Maybe<PostCreateManyWithoutRelChallengerInput>;
  nextChallenger?: Maybe<PostCreateManyWithoutNextChallengerInput>;
  tagChallenger?: Maybe<PostCreateManyWithoutTagChallengerInput>;
  loginSecret?: Maybe<String>;
  favCategory?: Maybe<String>;
}

export interface PostCreateManyWithoutNextChallengerInput {
  create?: Maybe<
    | PostCreateWithoutNextChallengerInput[]
    | PostCreateWithoutNextChallengerInput
  >;
  connect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
}

export interface PostCreateWithoutNextChallengerInput {
  id?: Maybe<ID_Input>;
  caption?: Maybe<String>;
  location?: Maybe<String>;
  files?: Maybe<FileCreateManyWithoutPostInput>;
  user?: Maybe<UserCreateOneWithoutPostsInput>;
  likes?: Maybe<LikeCreateManyWithoutPostInput>;
  hashtags?: Maybe<HashtagCreateManyWithoutPostInput>;
  comments?: Maybe<CommentCreateManyWithoutPostInput>;
  category: String;
  relChallenger?: Maybe<UserCreateManyWithoutRelChallengerInput>;
  preChallenger?: Maybe<UserCreateManyWithoutPreChallengerInput>;
  nextPosts?: Maybe<PostCreateManyWithoutPrePostsInput>;
  prePosts?: Maybe<PostCreateManyWithoutNextPostsInput>;
  tagChallenger?: Maybe<UserCreateManyWithoutTagChallengerInput>;
  video?: Maybe<VideoCreateManyWithoutPostInput>;
  image?: Maybe<ImageCreateManyWithoutPostInput>;
  audio?: Maybe<AudioCreateManyWithoutPostInput>;
  text?: Maybe<TextCreateManyWithoutPostInput>;
}

export interface PostCreateManyWithoutPrePostsInput {
  create?: Maybe<
    PostCreateWithoutPrePostsInput[] | PostCreateWithoutPrePostsInput
  >;
  connect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
}

export interface PostCreateWithoutPrePostsInput {
  id?: Maybe<ID_Input>;
  caption?: Maybe<String>;
  location?: Maybe<String>;
  files?: Maybe<FileCreateManyWithoutPostInput>;
  user?: Maybe<UserCreateOneWithoutPostsInput>;
  likes?: Maybe<LikeCreateManyWithoutPostInput>;
  hashtags?: Maybe<HashtagCreateManyWithoutPostInput>;
  comments?: Maybe<CommentCreateManyWithoutPostInput>;
  category: String;
  relChallenger?: Maybe<UserCreateManyWithoutRelChallengerInput>;
  preChallenger?: Maybe<UserCreateManyWithoutPreChallengerInput>;
  nextChallenger?: Maybe<UserCreateManyWithoutNextChallengerInput>;
  nextPosts?: Maybe<PostCreateManyWithoutPrePostsInput>;
  tagChallenger?: Maybe<UserCreateManyWithoutTagChallengerInput>;
  video?: Maybe<VideoCreateManyWithoutPostInput>;
  image?: Maybe<ImageCreateManyWithoutPostInput>;
  audio?: Maybe<AudioCreateManyWithoutPostInput>;
  text?: Maybe<TextCreateManyWithoutPostInput>;
}

export interface UserCreateManyWithoutTagChallengerInput {
  create?: Maybe<
    UserCreateWithoutTagChallengerInput[] | UserCreateWithoutTagChallengerInput
  >;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserCreateWithoutTagChallengerInput {
  id?: Maybe<ID_Input>;
  avatar?: Maybe<String>;
  username: String;
  nickname: String;
  passwd: String;
  email: String;
  bio?: Maybe<String>;
  following?: Maybe<UserCreateManyWithoutFollowersInput>;
  followers?: Maybe<UserCreateManyWithoutFollowingInput>;
  posts?: Maybe<PostCreateManyWithoutUserInput>;
  likes?: Maybe<LikeCreateManyWithoutUserInput>;
  comments?: Maybe<CommentCreateManyWithoutUserInput>;
  rooms?: Maybe<RoomCreateManyWithoutParticipantsInput>;
  relChallenger?: Maybe<PostCreateManyWithoutRelChallengerInput>;
  preChallenger?: Maybe<PostCreateManyWithoutPreChallengerInput>;
  nextChallenger?: Maybe<PostCreateManyWithoutNextChallengerInput>;
  loginSecret?: Maybe<String>;
  favCategory?: Maybe<String>;
}

export interface VideoCreateManyWithoutPostInput {
  create?: Maybe<VideoCreateWithoutPostInput[] | VideoCreateWithoutPostInput>;
  connect?: Maybe<VideoWhereUniqueInput[] | VideoWhereUniqueInput>;
}

export interface VideoCreateWithoutPostInput {
  id?: Maybe<ID_Input>;
  video_url: String;
  files?: Maybe<FileCreateManyWithoutVideoInput>;
}

export interface FileCreateManyWithoutVideoInput {
  create?: Maybe<FileCreateWithoutVideoInput[] | FileCreateWithoutVideoInput>;
  connect?: Maybe<FileWhereUniqueInput[] | FileWhereUniqueInput>;
}

export interface FileCreateWithoutVideoInput {
  id?: Maybe<ID_Input>;
  url: String;
  post?: Maybe<PostCreateOneWithoutFilesInput>;
  text?: Maybe<TextCreateManyWithoutImageFileInput>;
  audio?: Maybe<AudioCreateManyWithoutAudioFileInput>;
  image?: Maybe<ImageCreateManyWithoutFilesInput>;
}

export interface AudioCreateManyWithoutAudioFileInput {
  create?: Maybe<
    AudioCreateWithoutAudioFileInput[] | AudioCreateWithoutAudioFileInput
  >;
  connect?: Maybe<AudioWhereUniqueInput[] | AudioWhereUniqueInput>;
}

export interface AudioCreateWithoutAudioFileInput {
  id?: Maybe<ID_Input>;
  audio_url: String;
  audio_img_url: String;
  post?: Maybe<PostCreateOneWithoutAudioInput>;
}

export interface PostCreateOneWithoutAudioInput {
  create?: Maybe<PostCreateWithoutAudioInput>;
  connect?: Maybe<PostWhereUniqueInput>;
}

export interface PostCreateWithoutAudioInput {
  id?: Maybe<ID_Input>;
  caption?: Maybe<String>;
  location?: Maybe<String>;
  files?: Maybe<FileCreateManyWithoutPostInput>;
  user?: Maybe<UserCreateOneWithoutPostsInput>;
  likes?: Maybe<LikeCreateManyWithoutPostInput>;
  hashtags?: Maybe<HashtagCreateManyWithoutPostInput>;
  comments?: Maybe<CommentCreateManyWithoutPostInput>;
  category: String;
  relChallenger?: Maybe<UserCreateManyWithoutRelChallengerInput>;
  preChallenger?: Maybe<UserCreateManyWithoutPreChallengerInput>;
  nextChallenger?: Maybe<UserCreateManyWithoutNextChallengerInput>;
  nextPosts?: Maybe<PostCreateManyWithoutPrePostsInput>;
  prePosts?: Maybe<PostCreateManyWithoutNextPostsInput>;
  tagChallenger?: Maybe<UserCreateManyWithoutTagChallengerInput>;
  video?: Maybe<VideoCreateManyWithoutPostInput>;
  image?: Maybe<ImageCreateManyWithoutPostInput>;
  text?: Maybe<TextCreateManyWithoutPostInput>;
}

export interface PostCreateManyWithoutNextPostsInput {
  create?: Maybe<
    PostCreateWithoutNextPostsInput[] | PostCreateWithoutNextPostsInput
  >;
  connect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
}

export interface PostCreateWithoutNextPostsInput {
  id?: Maybe<ID_Input>;
  caption?: Maybe<String>;
  location?: Maybe<String>;
  files?: Maybe<FileCreateManyWithoutPostInput>;
  user?: Maybe<UserCreateOneWithoutPostsInput>;
  likes?: Maybe<LikeCreateManyWithoutPostInput>;
  hashtags?: Maybe<HashtagCreateManyWithoutPostInput>;
  comments?: Maybe<CommentCreateManyWithoutPostInput>;
  category: String;
  relChallenger?: Maybe<UserCreateManyWithoutRelChallengerInput>;
  preChallenger?: Maybe<UserCreateManyWithoutPreChallengerInput>;
  nextChallenger?: Maybe<UserCreateManyWithoutNextChallengerInput>;
  prePosts?: Maybe<PostCreateManyWithoutNextPostsInput>;
  tagChallenger?: Maybe<UserCreateManyWithoutTagChallengerInput>;
  video?: Maybe<VideoCreateManyWithoutPostInput>;
  image?: Maybe<ImageCreateManyWithoutPostInput>;
  audio?: Maybe<AudioCreateManyWithoutPostInput>;
  text?: Maybe<TextCreateManyWithoutPostInput>;
}

export interface ImageCreateManyWithoutPostInput {
  create?: Maybe<ImageCreateWithoutPostInput[] | ImageCreateWithoutPostInput>;
  connect?: Maybe<ImageWhereUniqueInput[] | ImageWhereUniqueInput>;
}

export interface ImageCreateWithoutPostInput {
  id?: Maybe<ID_Input>;
  image_url: String;
  files?: Maybe<FileCreateManyWithoutImageInput>;
}

export interface FileCreateManyWithoutImageInput {
  create?: Maybe<FileCreateWithoutImageInput[] | FileCreateWithoutImageInput>;
  connect?: Maybe<FileWhereUniqueInput[] | FileWhereUniqueInput>;
}

export interface FileCreateWithoutImageInput {
  id?: Maybe<ID_Input>;
  url: String;
  post?: Maybe<PostCreateOneWithoutFilesInput>;
  text?: Maybe<TextCreateManyWithoutImageFileInput>;
  video?: Maybe<VideoCreateManyWithoutFilesInput>;
  audio?: Maybe<AudioCreateManyWithoutAudioFileInput>;
}

export interface VideoCreateManyWithoutFilesInput {
  create?: Maybe<VideoCreateWithoutFilesInput[] | VideoCreateWithoutFilesInput>;
  connect?: Maybe<VideoWhereUniqueInput[] | VideoWhereUniqueInput>;
}

export interface VideoCreateWithoutFilesInput {
  id?: Maybe<ID_Input>;
  video_url: String;
  post?: Maybe<PostCreateOneWithoutVideoInput>;
}

export interface PostCreateOneWithoutVideoInput {
  create?: Maybe<PostCreateWithoutVideoInput>;
  connect?: Maybe<PostWhereUniqueInput>;
}

export interface PostCreateWithoutVideoInput {
  id?: Maybe<ID_Input>;
  caption?: Maybe<String>;
  location?: Maybe<String>;
  files?: Maybe<FileCreateManyWithoutPostInput>;
  user?: Maybe<UserCreateOneWithoutPostsInput>;
  likes?: Maybe<LikeCreateManyWithoutPostInput>;
  hashtags?: Maybe<HashtagCreateManyWithoutPostInput>;
  comments?: Maybe<CommentCreateManyWithoutPostInput>;
  category: String;
  relChallenger?: Maybe<UserCreateManyWithoutRelChallengerInput>;
  preChallenger?: Maybe<UserCreateManyWithoutPreChallengerInput>;
  nextChallenger?: Maybe<UserCreateManyWithoutNextChallengerInput>;
  nextPosts?: Maybe<PostCreateManyWithoutPrePostsInput>;
  prePosts?: Maybe<PostCreateManyWithoutNextPostsInput>;
  tagChallenger?: Maybe<UserCreateManyWithoutTagChallengerInput>;
  image?: Maybe<ImageCreateManyWithoutPostInput>;
  audio?: Maybe<AudioCreateManyWithoutPostInput>;
  text?: Maybe<TextCreateManyWithoutPostInput>;
}

export interface AudioCreateManyWithoutPostInput {
  create?: Maybe<AudioCreateWithoutPostInput[] | AudioCreateWithoutPostInput>;
  connect?: Maybe<AudioWhereUniqueInput[] | AudioWhereUniqueInput>;
}

export interface AudioCreateWithoutPostInput {
  id?: Maybe<ID_Input>;
  audio_url: String;
  audio_img_url: String;
  audioFile: FileCreateOneWithoutAudioInput;
}

export interface TextCreateManyWithoutPostInput {
  create?: Maybe<TextCreateWithoutPostInput[] | TextCreateWithoutPostInput>;
  connect?: Maybe<TextWhereUniqueInput[] | TextWhereUniqueInput>;
}

export interface TextCreateWithoutPostInput {
  id?: Maybe<ID_Input>;
  text_img_url: String;
  content: String;
  imageFile: FileCreateOneWithoutTextInput;
  relay: Boolean;
}

export interface FileCreateOneWithoutTextInput {
  create?: Maybe<FileCreateWithoutTextInput>;
  connect?: Maybe<FileWhereUniqueInput>;
}

export interface FileCreateWithoutTextInput {
  id?: Maybe<ID_Input>;
  url: String;
  post?: Maybe<PostCreateOneWithoutFilesInput>;
  video?: Maybe<VideoCreateManyWithoutFilesInput>;
  audio?: Maybe<AudioCreateManyWithoutAudioFileInput>;
  image?: Maybe<ImageCreateManyWithoutFilesInput>;
}

export interface ImageCreateManyWithoutFilesInput {
  create?: Maybe<ImageCreateWithoutFilesInput[] | ImageCreateWithoutFilesInput>;
  connect?: Maybe<ImageWhereUniqueInput[] | ImageWhereUniqueInput>;
}

export interface ImageCreateWithoutFilesInput {
  id?: Maybe<ID_Input>;
  image_url: String;
  post?: Maybe<PostCreateOneWithoutImageInput>;
}

export interface PostCreateOneWithoutImageInput {
  create?: Maybe<PostCreateWithoutImageInput>;
  connect?: Maybe<PostWhereUniqueInput>;
}

export interface PostCreateWithoutImageInput {
  id?: Maybe<ID_Input>;
  caption?: Maybe<String>;
  location?: Maybe<String>;
  files?: Maybe<FileCreateManyWithoutPostInput>;
  user?: Maybe<UserCreateOneWithoutPostsInput>;
  likes?: Maybe<LikeCreateManyWithoutPostInput>;
  hashtags?: Maybe<HashtagCreateManyWithoutPostInput>;
  comments?: Maybe<CommentCreateManyWithoutPostInput>;
  category: String;
  relChallenger?: Maybe<UserCreateManyWithoutRelChallengerInput>;
  preChallenger?: Maybe<UserCreateManyWithoutPreChallengerInput>;
  nextChallenger?: Maybe<UserCreateManyWithoutNextChallengerInput>;
  nextPosts?: Maybe<PostCreateManyWithoutPrePostsInput>;
  prePosts?: Maybe<PostCreateManyWithoutNextPostsInput>;
  tagChallenger?: Maybe<UserCreateManyWithoutTagChallengerInput>;
  video?: Maybe<VideoCreateManyWithoutPostInput>;
  audio?: Maybe<AudioCreateManyWithoutPostInput>;
  text?: Maybe<TextCreateManyWithoutPostInput>;
}

export interface PostCreateManyWithoutTagChallengerInput {
  create?: Maybe<
    PostCreateWithoutTagChallengerInput[] | PostCreateWithoutTagChallengerInput
  >;
  connect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
}

export interface PostCreateWithoutTagChallengerInput {
  id?: Maybe<ID_Input>;
  caption?: Maybe<String>;
  location?: Maybe<String>;
  files?: Maybe<FileCreateManyWithoutPostInput>;
  user?: Maybe<UserCreateOneWithoutPostsInput>;
  likes?: Maybe<LikeCreateManyWithoutPostInput>;
  hashtags?: Maybe<HashtagCreateManyWithoutPostInput>;
  comments?: Maybe<CommentCreateManyWithoutPostInput>;
  category: String;
  relChallenger?: Maybe<UserCreateManyWithoutRelChallengerInput>;
  preChallenger?: Maybe<UserCreateManyWithoutPreChallengerInput>;
  nextChallenger?: Maybe<UserCreateManyWithoutNextChallengerInput>;
  nextPosts?: Maybe<PostCreateManyWithoutPrePostsInput>;
  prePosts?: Maybe<PostCreateManyWithoutNextPostsInput>;
  video?: Maybe<VideoCreateManyWithoutPostInput>;
  image?: Maybe<ImageCreateManyWithoutPostInput>;
  audio?: Maybe<AudioCreateManyWithoutPostInput>;
  text?: Maybe<TextCreateManyWithoutPostInput>;
}

export interface AudioUpdateInput {
  audio_url?: Maybe<String>;
  audio_img_url?: Maybe<String>;
  audioFile?: Maybe<FileUpdateOneRequiredWithoutAudioInput>;
  post?: Maybe<PostUpdateOneWithoutAudioInput>;
}

export interface FileUpdateOneRequiredWithoutAudioInput {
  create?: Maybe<FileCreateWithoutAudioInput>;
  update?: Maybe<FileUpdateWithoutAudioDataInput>;
  upsert?: Maybe<FileUpsertWithoutAudioInput>;
  connect?: Maybe<FileWhereUniqueInput>;
}

export interface FileUpdateWithoutAudioDataInput {
  url?: Maybe<String>;
  post?: Maybe<PostUpdateOneWithoutFilesInput>;
  text?: Maybe<TextUpdateManyWithoutImageFileInput>;
  video?: Maybe<VideoUpdateManyWithoutFilesInput>;
  image?: Maybe<ImageUpdateManyWithoutFilesInput>;
}

export interface PostUpdateOneWithoutFilesInput {
  create?: Maybe<PostCreateWithoutFilesInput>;
  update?: Maybe<PostUpdateWithoutFilesDataInput>;
  upsert?: Maybe<PostUpsertWithoutFilesInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<PostWhereUniqueInput>;
}

export interface PostUpdateWithoutFilesDataInput {
  caption?: Maybe<String>;
  location?: Maybe<String>;
  user?: Maybe<UserUpdateOneWithoutPostsInput>;
  likes?: Maybe<LikeUpdateManyWithoutPostInput>;
  hashtags?: Maybe<HashtagUpdateManyWithoutPostInput>;
  comments?: Maybe<CommentUpdateManyWithoutPostInput>;
  category?: Maybe<String>;
  relChallenger?: Maybe<UserUpdateManyWithoutRelChallengerInput>;
  preChallenger?: Maybe<UserUpdateManyWithoutPreChallengerInput>;
  nextChallenger?: Maybe<UserUpdateManyWithoutNextChallengerInput>;
  nextPosts?: Maybe<PostUpdateManyWithoutPrePostsInput>;
  prePosts?: Maybe<PostUpdateManyWithoutNextPostsInput>;
  tagChallenger?: Maybe<UserUpdateManyWithoutTagChallengerInput>;
  video?: Maybe<VideoUpdateManyWithoutPostInput>;
  image?: Maybe<ImageUpdateManyWithoutPostInput>;
  audio?: Maybe<AudioUpdateManyWithoutPostInput>;
  text?: Maybe<TextUpdateManyWithoutPostInput>;
}

export interface UserUpdateOneWithoutPostsInput {
  create?: Maybe<UserCreateWithoutPostsInput>;
  update?: Maybe<UserUpdateWithoutPostsDataInput>;
  upsert?: Maybe<UserUpsertWithoutPostsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutPostsDataInput {
  avatar?: Maybe<String>;
  username?: Maybe<String>;
  nickname?: Maybe<String>;
  passwd?: Maybe<String>;
  email?: Maybe<String>;
  bio?: Maybe<String>;
  following?: Maybe<UserUpdateManyWithoutFollowersInput>;
  followers?: Maybe<UserUpdateManyWithoutFollowingInput>;
  likes?: Maybe<LikeUpdateManyWithoutUserInput>;
  comments?: Maybe<CommentUpdateManyWithoutUserInput>;
  rooms?: Maybe<RoomUpdateManyWithoutParticipantsInput>;
  relChallenger?: Maybe<PostUpdateManyWithoutRelChallengerInput>;
  preChallenger?: Maybe<PostUpdateManyWithoutPreChallengerInput>;
  nextChallenger?: Maybe<PostUpdateManyWithoutNextChallengerInput>;
  tagChallenger?: Maybe<PostUpdateManyWithoutTagChallengerInput>;
  loginSecret?: Maybe<String>;
  favCategory?: Maybe<String>;
}

export interface UserUpdateManyWithoutFollowersInput {
  create?: Maybe<
    UserCreateWithoutFollowersInput[] | UserCreateWithoutFollowersInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutFollowersInput[]
    | UserUpdateWithWhereUniqueWithoutFollowersInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutFollowersInput[]
    | UserUpsertWithWhereUniqueWithoutFollowersInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateWithWhereUniqueWithoutFollowersInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutFollowersDataInput;
}

export interface UserUpdateWithoutFollowersDataInput {
  avatar?: Maybe<String>;
  username?: Maybe<String>;
  nickname?: Maybe<String>;
  passwd?: Maybe<String>;
  email?: Maybe<String>;
  bio?: Maybe<String>;
  following?: Maybe<UserUpdateManyWithoutFollowersInput>;
  posts?: Maybe<PostUpdateManyWithoutUserInput>;
  likes?: Maybe<LikeUpdateManyWithoutUserInput>;
  comments?: Maybe<CommentUpdateManyWithoutUserInput>;
  rooms?: Maybe<RoomUpdateManyWithoutParticipantsInput>;
  relChallenger?: Maybe<PostUpdateManyWithoutRelChallengerInput>;
  preChallenger?: Maybe<PostUpdateManyWithoutPreChallengerInput>;
  nextChallenger?: Maybe<PostUpdateManyWithoutNextChallengerInput>;
  tagChallenger?: Maybe<PostUpdateManyWithoutTagChallengerInput>;
  loginSecret?: Maybe<String>;
  favCategory?: Maybe<String>;
}

export interface PostUpdateManyWithoutUserInput {
  create?: Maybe<PostCreateWithoutUserInput[] | PostCreateWithoutUserInput>;
  delete?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  connect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  set?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  disconnect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  update?: Maybe<
    | PostUpdateWithWhereUniqueWithoutUserInput[]
    | PostUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | PostUpsertWithWhereUniqueWithoutUserInput[]
    | PostUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  updateMany?: Maybe<
    PostUpdateManyWithWhereNestedInput[] | PostUpdateManyWithWhereNestedInput
  >;
}

export interface PostUpdateWithWhereUniqueWithoutUserInput {
  where: PostWhereUniqueInput;
  data: PostUpdateWithoutUserDataInput;
}

export interface PostUpdateWithoutUserDataInput {
  caption?: Maybe<String>;
  location?: Maybe<String>;
  files?: Maybe<FileUpdateManyWithoutPostInput>;
  likes?: Maybe<LikeUpdateManyWithoutPostInput>;
  hashtags?: Maybe<HashtagUpdateManyWithoutPostInput>;
  comments?: Maybe<CommentUpdateManyWithoutPostInput>;
  category?: Maybe<String>;
  relChallenger?: Maybe<UserUpdateManyWithoutRelChallengerInput>;
  preChallenger?: Maybe<UserUpdateManyWithoutPreChallengerInput>;
  nextChallenger?: Maybe<UserUpdateManyWithoutNextChallengerInput>;
  nextPosts?: Maybe<PostUpdateManyWithoutPrePostsInput>;
  prePosts?: Maybe<PostUpdateManyWithoutNextPostsInput>;
  tagChallenger?: Maybe<UserUpdateManyWithoutTagChallengerInput>;
  video?: Maybe<VideoUpdateManyWithoutPostInput>;
  image?: Maybe<ImageUpdateManyWithoutPostInput>;
  audio?: Maybe<AudioUpdateManyWithoutPostInput>;
  text?: Maybe<TextUpdateManyWithoutPostInput>;
}

export interface FileUpdateManyWithoutPostInput {
  create?: Maybe<FileCreateWithoutPostInput[] | FileCreateWithoutPostInput>;
  delete?: Maybe<FileWhereUniqueInput[] | FileWhereUniqueInput>;
  connect?: Maybe<FileWhereUniqueInput[] | FileWhereUniqueInput>;
  set?: Maybe<FileWhereUniqueInput[] | FileWhereUniqueInput>;
  disconnect?: Maybe<FileWhereUniqueInput[] | FileWhereUniqueInput>;
  update?: Maybe<
    | FileUpdateWithWhereUniqueWithoutPostInput[]
    | FileUpdateWithWhereUniqueWithoutPostInput
  >;
  upsert?: Maybe<
    | FileUpsertWithWhereUniqueWithoutPostInput[]
    | FileUpsertWithWhereUniqueWithoutPostInput
  >;
  deleteMany?: Maybe<FileScalarWhereInput[] | FileScalarWhereInput>;
  updateMany?: Maybe<
    FileUpdateManyWithWhereNestedInput[] | FileUpdateManyWithWhereNestedInput
  >;
}

export interface FileUpdateWithWhereUniqueWithoutPostInput {
  where: FileWhereUniqueInput;
  data: FileUpdateWithoutPostDataInput;
}

export interface FileUpdateWithoutPostDataInput {
  url?: Maybe<String>;
  text?: Maybe<TextUpdateManyWithoutImageFileInput>;
  video?: Maybe<VideoUpdateManyWithoutFilesInput>;
  audio?: Maybe<AudioUpdateManyWithoutAudioFileInput>;
  image?: Maybe<ImageUpdateManyWithoutFilesInput>;
}

export interface TextUpdateManyWithoutImageFileInput {
  create?: Maybe<
    TextCreateWithoutImageFileInput[] | TextCreateWithoutImageFileInput
  >;
  delete?: Maybe<TextWhereUniqueInput[] | TextWhereUniqueInput>;
  connect?: Maybe<TextWhereUniqueInput[] | TextWhereUniqueInput>;
  set?: Maybe<TextWhereUniqueInput[] | TextWhereUniqueInput>;
  disconnect?: Maybe<TextWhereUniqueInput[] | TextWhereUniqueInput>;
  update?: Maybe<
    | TextUpdateWithWhereUniqueWithoutImageFileInput[]
    | TextUpdateWithWhereUniqueWithoutImageFileInput
  >;
  upsert?: Maybe<
    | TextUpsertWithWhereUniqueWithoutImageFileInput[]
    | TextUpsertWithWhereUniqueWithoutImageFileInput
  >;
  deleteMany?: Maybe<TextScalarWhereInput[] | TextScalarWhereInput>;
  updateMany?: Maybe<
    TextUpdateManyWithWhereNestedInput[] | TextUpdateManyWithWhereNestedInput
  >;
}

export interface TextUpdateWithWhereUniqueWithoutImageFileInput {
  where: TextWhereUniqueInput;
  data: TextUpdateWithoutImageFileDataInput;
}

export interface TextUpdateWithoutImageFileDataInput {
  text_img_url?: Maybe<String>;
  content?: Maybe<String>;
  post?: Maybe<PostUpdateOneWithoutTextInput>;
  relay?: Maybe<Boolean>;
}

export interface PostUpdateOneWithoutTextInput {
  create?: Maybe<PostCreateWithoutTextInput>;
  update?: Maybe<PostUpdateWithoutTextDataInput>;
  upsert?: Maybe<PostUpsertWithoutTextInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<PostWhereUniqueInput>;
}

export interface PostUpdateWithoutTextDataInput {
  caption?: Maybe<String>;
  location?: Maybe<String>;
  files?: Maybe<FileUpdateManyWithoutPostInput>;
  user?: Maybe<UserUpdateOneWithoutPostsInput>;
  likes?: Maybe<LikeUpdateManyWithoutPostInput>;
  hashtags?: Maybe<HashtagUpdateManyWithoutPostInput>;
  comments?: Maybe<CommentUpdateManyWithoutPostInput>;
  category?: Maybe<String>;
  relChallenger?: Maybe<UserUpdateManyWithoutRelChallengerInput>;
  preChallenger?: Maybe<UserUpdateManyWithoutPreChallengerInput>;
  nextChallenger?: Maybe<UserUpdateManyWithoutNextChallengerInput>;
  nextPosts?: Maybe<PostUpdateManyWithoutPrePostsInput>;
  prePosts?: Maybe<PostUpdateManyWithoutNextPostsInput>;
  tagChallenger?: Maybe<UserUpdateManyWithoutTagChallengerInput>;
  video?: Maybe<VideoUpdateManyWithoutPostInput>;
  image?: Maybe<ImageUpdateManyWithoutPostInput>;
  audio?: Maybe<AudioUpdateManyWithoutPostInput>;
}

export interface LikeUpdateManyWithoutPostInput {
  create?: Maybe<LikeCreateWithoutPostInput[] | LikeCreateWithoutPostInput>;
  delete?: Maybe<LikeWhereUniqueInput[] | LikeWhereUniqueInput>;
  connect?: Maybe<LikeWhereUniqueInput[] | LikeWhereUniqueInput>;
  set?: Maybe<LikeWhereUniqueInput[] | LikeWhereUniqueInput>;
  disconnect?: Maybe<LikeWhereUniqueInput[] | LikeWhereUniqueInput>;
  update?: Maybe<
    | LikeUpdateWithWhereUniqueWithoutPostInput[]
    | LikeUpdateWithWhereUniqueWithoutPostInput
  >;
  upsert?: Maybe<
    | LikeUpsertWithWhereUniqueWithoutPostInput[]
    | LikeUpsertWithWhereUniqueWithoutPostInput
  >;
  deleteMany?: Maybe<LikeScalarWhereInput[] | LikeScalarWhereInput>;
}

export interface LikeUpdateWithWhereUniqueWithoutPostInput {
  where: LikeWhereUniqueInput;
  data: LikeUpdateWithoutPostDataInput;
}

export interface LikeUpdateWithoutPostDataInput {
  user?: Maybe<UserUpdateOneWithoutLikesInput>;
}

export interface UserUpdateOneWithoutLikesInput {
  create?: Maybe<UserCreateWithoutLikesInput>;
  update?: Maybe<UserUpdateWithoutLikesDataInput>;
  upsert?: Maybe<UserUpsertWithoutLikesInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutLikesDataInput {
  avatar?: Maybe<String>;
  username?: Maybe<String>;
  nickname?: Maybe<String>;
  passwd?: Maybe<String>;
  email?: Maybe<String>;
  bio?: Maybe<String>;
  following?: Maybe<UserUpdateManyWithoutFollowersInput>;
  followers?: Maybe<UserUpdateManyWithoutFollowingInput>;
  posts?: Maybe<PostUpdateManyWithoutUserInput>;
  comments?: Maybe<CommentUpdateManyWithoutUserInput>;
  rooms?: Maybe<RoomUpdateManyWithoutParticipantsInput>;
  relChallenger?: Maybe<PostUpdateManyWithoutRelChallengerInput>;
  preChallenger?: Maybe<PostUpdateManyWithoutPreChallengerInput>;
  nextChallenger?: Maybe<PostUpdateManyWithoutNextChallengerInput>;
  tagChallenger?: Maybe<PostUpdateManyWithoutTagChallengerInput>;
  loginSecret?: Maybe<String>;
  favCategory?: Maybe<String>;
}

export interface UserUpdateManyWithoutFollowingInput {
  create?: Maybe<
    UserCreateWithoutFollowingInput[] | UserCreateWithoutFollowingInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutFollowingInput[]
    | UserUpdateWithWhereUniqueWithoutFollowingInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutFollowingInput[]
    | UserUpsertWithWhereUniqueWithoutFollowingInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateWithWhereUniqueWithoutFollowingInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutFollowingDataInput;
}

export interface UserUpdateWithoutFollowingDataInput {
  avatar?: Maybe<String>;
  username?: Maybe<String>;
  nickname?: Maybe<String>;
  passwd?: Maybe<String>;
  email?: Maybe<String>;
  bio?: Maybe<String>;
  followers?: Maybe<UserUpdateManyWithoutFollowingInput>;
  posts?: Maybe<PostUpdateManyWithoutUserInput>;
  likes?: Maybe<LikeUpdateManyWithoutUserInput>;
  comments?: Maybe<CommentUpdateManyWithoutUserInput>;
  rooms?: Maybe<RoomUpdateManyWithoutParticipantsInput>;
  relChallenger?: Maybe<PostUpdateManyWithoutRelChallengerInput>;
  preChallenger?: Maybe<PostUpdateManyWithoutPreChallengerInput>;
  nextChallenger?: Maybe<PostUpdateManyWithoutNextChallengerInput>;
  tagChallenger?: Maybe<PostUpdateManyWithoutTagChallengerInput>;
  loginSecret?: Maybe<String>;
  favCategory?: Maybe<String>;
}

export interface LikeUpdateManyWithoutUserInput {
  create?: Maybe<LikeCreateWithoutUserInput[] | LikeCreateWithoutUserInput>;
  delete?: Maybe<LikeWhereUniqueInput[] | LikeWhereUniqueInput>;
  connect?: Maybe<LikeWhereUniqueInput[] | LikeWhereUniqueInput>;
  set?: Maybe<LikeWhereUniqueInput[] | LikeWhereUniqueInput>;
  disconnect?: Maybe<LikeWhereUniqueInput[] | LikeWhereUniqueInput>;
  update?: Maybe<
    | LikeUpdateWithWhereUniqueWithoutUserInput[]
    | LikeUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | LikeUpsertWithWhereUniqueWithoutUserInput[]
    | LikeUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<LikeScalarWhereInput[] | LikeScalarWhereInput>;
}

export interface LikeUpdateWithWhereUniqueWithoutUserInput {
  where: LikeWhereUniqueInput;
  data: LikeUpdateWithoutUserDataInput;
}

export interface LikeUpdateWithoutUserDataInput {
  post?: Maybe<PostUpdateOneWithoutLikesInput>;
}

export interface PostUpdateOneWithoutLikesInput {
  create?: Maybe<PostCreateWithoutLikesInput>;
  update?: Maybe<PostUpdateWithoutLikesDataInput>;
  upsert?: Maybe<PostUpsertWithoutLikesInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<PostWhereUniqueInput>;
}

export interface PostUpdateWithoutLikesDataInput {
  caption?: Maybe<String>;
  location?: Maybe<String>;
  files?: Maybe<FileUpdateManyWithoutPostInput>;
  user?: Maybe<UserUpdateOneWithoutPostsInput>;
  hashtags?: Maybe<HashtagUpdateManyWithoutPostInput>;
  comments?: Maybe<CommentUpdateManyWithoutPostInput>;
  category?: Maybe<String>;
  relChallenger?: Maybe<UserUpdateManyWithoutRelChallengerInput>;
  preChallenger?: Maybe<UserUpdateManyWithoutPreChallengerInput>;
  nextChallenger?: Maybe<UserUpdateManyWithoutNextChallengerInput>;
  nextPosts?: Maybe<PostUpdateManyWithoutPrePostsInput>;
  prePosts?: Maybe<PostUpdateManyWithoutNextPostsInput>;
  tagChallenger?: Maybe<UserUpdateManyWithoutTagChallengerInput>;
  video?: Maybe<VideoUpdateManyWithoutPostInput>;
  image?: Maybe<ImageUpdateManyWithoutPostInput>;
  audio?: Maybe<AudioUpdateManyWithoutPostInput>;
  text?: Maybe<TextUpdateManyWithoutPostInput>;
}

export interface HashtagUpdateManyWithoutPostInput {
  create?: Maybe<
    HashtagCreateWithoutPostInput[] | HashtagCreateWithoutPostInput
  >;
  delete?: Maybe<HashtagWhereUniqueInput[] | HashtagWhereUniqueInput>;
  connect?: Maybe<HashtagWhereUniqueInput[] | HashtagWhereUniqueInput>;
  set?: Maybe<HashtagWhereUniqueInput[] | HashtagWhereUniqueInput>;
  disconnect?: Maybe<HashtagWhereUniqueInput[] | HashtagWhereUniqueInput>;
  update?: Maybe<
    | HashtagUpdateWithWhereUniqueWithoutPostInput[]
    | HashtagUpdateWithWhereUniqueWithoutPostInput
  >;
  upsert?: Maybe<
    | HashtagUpsertWithWhereUniqueWithoutPostInput[]
    | HashtagUpsertWithWhereUniqueWithoutPostInput
  >;
  deleteMany?: Maybe<HashtagScalarWhereInput[] | HashtagScalarWhereInput>;
  updateMany?: Maybe<
    | HashtagUpdateManyWithWhereNestedInput[]
    | HashtagUpdateManyWithWhereNestedInput
  >;
}

export interface HashtagUpdateWithWhereUniqueWithoutPostInput {
  where: HashtagWhereUniqueInput;
  data: HashtagUpdateWithoutPostDataInput;
}

export interface HashtagUpdateWithoutPostDataInput {
  tag_name?: Maybe<String>;
}

export interface HashtagUpsertWithWhereUniqueWithoutPostInput {
  where: HashtagWhereUniqueInput;
  update: HashtagUpdateWithoutPostDataInput;
  create: HashtagCreateWithoutPostInput;
}

export interface HashtagScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  tag_name?: Maybe<String>;
  tag_name_not?: Maybe<String>;
  tag_name_in?: Maybe<String[] | String>;
  tag_name_not_in?: Maybe<String[] | String>;
  tag_name_lt?: Maybe<String>;
  tag_name_lte?: Maybe<String>;
  tag_name_gt?: Maybe<String>;
  tag_name_gte?: Maybe<String>;
  tag_name_contains?: Maybe<String>;
  tag_name_not_contains?: Maybe<String>;
  tag_name_starts_with?: Maybe<String>;
  tag_name_not_starts_with?: Maybe<String>;
  tag_name_ends_with?: Maybe<String>;
  tag_name_not_ends_with?: Maybe<String>;
  AND?: Maybe<HashtagScalarWhereInput[] | HashtagScalarWhereInput>;
  OR?: Maybe<HashtagScalarWhereInput[] | HashtagScalarWhereInput>;
  NOT?: Maybe<HashtagScalarWhereInput[] | HashtagScalarWhereInput>;
}

export interface HashtagUpdateManyWithWhereNestedInput {
  where: HashtagScalarWhereInput;
  data: HashtagUpdateManyDataInput;
}

export interface HashtagUpdateManyDataInput {
  tag_name?: Maybe<String>;
}

export interface CommentUpdateManyWithoutPostInput {
  create?: Maybe<
    CommentCreateWithoutPostInput[] | CommentCreateWithoutPostInput
  >;
  delete?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  set?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  disconnect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  update?: Maybe<
    | CommentUpdateWithWhereUniqueWithoutPostInput[]
    | CommentUpdateWithWhereUniqueWithoutPostInput
  >;
  upsert?: Maybe<
    | CommentUpsertWithWhereUniqueWithoutPostInput[]
    | CommentUpsertWithWhereUniqueWithoutPostInput
  >;
  deleteMany?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  updateMany?: Maybe<
    | CommentUpdateManyWithWhereNestedInput[]
    | CommentUpdateManyWithWhereNestedInput
  >;
}

export interface CommentUpdateWithWhereUniqueWithoutPostInput {
  where: CommentWhereUniqueInput;
  data: CommentUpdateWithoutPostDataInput;
}

export interface CommentUpdateWithoutPostDataInput {
  text?: Maybe<String>;
  user?: Maybe<UserUpdateOneWithoutCommentsInput>;
}

export interface UserUpdateOneWithoutCommentsInput {
  create?: Maybe<UserCreateWithoutCommentsInput>;
  update?: Maybe<UserUpdateWithoutCommentsDataInput>;
  upsert?: Maybe<UserUpsertWithoutCommentsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutCommentsDataInput {
  avatar?: Maybe<String>;
  username?: Maybe<String>;
  nickname?: Maybe<String>;
  passwd?: Maybe<String>;
  email?: Maybe<String>;
  bio?: Maybe<String>;
  following?: Maybe<UserUpdateManyWithoutFollowersInput>;
  followers?: Maybe<UserUpdateManyWithoutFollowingInput>;
  posts?: Maybe<PostUpdateManyWithoutUserInput>;
  likes?: Maybe<LikeUpdateManyWithoutUserInput>;
  rooms?: Maybe<RoomUpdateManyWithoutParticipantsInput>;
  relChallenger?: Maybe<PostUpdateManyWithoutRelChallengerInput>;
  preChallenger?: Maybe<PostUpdateManyWithoutPreChallengerInput>;
  nextChallenger?: Maybe<PostUpdateManyWithoutNextChallengerInput>;
  tagChallenger?: Maybe<PostUpdateManyWithoutTagChallengerInput>;
  loginSecret?: Maybe<String>;
  favCategory?: Maybe<String>;
}

export interface RoomUpdateManyWithoutParticipantsInput {
  create?: Maybe<
    RoomCreateWithoutParticipantsInput[] | RoomCreateWithoutParticipantsInput
  >;
  delete?: Maybe<RoomWhereUniqueInput[] | RoomWhereUniqueInput>;
  connect?: Maybe<RoomWhereUniqueInput[] | RoomWhereUniqueInput>;
  set?: Maybe<RoomWhereUniqueInput[] | RoomWhereUniqueInput>;
  disconnect?: Maybe<RoomWhereUniqueInput[] | RoomWhereUniqueInput>;
  update?: Maybe<
    | RoomUpdateWithWhereUniqueWithoutParticipantsInput[]
    | RoomUpdateWithWhereUniqueWithoutParticipantsInput
  >;
  upsert?: Maybe<
    | RoomUpsertWithWhereUniqueWithoutParticipantsInput[]
    | RoomUpsertWithWhereUniqueWithoutParticipantsInput
  >;
  deleteMany?: Maybe<RoomScalarWhereInput[] | RoomScalarWhereInput>;
}

export interface RoomUpdateWithWhereUniqueWithoutParticipantsInput {
  where: RoomWhereUniqueInput;
  data: RoomUpdateWithoutParticipantsDataInput;
}

export interface RoomUpdateWithoutParticipantsDataInput {
  messages?: Maybe<MessageUpdateManyWithoutRoomInput>;
}

export interface MessageUpdateManyWithoutRoomInput {
  create?: Maybe<
    MessageCreateWithoutRoomInput[] | MessageCreateWithoutRoomInput
  >;
  delete?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
  connect?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
  set?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
  disconnect?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
  update?: Maybe<
    | MessageUpdateWithWhereUniqueWithoutRoomInput[]
    | MessageUpdateWithWhereUniqueWithoutRoomInput
  >;
  upsert?: Maybe<
    | MessageUpsertWithWhereUniqueWithoutRoomInput[]
    | MessageUpsertWithWhereUniqueWithoutRoomInput
  >;
  deleteMany?: Maybe<MessageScalarWhereInput[] | MessageScalarWhereInput>;
  updateMany?: Maybe<
    | MessageUpdateManyWithWhereNestedInput[]
    | MessageUpdateManyWithWhereNestedInput
  >;
}

export interface MessageUpdateWithWhereUniqueWithoutRoomInput {
  where: MessageWhereUniqueInput;
  data: MessageUpdateWithoutRoomDataInput;
}

export interface MessageUpdateWithoutRoomDataInput {
  text?: Maybe<String>;
  from?: Maybe<UserUpdateOneRequiredInput>;
  to?: Maybe<UserUpdateOneRequiredInput>;
}

export interface UserUpdateOneRequiredInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateDataInput {
  avatar?: Maybe<String>;
  username?: Maybe<String>;
  nickname?: Maybe<String>;
  passwd?: Maybe<String>;
  email?: Maybe<String>;
  bio?: Maybe<String>;
  following?: Maybe<UserUpdateManyWithoutFollowersInput>;
  followers?: Maybe<UserUpdateManyWithoutFollowingInput>;
  posts?: Maybe<PostUpdateManyWithoutUserInput>;
  likes?: Maybe<LikeUpdateManyWithoutUserInput>;
  comments?: Maybe<CommentUpdateManyWithoutUserInput>;
  rooms?: Maybe<RoomUpdateManyWithoutParticipantsInput>;
  relChallenger?: Maybe<PostUpdateManyWithoutRelChallengerInput>;
  preChallenger?: Maybe<PostUpdateManyWithoutPreChallengerInput>;
  nextChallenger?: Maybe<PostUpdateManyWithoutNextChallengerInput>;
  tagChallenger?: Maybe<PostUpdateManyWithoutTagChallengerInput>;
  loginSecret?: Maybe<String>;
  favCategory?: Maybe<String>;
}

export interface CommentUpdateManyWithoutUserInput {
  create?: Maybe<
    CommentCreateWithoutUserInput[] | CommentCreateWithoutUserInput
  >;
  delete?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  set?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  disconnect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  update?: Maybe<
    | CommentUpdateWithWhereUniqueWithoutUserInput[]
    | CommentUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | CommentUpsertWithWhereUniqueWithoutUserInput[]
    | CommentUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  updateMany?: Maybe<
    | CommentUpdateManyWithWhereNestedInput[]
    | CommentUpdateManyWithWhereNestedInput
  >;
}

export interface CommentUpdateWithWhereUniqueWithoutUserInput {
  where: CommentWhereUniqueInput;
  data: CommentUpdateWithoutUserDataInput;
}

export interface CommentUpdateWithoutUserDataInput {
  text?: Maybe<String>;
  post?: Maybe<PostUpdateOneWithoutCommentsInput>;
}

export interface PostUpdateOneWithoutCommentsInput {
  create?: Maybe<PostCreateWithoutCommentsInput>;
  update?: Maybe<PostUpdateWithoutCommentsDataInput>;
  upsert?: Maybe<PostUpsertWithoutCommentsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<PostWhereUniqueInput>;
}

export interface PostUpdateWithoutCommentsDataInput {
  caption?: Maybe<String>;
  location?: Maybe<String>;
  files?: Maybe<FileUpdateManyWithoutPostInput>;
  user?: Maybe<UserUpdateOneWithoutPostsInput>;
  likes?: Maybe<LikeUpdateManyWithoutPostInput>;
  hashtags?: Maybe<HashtagUpdateManyWithoutPostInput>;
  category?: Maybe<String>;
  relChallenger?: Maybe<UserUpdateManyWithoutRelChallengerInput>;
  preChallenger?: Maybe<UserUpdateManyWithoutPreChallengerInput>;
  nextChallenger?: Maybe<UserUpdateManyWithoutNextChallengerInput>;
  nextPosts?: Maybe<PostUpdateManyWithoutPrePostsInput>;
  prePosts?: Maybe<PostUpdateManyWithoutNextPostsInput>;
  tagChallenger?: Maybe<UserUpdateManyWithoutTagChallengerInput>;
  video?: Maybe<VideoUpdateManyWithoutPostInput>;
  image?: Maybe<ImageUpdateManyWithoutPostInput>;
  audio?: Maybe<AudioUpdateManyWithoutPostInput>;
  text?: Maybe<TextUpdateManyWithoutPostInput>;
}

export interface UserUpdateManyWithoutRelChallengerInput {
  create?: Maybe<
    UserCreateWithoutRelChallengerInput[] | UserCreateWithoutRelChallengerInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutRelChallengerInput[]
    | UserUpdateWithWhereUniqueWithoutRelChallengerInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutRelChallengerInput[]
    | UserUpsertWithWhereUniqueWithoutRelChallengerInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateWithWhereUniqueWithoutRelChallengerInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutRelChallengerDataInput;
}

export interface UserUpdateWithoutRelChallengerDataInput {
  avatar?: Maybe<String>;
  username?: Maybe<String>;
  nickname?: Maybe<String>;
  passwd?: Maybe<String>;
  email?: Maybe<String>;
  bio?: Maybe<String>;
  following?: Maybe<UserUpdateManyWithoutFollowersInput>;
  followers?: Maybe<UserUpdateManyWithoutFollowingInput>;
  posts?: Maybe<PostUpdateManyWithoutUserInput>;
  likes?: Maybe<LikeUpdateManyWithoutUserInput>;
  comments?: Maybe<CommentUpdateManyWithoutUserInput>;
  rooms?: Maybe<RoomUpdateManyWithoutParticipantsInput>;
  preChallenger?: Maybe<PostUpdateManyWithoutPreChallengerInput>;
  nextChallenger?: Maybe<PostUpdateManyWithoutNextChallengerInput>;
  tagChallenger?: Maybe<PostUpdateManyWithoutTagChallengerInput>;
  loginSecret?: Maybe<String>;
  favCategory?: Maybe<String>;
}

export interface PostUpdateManyWithoutPreChallengerInput {
  create?: Maybe<
    PostCreateWithoutPreChallengerInput[] | PostCreateWithoutPreChallengerInput
  >;
  delete?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  connect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  set?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  disconnect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  update?: Maybe<
    | PostUpdateWithWhereUniqueWithoutPreChallengerInput[]
    | PostUpdateWithWhereUniqueWithoutPreChallengerInput
  >;
  upsert?: Maybe<
    | PostUpsertWithWhereUniqueWithoutPreChallengerInput[]
    | PostUpsertWithWhereUniqueWithoutPreChallengerInput
  >;
  deleteMany?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  updateMany?: Maybe<
    PostUpdateManyWithWhereNestedInput[] | PostUpdateManyWithWhereNestedInput
  >;
}

export interface PostUpdateWithWhereUniqueWithoutPreChallengerInput {
  where: PostWhereUniqueInput;
  data: PostUpdateWithoutPreChallengerDataInput;
}

export interface PostUpdateWithoutPreChallengerDataInput {
  caption?: Maybe<String>;
  location?: Maybe<String>;
  files?: Maybe<FileUpdateManyWithoutPostInput>;
  user?: Maybe<UserUpdateOneWithoutPostsInput>;
  likes?: Maybe<LikeUpdateManyWithoutPostInput>;
  hashtags?: Maybe<HashtagUpdateManyWithoutPostInput>;
  comments?: Maybe<CommentUpdateManyWithoutPostInput>;
  category?: Maybe<String>;
  relChallenger?: Maybe<UserUpdateManyWithoutRelChallengerInput>;
  nextChallenger?: Maybe<UserUpdateManyWithoutNextChallengerInput>;
  nextPosts?: Maybe<PostUpdateManyWithoutPrePostsInput>;
  prePosts?: Maybe<PostUpdateManyWithoutNextPostsInput>;
  tagChallenger?: Maybe<UserUpdateManyWithoutTagChallengerInput>;
  video?: Maybe<VideoUpdateManyWithoutPostInput>;
  image?: Maybe<ImageUpdateManyWithoutPostInput>;
  audio?: Maybe<AudioUpdateManyWithoutPostInput>;
  text?: Maybe<TextUpdateManyWithoutPostInput>;
}

export interface UserUpdateManyWithoutNextChallengerInput {
  create?: Maybe<
    | UserCreateWithoutNextChallengerInput[]
    | UserCreateWithoutNextChallengerInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutNextChallengerInput[]
    | UserUpdateWithWhereUniqueWithoutNextChallengerInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutNextChallengerInput[]
    | UserUpsertWithWhereUniqueWithoutNextChallengerInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateWithWhereUniqueWithoutNextChallengerInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutNextChallengerDataInput;
}

export interface UserUpdateWithoutNextChallengerDataInput {
  avatar?: Maybe<String>;
  username?: Maybe<String>;
  nickname?: Maybe<String>;
  passwd?: Maybe<String>;
  email?: Maybe<String>;
  bio?: Maybe<String>;
  following?: Maybe<UserUpdateManyWithoutFollowersInput>;
  followers?: Maybe<UserUpdateManyWithoutFollowingInput>;
  posts?: Maybe<PostUpdateManyWithoutUserInput>;
  likes?: Maybe<LikeUpdateManyWithoutUserInput>;
  comments?: Maybe<CommentUpdateManyWithoutUserInput>;
  rooms?: Maybe<RoomUpdateManyWithoutParticipantsInput>;
  relChallenger?: Maybe<PostUpdateManyWithoutRelChallengerInput>;
  preChallenger?: Maybe<PostUpdateManyWithoutPreChallengerInput>;
  tagChallenger?: Maybe<PostUpdateManyWithoutTagChallengerInput>;
  loginSecret?: Maybe<String>;
  favCategory?: Maybe<String>;
}

export interface PostUpdateManyWithoutRelChallengerInput {
  create?: Maybe<
    PostCreateWithoutRelChallengerInput[] | PostCreateWithoutRelChallengerInput
  >;
  delete?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  connect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  set?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  disconnect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  update?: Maybe<
    | PostUpdateWithWhereUniqueWithoutRelChallengerInput[]
    | PostUpdateWithWhereUniqueWithoutRelChallengerInput
  >;
  upsert?: Maybe<
    | PostUpsertWithWhereUniqueWithoutRelChallengerInput[]
    | PostUpsertWithWhereUniqueWithoutRelChallengerInput
  >;
  deleteMany?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  updateMany?: Maybe<
    PostUpdateManyWithWhereNestedInput[] | PostUpdateManyWithWhereNestedInput
  >;
}

export interface PostUpdateWithWhereUniqueWithoutRelChallengerInput {
  where: PostWhereUniqueInput;
  data: PostUpdateWithoutRelChallengerDataInput;
}

export interface PostUpdateWithoutRelChallengerDataInput {
  caption?: Maybe<String>;
  location?: Maybe<String>;
  files?: Maybe<FileUpdateManyWithoutPostInput>;
  user?: Maybe<UserUpdateOneWithoutPostsInput>;
  likes?: Maybe<LikeUpdateManyWithoutPostInput>;
  hashtags?: Maybe<HashtagUpdateManyWithoutPostInput>;
  comments?: Maybe<CommentUpdateManyWithoutPostInput>;
  category?: Maybe<String>;
  preChallenger?: Maybe<UserUpdateManyWithoutPreChallengerInput>;
  nextChallenger?: Maybe<UserUpdateManyWithoutNextChallengerInput>;
  nextPosts?: Maybe<PostUpdateManyWithoutPrePostsInput>;
  prePosts?: Maybe<PostUpdateManyWithoutNextPostsInput>;
  tagChallenger?: Maybe<UserUpdateManyWithoutTagChallengerInput>;
  video?: Maybe<VideoUpdateManyWithoutPostInput>;
  image?: Maybe<ImageUpdateManyWithoutPostInput>;
  audio?: Maybe<AudioUpdateManyWithoutPostInput>;
  text?: Maybe<TextUpdateManyWithoutPostInput>;
}

export interface UserUpdateManyWithoutPreChallengerInput {
  create?: Maybe<
    UserCreateWithoutPreChallengerInput[] | UserCreateWithoutPreChallengerInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutPreChallengerInput[]
    | UserUpdateWithWhereUniqueWithoutPreChallengerInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutPreChallengerInput[]
    | UserUpsertWithWhereUniqueWithoutPreChallengerInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateWithWhereUniqueWithoutPreChallengerInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutPreChallengerDataInput;
}

export interface UserUpdateWithoutPreChallengerDataInput {
  avatar?: Maybe<String>;
  username?: Maybe<String>;
  nickname?: Maybe<String>;
  passwd?: Maybe<String>;
  email?: Maybe<String>;
  bio?: Maybe<String>;
  following?: Maybe<UserUpdateManyWithoutFollowersInput>;
  followers?: Maybe<UserUpdateManyWithoutFollowingInput>;
  posts?: Maybe<PostUpdateManyWithoutUserInput>;
  likes?: Maybe<LikeUpdateManyWithoutUserInput>;
  comments?: Maybe<CommentUpdateManyWithoutUserInput>;
  rooms?: Maybe<RoomUpdateManyWithoutParticipantsInput>;
  relChallenger?: Maybe<PostUpdateManyWithoutRelChallengerInput>;
  nextChallenger?: Maybe<PostUpdateManyWithoutNextChallengerInput>;
  tagChallenger?: Maybe<PostUpdateManyWithoutTagChallengerInput>;
  loginSecret?: Maybe<String>;
  favCategory?: Maybe<String>;
}

export interface PostUpdateManyWithoutNextChallengerInput {
  create?: Maybe<
    | PostCreateWithoutNextChallengerInput[]
    | PostCreateWithoutNextChallengerInput
  >;
  delete?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  connect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  set?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  disconnect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  update?: Maybe<
    | PostUpdateWithWhereUniqueWithoutNextChallengerInput[]
    | PostUpdateWithWhereUniqueWithoutNextChallengerInput
  >;
  upsert?: Maybe<
    | PostUpsertWithWhereUniqueWithoutNextChallengerInput[]
    | PostUpsertWithWhereUniqueWithoutNextChallengerInput
  >;
  deleteMany?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  updateMany?: Maybe<
    PostUpdateManyWithWhereNestedInput[] | PostUpdateManyWithWhereNestedInput
  >;
}

export interface PostUpdateWithWhereUniqueWithoutNextChallengerInput {
  where: PostWhereUniqueInput;
  data: PostUpdateWithoutNextChallengerDataInput;
}

export interface PostUpdateWithoutNextChallengerDataInput {
  caption?: Maybe<String>;
  location?: Maybe<String>;
  files?: Maybe<FileUpdateManyWithoutPostInput>;
  user?: Maybe<UserUpdateOneWithoutPostsInput>;
  likes?: Maybe<LikeUpdateManyWithoutPostInput>;
  hashtags?: Maybe<HashtagUpdateManyWithoutPostInput>;
  comments?: Maybe<CommentUpdateManyWithoutPostInput>;
  category?: Maybe<String>;
  relChallenger?: Maybe<UserUpdateManyWithoutRelChallengerInput>;
  preChallenger?: Maybe<UserUpdateManyWithoutPreChallengerInput>;
  nextPosts?: Maybe<PostUpdateManyWithoutPrePostsInput>;
  prePosts?: Maybe<PostUpdateManyWithoutNextPostsInput>;
  tagChallenger?: Maybe<UserUpdateManyWithoutTagChallengerInput>;
  video?: Maybe<VideoUpdateManyWithoutPostInput>;
  image?: Maybe<ImageUpdateManyWithoutPostInput>;
  audio?: Maybe<AudioUpdateManyWithoutPostInput>;
  text?: Maybe<TextUpdateManyWithoutPostInput>;
}

export interface PostUpdateManyWithoutPrePostsInput {
  create?: Maybe<
    PostCreateWithoutPrePostsInput[] | PostCreateWithoutPrePostsInput
  >;
  delete?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  connect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  set?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  disconnect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  update?: Maybe<
    | PostUpdateWithWhereUniqueWithoutPrePostsInput[]
    | PostUpdateWithWhereUniqueWithoutPrePostsInput
  >;
  upsert?: Maybe<
    | PostUpsertWithWhereUniqueWithoutPrePostsInput[]
    | PostUpsertWithWhereUniqueWithoutPrePostsInput
  >;
  deleteMany?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  updateMany?: Maybe<
    PostUpdateManyWithWhereNestedInput[] | PostUpdateManyWithWhereNestedInput
  >;
}

export interface PostUpdateWithWhereUniqueWithoutPrePostsInput {
  where: PostWhereUniqueInput;
  data: PostUpdateWithoutPrePostsDataInput;
}

export interface PostUpdateWithoutPrePostsDataInput {
  caption?: Maybe<String>;
  location?: Maybe<String>;
  files?: Maybe<FileUpdateManyWithoutPostInput>;
  user?: Maybe<UserUpdateOneWithoutPostsInput>;
  likes?: Maybe<LikeUpdateManyWithoutPostInput>;
  hashtags?: Maybe<HashtagUpdateManyWithoutPostInput>;
  comments?: Maybe<CommentUpdateManyWithoutPostInput>;
  category?: Maybe<String>;
  relChallenger?: Maybe<UserUpdateManyWithoutRelChallengerInput>;
  preChallenger?: Maybe<UserUpdateManyWithoutPreChallengerInput>;
  nextChallenger?: Maybe<UserUpdateManyWithoutNextChallengerInput>;
  nextPosts?: Maybe<PostUpdateManyWithoutPrePostsInput>;
  tagChallenger?: Maybe<UserUpdateManyWithoutTagChallengerInput>;
  video?: Maybe<VideoUpdateManyWithoutPostInput>;
  image?: Maybe<ImageUpdateManyWithoutPostInput>;
  audio?: Maybe<AudioUpdateManyWithoutPostInput>;
  text?: Maybe<TextUpdateManyWithoutPostInput>;
}

export interface UserUpdateManyWithoutTagChallengerInput {
  create?: Maybe<
    UserCreateWithoutTagChallengerInput[] | UserCreateWithoutTagChallengerInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutTagChallengerInput[]
    | UserUpdateWithWhereUniqueWithoutTagChallengerInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutTagChallengerInput[]
    | UserUpsertWithWhereUniqueWithoutTagChallengerInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateWithWhereUniqueWithoutTagChallengerInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutTagChallengerDataInput;
}

export interface UserUpdateWithoutTagChallengerDataInput {
  avatar?: Maybe<String>;
  username?: Maybe<String>;
  nickname?: Maybe<String>;
  passwd?: Maybe<String>;
  email?: Maybe<String>;
  bio?: Maybe<String>;
  following?: Maybe<UserUpdateManyWithoutFollowersInput>;
  followers?: Maybe<UserUpdateManyWithoutFollowingInput>;
  posts?: Maybe<PostUpdateManyWithoutUserInput>;
  likes?: Maybe<LikeUpdateManyWithoutUserInput>;
  comments?: Maybe<CommentUpdateManyWithoutUserInput>;
  rooms?: Maybe<RoomUpdateManyWithoutParticipantsInput>;
  relChallenger?: Maybe<PostUpdateManyWithoutRelChallengerInput>;
  preChallenger?: Maybe<PostUpdateManyWithoutPreChallengerInput>;
  nextChallenger?: Maybe<PostUpdateManyWithoutNextChallengerInput>;
  loginSecret?: Maybe<String>;
  favCategory?: Maybe<String>;
}

export interface UserUpsertWithWhereUniqueWithoutTagChallengerInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutTagChallengerDataInput;
  create: UserCreateWithoutTagChallengerInput;
}

export interface UserScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  avatar?: Maybe<String>;
  avatar_not?: Maybe<String>;
  avatar_in?: Maybe<String[] | String>;
  avatar_not_in?: Maybe<String[] | String>;
  avatar_lt?: Maybe<String>;
  avatar_lte?: Maybe<String>;
  avatar_gt?: Maybe<String>;
  avatar_gte?: Maybe<String>;
  avatar_contains?: Maybe<String>;
  avatar_not_contains?: Maybe<String>;
  avatar_starts_with?: Maybe<String>;
  avatar_not_starts_with?: Maybe<String>;
  avatar_ends_with?: Maybe<String>;
  avatar_not_ends_with?: Maybe<String>;
  username?: Maybe<String>;
  username_not?: Maybe<String>;
  username_in?: Maybe<String[] | String>;
  username_not_in?: Maybe<String[] | String>;
  username_lt?: Maybe<String>;
  username_lte?: Maybe<String>;
  username_gt?: Maybe<String>;
  username_gte?: Maybe<String>;
  username_contains?: Maybe<String>;
  username_not_contains?: Maybe<String>;
  username_starts_with?: Maybe<String>;
  username_not_starts_with?: Maybe<String>;
  username_ends_with?: Maybe<String>;
  username_not_ends_with?: Maybe<String>;
  nickname?: Maybe<String>;
  nickname_not?: Maybe<String>;
  nickname_in?: Maybe<String[] | String>;
  nickname_not_in?: Maybe<String[] | String>;
  nickname_lt?: Maybe<String>;
  nickname_lte?: Maybe<String>;
  nickname_gt?: Maybe<String>;
  nickname_gte?: Maybe<String>;
  nickname_contains?: Maybe<String>;
  nickname_not_contains?: Maybe<String>;
  nickname_starts_with?: Maybe<String>;
  nickname_not_starts_with?: Maybe<String>;
  nickname_ends_with?: Maybe<String>;
  nickname_not_ends_with?: Maybe<String>;
  passwd?: Maybe<String>;
  passwd_not?: Maybe<String>;
  passwd_in?: Maybe<String[] | String>;
  passwd_not_in?: Maybe<String[] | String>;
  passwd_lt?: Maybe<String>;
  passwd_lte?: Maybe<String>;
  passwd_gt?: Maybe<String>;
  passwd_gte?: Maybe<String>;
  passwd_contains?: Maybe<String>;
  passwd_not_contains?: Maybe<String>;
  passwd_starts_with?: Maybe<String>;
  passwd_not_starts_with?: Maybe<String>;
  passwd_ends_with?: Maybe<String>;
  passwd_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  bio?: Maybe<String>;
  bio_not?: Maybe<String>;
  bio_in?: Maybe<String[] | String>;
  bio_not_in?: Maybe<String[] | String>;
  bio_lt?: Maybe<String>;
  bio_lte?: Maybe<String>;
  bio_gt?: Maybe<String>;
  bio_gte?: Maybe<String>;
  bio_contains?: Maybe<String>;
  bio_not_contains?: Maybe<String>;
  bio_starts_with?: Maybe<String>;
  bio_not_starts_with?: Maybe<String>;
  bio_ends_with?: Maybe<String>;
  bio_not_ends_with?: Maybe<String>;
  loginSecret?: Maybe<String>;
  loginSecret_not?: Maybe<String>;
  loginSecret_in?: Maybe<String[] | String>;
  loginSecret_not_in?: Maybe<String[] | String>;
  loginSecret_lt?: Maybe<String>;
  loginSecret_lte?: Maybe<String>;
  loginSecret_gt?: Maybe<String>;
  loginSecret_gte?: Maybe<String>;
  loginSecret_contains?: Maybe<String>;
  loginSecret_not_contains?: Maybe<String>;
  loginSecret_starts_with?: Maybe<String>;
  loginSecret_not_starts_with?: Maybe<String>;
  loginSecret_ends_with?: Maybe<String>;
  loginSecret_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  favCategory?: Maybe<String>;
  favCategory_not?: Maybe<String>;
  favCategory_in?: Maybe<String[] | String>;
  favCategory_not_in?: Maybe<String[] | String>;
  favCategory_lt?: Maybe<String>;
  favCategory_lte?: Maybe<String>;
  favCategory_gt?: Maybe<String>;
  favCategory_gte?: Maybe<String>;
  favCategory_contains?: Maybe<String>;
  favCategory_not_contains?: Maybe<String>;
  favCategory_starts_with?: Maybe<String>;
  favCategory_not_starts_with?: Maybe<String>;
  favCategory_ends_with?: Maybe<String>;
  favCategory_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  OR?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  NOT?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface UserUpdateManyDataInput {
  avatar?: Maybe<String>;
  username?: Maybe<String>;
  nickname?: Maybe<String>;
  passwd?: Maybe<String>;
  email?: Maybe<String>;
  bio?: Maybe<String>;
  loginSecret?: Maybe<String>;
  favCategory?: Maybe<String>;
}

export interface VideoUpdateManyWithoutPostInput {
  create?: Maybe<VideoCreateWithoutPostInput[] | VideoCreateWithoutPostInput>;
  delete?: Maybe<VideoWhereUniqueInput[] | VideoWhereUniqueInput>;
  connect?: Maybe<VideoWhereUniqueInput[] | VideoWhereUniqueInput>;
  set?: Maybe<VideoWhereUniqueInput[] | VideoWhereUniqueInput>;
  disconnect?: Maybe<VideoWhereUniqueInput[] | VideoWhereUniqueInput>;
  update?: Maybe<
    | VideoUpdateWithWhereUniqueWithoutPostInput[]
    | VideoUpdateWithWhereUniqueWithoutPostInput
  >;
  upsert?: Maybe<
    | VideoUpsertWithWhereUniqueWithoutPostInput[]
    | VideoUpsertWithWhereUniqueWithoutPostInput
  >;
  deleteMany?: Maybe<VideoScalarWhereInput[] | VideoScalarWhereInput>;
  updateMany?: Maybe<
    VideoUpdateManyWithWhereNestedInput[] | VideoUpdateManyWithWhereNestedInput
  >;
}

export interface VideoUpdateWithWhereUniqueWithoutPostInput {
  where: VideoWhereUniqueInput;
  data: VideoUpdateWithoutPostDataInput;
}

export interface VideoUpdateWithoutPostDataInput {
  video_url?: Maybe<String>;
  files?: Maybe<FileUpdateManyWithoutVideoInput>;
}

export interface FileUpdateManyWithoutVideoInput {
  create?: Maybe<FileCreateWithoutVideoInput[] | FileCreateWithoutVideoInput>;
  delete?: Maybe<FileWhereUniqueInput[] | FileWhereUniqueInput>;
  connect?: Maybe<FileWhereUniqueInput[] | FileWhereUniqueInput>;
  set?: Maybe<FileWhereUniqueInput[] | FileWhereUniqueInput>;
  disconnect?: Maybe<FileWhereUniqueInput[] | FileWhereUniqueInput>;
  update?: Maybe<
    | FileUpdateWithWhereUniqueWithoutVideoInput[]
    | FileUpdateWithWhereUniqueWithoutVideoInput
  >;
  upsert?: Maybe<
    | FileUpsertWithWhereUniqueWithoutVideoInput[]
    | FileUpsertWithWhereUniqueWithoutVideoInput
  >;
  deleteMany?: Maybe<FileScalarWhereInput[] | FileScalarWhereInput>;
  updateMany?: Maybe<
    FileUpdateManyWithWhereNestedInput[] | FileUpdateManyWithWhereNestedInput
  >;
}

export interface FileUpdateWithWhereUniqueWithoutVideoInput {
  where: FileWhereUniqueInput;
  data: FileUpdateWithoutVideoDataInput;
}

export interface FileUpdateWithoutVideoDataInput {
  url?: Maybe<String>;
  post?: Maybe<PostUpdateOneWithoutFilesInput>;
  text?: Maybe<TextUpdateManyWithoutImageFileInput>;
  audio?: Maybe<AudioUpdateManyWithoutAudioFileInput>;
  image?: Maybe<ImageUpdateManyWithoutFilesInput>;
}

export interface AudioUpdateManyWithoutAudioFileInput {
  create?: Maybe<
    AudioCreateWithoutAudioFileInput[] | AudioCreateWithoutAudioFileInput
  >;
  delete?: Maybe<AudioWhereUniqueInput[] | AudioWhereUniqueInput>;
  connect?: Maybe<AudioWhereUniqueInput[] | AudioWhereUniqueInput>;
  set?: Maybe<AudioWhereUniqueInput[] | AudioWhereUniqueInput>;
  disconnect?: Maybe<AudioWhereUniqueInput[] | AudioWhereUniqueInput>;
  update?: Maybe<
    | AudioUpdateWithWhereUniqueWithoutAudioFileInput[]
    | AudioUpdateWithWhereUniqueWithoutAudioFileInput
  >;
  upsert?: Maybe<
    | AudioUpsertWithWhereUniqueWithoutAudioFileInput[]
    | AudioUpsertWithWhereUniqueWithoutAudioFileInput
  >;
  deleteMany?: Maybe<AudioScalarWhereInput[] | AudioScalarWhereInput>;
  updateMany?: Maybe<
    AudioUpdateManyWithWhereNestedInput[] | AudioUpdateManyWithWhereNestedInput
  >;
}

export interface AudioUpdateWithWhereUniqueWithoutAudioFileInput {
  where: AudioWhereUniqueInput;
  data: AudioUpdateWithoutAudioFileDataInput;
}

export interface AudioUpdateWithoutAudioFileDataInput {
  audio_url?: Maybe<String>;
  audio_img_url?: Maybe<String>;
  post?: Maybe<PostUpdateOneWithoutAudioInput>;
}

export interface PostUpdateOneWithoutAudioInput {
  create?: Maybe<PostCreateWithoutAudioInput>;
  update?: Maybe<PostUpdateWithoutAudioDataInput>;
  upsert?: Maybe<PostUpsertWithoutAudioInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<PostWhereUniqueInput>;
}

export interface PostUpdateWithoutAudioDataInput {
  caption?: Maybe<String>;
  location?: Maybe<String>;
  files?: Maybe<FileUpdateManyWithoutPostInput>;
  user?: Maybe<UserUpdateOneWithoutPostsInput>;
  likes?: Maybe<LikeUpdateManyWithoutPostInput>;
  hashtags?: Maybe<HashtagUpdateManyWithoutPostInput>;
  comments?: Maybe<CommentUpdateManyWithoutPostInput>;
  category?: Maybe<String>;
  relChallenger?: Maybe<UserUpdateManyWithoutRelChallengerInput>;
  preChallenger?: Maybe<UserUpdateManyWithoutPreChallengerInput>;
  nextChallenger?: Maybe<UserUpdateManyWithoutNextChallengerInput>;
  nextPosts?: Maybe<PostUpdateManyWithoutPrePostsInput>;
  prePosts?: Maybe<PostUpdateManyWithoutNextPostsInput>;
  tagChallenger?: Maybe<UserUpdateManyWithoutTagChallengerInput>;
  video?: Maybe<VideoUpdateManyWithoutPostInput>;
  image?: Maybe<ImageUpdateManyWithoutPostInput>;
  text?: Maybe<TextUpdateManyWithoutPostInput>;
}

export interface PostUpdateManyWithoutNextPostsInput {
  create?: Maybe<
    PostCreateWithoutNextPostsInput[] | PostCreateWithoutNextPostsInput
  >;
  delete?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  connect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  set?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  disconnect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  update?: Maybe<
    | PostUpdateWithWhereUniqueWithoutNextPostsInput[]
    | PostUpdateWithWhereUniqueWithoutNextPostsInput
  >;
  upsert?: Maybe<
    | PostUpsertWithWhereUniqueWithoutNextPostsInput[]
    | PostUpsertWithWhereUniqueWithoutNextPostsInput
  >;
  deleteMany?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  updateMany?: Maybe<
    PostUpdateManyWithWhereNestedInput[] | PostUpdateManyWithWhereNestedInput
  >;
}

export interface PostUpdateWithWhereUniqueWithoutNextPostsInput {
  where: PostWhereUniqueInput;
  data: PostUpdateWithoutNextPostsDataInput;
}

export interface PostUpdateWithoutNextPostsDataInput {
  caption?: Maybe<String>;
  location?: Maybe<String>;
  files?: Maybe<FileUpdateManyWithoutPostInput>;
  user?: Maybe<UserUpdateOneWithoutPostsInput>;
  likes?: Maybe<LikeUpdateManyWithoutPostInput>;
  hashtags?: Maybe<HashtagUpdateManyWithoutPostInput>;
  comments?: Maybe<CommentUpdateManyWithoutPostInput>;
  category?: Maybe<String>;
  relChallenger?: Maybe<UserUpdateManyWithoutRelChallengerInput>;
  preChallenger?: Maybe<UserUpdateManyWithoutPreChallengerInput>;
  nextChallenger?: Maybe<UserUpdateManyWithoutNextChallengerInput>;
  prePosts?: Maybe<PostUpdateManyWithoutNextPostsInput>;
  tagChallenger?: Maybe<UserUpdateManyWithoutTagChallengerInput>;
  video?: Maybe<VideoUpdateManyWithoutPostInput>;
  image?: Maybe<ImageUpdateManyWithoutPostInput>;
  audio?: Maybe<AudioUpdateManyWithoutPostInput>;
  text?: Maybe<TextUpdateManyWithoutPostInput>;
}

export interface ImageUpdateManyWithoutPostInput {
  create?: Maybe<ImageCreateWithoutPostInput[] | ImageCreateWithoutPostInput>;
  delete?: Maybe<ImageWhereUniqueInput[] | ImageWhereUniqueInput>;
  connect?: Maybe<ImageWhereUniqueInput[] | ImageWhereUniqueInput>;
  set?: Maybe<ImageWhereUniqueInput[] | ImageWhereUniqueInput>;
  disconnect?: Maybe<ImageWhereUniqueInput[] | ImageWhereUniqueInput>;
  update?: Maybe<
    | ImageUpdateWithWhereUniqueWithoutPostInput[]
    | ImageUpdateWithWhereUniqueWithoutPostInput
  >;
  upsert?: Maybe<
    | ImageUpsertWithWhereUniqueWithoutPostInput[]
    | ImageUpsertWithWhereUniqueWithoutPostInput
  >;
  deleteMany?: Maybe<ImageScalarWhereInput[] | ImageScalarWhereInput>;
  updateMany?: Maybe<
    ImageUpdateManyWithWhereNestedInput[] | ImageUpdateManyWithWhereNestedInput
  >;
}

export interface ImageUpdateWithWhereUniqueWithoutPostInput {
  where: ImageWhereUniqueInput;
  data: ImageUpdateWithoutPostDataInput;
}

export interface ImageUpdateWithoutPostDataInput {
  image_url?: Maybe<String>;
  files?: Maybe<FileUpdateManyWithoutImageInput>;
}

export interface FileUpdateManyWithoutImageInput {
  create?: Maybe<FileCreateWithoutImageInput[] | FileCreateWithoutImageInput>;
  delete?: Maybe<FileWhereUniqueInput[] | FileWhereUniqueInput>;
  connect?: Maybe<FileWhereUniqueInput[] | FileWhereUniqueInput>;
  set?: Maybe<FileWhereUniqueInput[] | FileWhereUniqueInput>;
  disconnect?: Maybe<FileWhereUniqueInput[] | FileWhereUniqueInput>;
  update?: Maybe<
    | FileUpdateWithWhereUniqueWithoutImageInput[]
    | FileUpdateWithWhereUniqueWithoutImageInput
  >;
  upsert?: Maybe<
    | FileUpsertWithWhereUniqueWithoutImageInput[]
    | FileUpsertWithWhereUniqueWithoutImageInput
  >;
  deleteMany?: Maybe<FileScalarWhereInput[] | FileScalarWhereInput>;
  updateMany?: Maybe<
    FileUpdateManyWithWhereNestedInput[] | FileUpdateManyWithWhereNestedInput
  >;
}

export interface FileUpdateWithWhereUniqueWithoutImageInput {
  where: FileWhereUniqueInput;
  data: FileUpdateWithoutImageDataInput;
}

export interface FileUpdateWithoutImageDataInput {
  url?: Maybe<String>;
  post?: Maybe<PostUpdateOneWithoutFilesInput>;
  text?: Maybe<TextUpdateManyWithoutImageFileInput>;
  video?: Maybe<VideoUpdateManyWithoutFilesInput>;
  audio?: Maybe<AudioUpdateManyWithoutAudioFileInput>;
}

export interface VideoUpdateManyWithoutFilesInput {
  create?: Maybe<VideoCreateWithoutFilesInput[] | VideoCreateWithoutFilesInput>;
  delete?: Maybe<VideoWhereUniqueInput[] | VideoWhereUniqueInput>;
  connect?: Maybe<VideoWhereUniqueInput[] | VideoWhereUniqueInput>;
  set?: Maybe<VideoWhereUniqueInput[] | VideoWhereUniqueInput>;
  disconnect?: Maybe<VideoWhereUniqueInput[] | VideoWhereUniqueInput>;
  update?: Maybe<
    | VideoUpdateWithWhereUniqueWithoutFilesInput[]
    | VideoUpdateWithWhereUniqueWithoutFilesInput
  >;
  upsert?: Maybe<
    | VideoUpsertWithWhereUniqueWithoutFilesInput[]
    | VideoUpsertWithWhereUniqueWithoutFilesInput
  >;
  deleteMany?: Maybe<VideoScalarWhereInput[] | VideoScalarWhereInput>;
  updateMany?: Maybe<
    VideoUpdateManyWithWhereNestedInput[] | VideoUpdateManyWithWhereNestedInput
  >;
}

export interface VideoUpdateWithWhereUniqueWithoutFilesInput {
  where: VideoWhereUniqueInput;
  data: VideoUpdateWithoutFilesDataInput;
}

export interface VideoUpdateWithoutFilesDataInput {
  video_url?: Maybe<String>;
  post?: Maybe<PostUpdateOneWithoutVideoInput>;
}

export interface PostUpdateOneWithoutVideoInput {
  create?: Maybe<PostCreateWithoutVideoInput>;
  update?: Maybe<PostUpdateWithoutVideoDataInput>;
  upsert?: Maybe<PostUpsertWithoutVideoInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<PostWhereUniqueInput>;
}

export interface PostUpdateWithoutVideoDataInput {
  caption?: Maybe<String>;
  location?: Maybe<String>;
  files?: Maybe<FileUpdateManyWithoutPostInput>;
  user?: Maybe<UserUpdateOneWithoutPostsInput>;
  likes?: Maybe<LikeUpdateManyWithoutPostInput>;
  hashtags?: Maybe<HashtagUpdateManyWithoutPostInput>;
  comments?: Maybe<CommentUpdateManyWithoutPostInput>;
  category?: Maybe<String>;
  relChallenger?: Maybe<UserUpdateManyWithoutRelChallengerInput>;
  preChallenger?: Maybe<UserUpdateManyWithoutPreChallengerInput>;
  nextChallenger?: Maybe<UserUpdateManyWithoutNextChallengerInput>;
  nextPosts?: Maybe<PostUpdateManyWithoutPrePostsInput>;
  prePosts?: Maybe<PostUpdateManyWithoutNextPostsInput>;
  tagChallenger?: Maybe<UserUpdateManyWithoutTagChallengerInput>;
  image?: Maybe<ImageUpdateManyWithoutPostInput>;
  audio?: Maybe<AudioUpdateManyWithoutPostInput>;
  text?: Maybe<TextUpdateManyWithoutPostInput>;
}

export interface AudioUpdateManyWithoutPostInput {
  create?: Maybe<AudioCreateWithoutPostInput[] | AudioCreateWithoutPostInput>;
  delete?: Maybe<AudioWhereUniqueInput[] | AudioWhereUniqueInput>;
  connect?: Maybe<AudioWhereUniqueInput[] | AudioWhereUniqueInput>;
  set?: Maybe<AudioWhereUniqueInput[] | AudioWhereUniqueInput>;
  disconnect?: Maybe<AudioWhereUniqueInput[] | AudioWhereUniqueInput>;
  update?: Maybe<
    | AudioUpdateWithWhereUniqueWithoutPostInput[]
    | AudioUpdateWithWhereUniqueWithoutPostInput
  >;
  upsert?: Maybe<
    | AudioUpsertWithWhereUniqueWithoutPostInput[]
    | AudioUpsertWithWhereUniqueWithoutPostInput
  >;
  deleteMany?: Maybe<AudioScalarWhereInput[] | AudioScalarWhereInput>;
  updateMany?: Maybe<
    AudioUpdateManyWithWhereNestedInput[] | AudioUpdateManyWithWhereNestedInput
  >;
}

export interface AudioUpdateWithWhereUniqueWithoutPostInput {
  where: AudioWhereUniqueInput;
  data: AudioUpdateWithoutPostDataInput;
}

export interface AudioUpdateWithoutPostDataInput {
  audio_url?: Maybe<String>;
  audio_img_url?: Maybe<String>;
  audioFile?: Maybe<FileUpdateOneRequiredWithoutAudioInput>;
}

export interface AudioUpsertWithWhereUniqueWithoutPostInput {
  where: AudioWhereUniqueInput;
  update: AudioUpdateWithoutPostDataInput;
  create: AudioCreateWithoutPostInput;
}

export interface AudioScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  audio_url?: Maybe<String>;
  audio_url_not?: Maybe<String>;
  audio_url_in?: Maybe<String[] | String>;
  audio_url_not_in?: Maybe<String[] | String>;
  audio_url_lt?: Maybe<String>;
  audio_url_lte?: Maybe<String>;
  audio_url_gt?: Maybe<String>;
  audio_url_gte?: Maybe<String>;
  audio_url_contains?: Maybe<String>;
  audio_url_not_contains?: Maybe<String>;
  audio_url_starts_with?: Maybe<String>;
  audio_url_not_starts_with?: Maybe<String>;
  audio_url_ends_with?: Maybe<String>;
  audio_url_not_ends_with?: Maybe<String>;
  audio_img_url?: Maybe<String>;
  audio_img_url_not?: Maybe<String>;
  audio_img_url_in?: Maybe<String[] | String>;
  audio_img_url_not_in?: Maybe<String[] | String>;
  audio_img_url_lt?: Maybe<String>;
  audio_img_url_lte?: Maybe<String>;
  audio_img_url_gt?: Maybe<String>;
  audio_img_url_gte?: Maybe<String>;
  audio_img_url_contains?: Maybe<String>;
  audio_img_url_not_contains?: Maybe<String>;
  audio_img_url_starts_with?: Maybe<String>;
  audio_img_url_not_starts_with?: Maybe<String>;
  audio_img_url_ends_with?: Maybe<String>;
  audio_img_url_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<AudioScalarWhereInput[] | AudioScalarWhereInput>;
  OR?: Maybe<AudioScalarWhereInput[] | AudioScalarWhereInput>;
  NOT?: Maybe<AudioScalarWhereInput[] | AudioScalarWhereInput>;
}

export interface AudioUpdateManyWithWhereNestedInput {
  where: AudioScalarWhereInput;
  data: AudioUpdateManyDataInput;
}

export interface AudioUpdateManyDataInput {
  audio_url?: Maybe<String>;
  audio_img_url?: Maybe<String>;
}

export interface TextUpdateManyWithoutPostInput {
  create?: Maybe<TextCreateWithoutPostInput[] | TextCreateWithoutPostInput>;
  delete?: Maybe<TextWhereUniqueInput[] | TextWhereUniqueInput>;
  connect?: Maybe<TextWhereUniqueInput[] | TextWhereUniqueInput>;
  set?: Maybe<TextWhereUniqueInput[] | TextWhereUniqueInput>;
  disconnect?: Maybe<TextWhereUniqueInput[] | TextWhereUniqueInput>;
  update?: Maybe<
    | TextUpdateWithWhereUniqueWithoutPostInput[]
    | TextUpdateWithWhereUniqueWithoutPostInput
  >;
  upsert?: Maybe<
    | TextUpsertWithWhereUniqueWithoutPostInput[]
    | TextUpsertWithWhereUniqueWithoutPostInput
  >;
  deleteMany?: Maybe<TextScalarWhereInput[] | TextScalarWhereInput>;
  updateMany?: Maybe<
    TextUpdateManyWithWhereNestedInput[] | TextUpdateManyWithWhereNestedInput
  >;
}

export interface TextUpdateWithWhereUniqueWithoutPostInput {
  where: TextWhereUniqueInput;
  data: TextUpdateWithoutPostDataInput;
}

export interface TextUpdateWithoutPostDataInput {
  text_img_url?: Maybe<String>;
  content?: Maybe<String>;
  imageFile?: Maybe<FileUpdateOneRequiredWithoutTextInput>;
  relay?: Maybe<Boolean>;
}

export interface FileUpdateOneRequiredWithoutTextInput {
  create?: Maybe<FileCreateWithoutTextInput>;
  update?: Maybe<FileUpdateWithoutTextDataInput>;
  upsert?: Maybe<FileUpsertWithoutTextInput>;
  connect?: Maybe<FileWhereUniqueInput>;
}

export interface FileUpdateWithoutTextDataInput {
  url?: Maybe<String>;
  post?: Maybe<PostUpdateOneWithoutFilesInput>;
  video?: Maybe<VideoUpdateManyWithoutFilesInput>;
  audio?: Maybe<AudioUpdateManyWithoutAudioFileInput>;
  image?: Maybe<ImageUpdateManyWithoutFilesInput>;
}

export interface ImageUpdateManyWithoutFilesInput {
  create?: Maybe<ImageCreateWithoutFilesInput[] | ImageCreateWithoutFilesInput>;
  delete?: Maybe<ImageWhereUniqueInput[] | ImageWhereUniqueInput>;
  connect?: Maybe<ImageWhereUniqueInput[] | ImageWhereUniqueInput>;
  set?: Maybe<ImageWhereUniqueInput[] | ImageWhereUniqueInput>;
  disconnect?: Maybe<ImageWhereUniqueInput[] | ImageWhereUniqueInput>;
  update?: Maybe<
    | ImageUpdateWithWhereUniqueWithoutFilesInput[]
    | ImageUpdateWithWhereUniqueWithoutFilesInput
  >;
  upsert?: Maybe<
    | ImageUpsertWithWhereUniqueWithoutFilesInput[]
    | ImageUpsertWithWhereUniqueWithoutFilesInput
  >;
  deleteMany?: Maybe<ImageScalarWhereInput[] | ImageScalarWhereInput>;
  updateMany?: Maybe<
    ImageUpdateManyWithWhereNestedInput[] | ImageUpdateManyWithWhereNestedInput
  >;
}

export interface ImageUpdateWithWhereUniqueWithoutFilesInput {
  where: ImageWhereUniqueInput;
  data: ImageUpdateWithoutFilesDataInput;
}

export interface ImageUpdateWithoutFilesDataInput {
  image_url?: Maybe<String>;
  post?: Maybe<PostUpdateOneWithoutImageInput>;
}

export interface PostUpdateOneWithoutImageInput {
  create?: Maybe<PostCreateWithoutImageInput>;
  update?: Maybe<PostUpdateWithoutImageDataInput>;
  upsert?: Maybe<PostUpsertWithoutImageInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<PostWhereUniqueInput>;
}

export interface PostUpdateWithoutImageDataInput {
  caption?: Maybe<String>;
  location?: Maybe<String>;
  files?: Maybe<FileUpdateManyWithoutPostInput>;
  user?: Maybe<UserUpdateOneWithoutPostsInput>;
  likes?: Maybe<LikeUpdateManyWithoutPostInput>;
  hashtags?: Maybe<HashtagUpdateManyWithoutPostInput>;
  comments?: Maybe<CommentUpdateManyWithoutPostInput>;
  category?: Maybe<String>;
  relChallenger?: Maybe<UserUpdateManyWithoutRelChallengerInput>;
  preChallenger?: Maybe<UserUpdateManyWithoutPreChallengerInput>;
  nextChallenger?: Maybe<UserUpdateManyWithoutNextChallengerInput>;
  nextPosts?: Maybe<PostUpdateManyWithoutPrePostsInput>;
  prePosts?: Maybe<PostUpdateManyWithoutNextPostsInput>;
  tagChallenger?: Maybe<UserUpdateManyWithoutTagChallengerInput>;
  video?: Maybe<VideoUpdateManyWithoutPostInput>;
  audio?: Maybe<AudioUpdateManyWithoutPostInput>;
  text?: Maybe<TextUpdateManyWithoutPostInput>;
}

export interface PostUpsertWithoutImageInput {
  update: PostUpdateWithoutImageDataInput;
  create: PostCreateWithoutImageInput;
}

export interface ImageUpsertWithWhereUniqueWithoutFilesInput {
  where: ImageWhereUniqueInput;
  update: ImageUpdateWithoutFilesDataInput;
  create: ImageCreateWithoutFilesInput;
}

export interface ImageScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  image_url?: Maybe<String>;
  image_url_not?: Maybe<String>;
  image_url_in?: Maybe<String[] | String>;
  image_url_not_in?: Maybe<String[] | String>;
  image_url_lt?: Maybe<String>;
  image_url_lte?: Maybe<String>;
  image_url_gt?: Maybe<String>;
  image_url_gte?: Maybe<String>;
  image_url_contains?: Maybe<String>;
  image_url_not_contains?: Maybe<String>;
  image_url_starts_with?: Maybe<String>;
  image_url_not_starts_with?: Maybe<String>;
  image_url_ends_with?: Maybe<String>;
  image_url_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ImageScalarWhereInput[] | ImageScalarWhereInput>;
  OR?: Maybe<ImageScalarWhereInput[] | ImageScalarWhereInput>;
  NOT?: Maybe<ImageScalarWhereInput[] | ImageScalarWhereInput>;
}

export interface ImageUpdateManyWithWhereNestedInput {
  where: ImageScalarWhereInput;
  data: ImageUpdateManyDataInput;
}

export interface ImageUpdateManyDataInput {
  image_url?: Maybe<String>;
}

export interface FileUpsertWithoutTextInput {
  update: FileUpdateWithoutTextDataInput;
  create: FileCreateWithoutTextInput;
}

export interface TextUpsertWithWhereUniqueWithoutPostInput {
  where: TextWhereUniqueInput;
  update: TextUpdateWithoutPostDataInput;
  create: TextCreateWithoutPostInput;
}

export interface TextScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  text_img_url?: Maybe<String>;
  text_img_url_not?: Maybe<String>;
  text_img_url_in?: Maybe<String[] | String>;
  text_img_url_not_in?: Maybe<String[] | String>;
  text_img_url_lt?: Maybe<String>;
  text_img_url_lte?: Maybe<String>;
  text_img_url_gt?: Maybe<String>;
  text_img_url_gte?: Maybe<String>;
  text_img_url_contains?: Maybe<String>;
  text_img_url_not_contains?: Maybe<String>;
  text_img_url_starts_with?: Maybe<String>;
  text_img_url_not_starts_with?: Maybe<String>;
  text_img_url_ends_with?: Maybe<String>;
  text_img_url_not_ends_with?: Maybe<String>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  relay?: Maybe<Boolean>;
  relay_not?: Maybe<Boolean>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<TextScalarWhereInput[] | TextScalarWhereInput>;
  OR?: Maybe<TextScalarWhereInput[] | TextScalarWhereInput>;
  NOT?: Maybe<TextScalarWhereInput[] | TextScalarWhereInput>;
}

export interface TextUpdateManyWithWhereNestedInput {
  where: TextScalarWhereInput;
  data: TextUpdateManyDataInput;
}

export interface TextUpdateManyDataInput {
  text_img_url?: Maybe<String>;
  content?: Maybe<String>;
  relay?: Maybe<Boolean>;
}

export interface PostUpsertWithoutVideoInput {
  update: PostUpdateWithoutVideoDataInput;
  create: PostCreateWithoutVideoInput;
}

export interface VideoUpsertWithWhereUniqueWithoutFilesInput {
  where: VideoWhereUniqueInput;
  update: VideoUpdateWithoutFilesDataInput;
  create: VideoCreateWithoutFilesInput;
}

export interface VideoScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  video_url?: Maybe<String>;
  video_url_not?: Maybe<String>;
  video_url_in?: Maybe<String[] | String>;
  video_url_not_in?: Maybe<String[] | String>;
  video_url_lt?: Maybe<String>;
  video_url_lte?: Maybe<String>;
  video_url_gt?: Maybe<String>;
  video_url_gte?: Maybe<String>;
  video_url_contains?: Maybe<String>;
  video_url_not_contains?: Maybe<String>;
  video_url_starts_with?: Maybe<String>;
  video_url_not_starts_with?: Maybe<String>;
  video_url_ends_with?: Maybe<String>;
  video_url_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<VideoScalarWhereInput[] | VideoScalarWhereInput>;
  OR?: Maybe<VideoScalarWhereInput[] | VideoScalarWhereInput>;
  NOT?: Maybe<VideoScalarWhereInput[] | VideoScalarWhereInput>;
}

export interface VideoUpdateManyWithWhereNestedInput {
  where: VideoScalarWhereInput;
  data: VideoUpdateManyDataInput;
}

export interface VideoUpdateManyDataInput {
  video_url?: Maybe<String>;
}

export interface FileUpsertWithWhereUniqueWithoutImageInput {
  where: FileWhereUniqueInput;
  update: FileUpdateWithoutImageDataInput;
  create: FileCreateWithoutImageInput;
}

export interface FileScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<FileScalarWhereInput[] | FileScalarWhereInput>;
  OR?: Maybe<FileScalarWhereInput[] | FileScalarWhereInput>;
  NOT?: Maybe<FileScalarWhereInput[] | FileScalarWhereInput>;
}

export interface FileUpdateManyWithWhereNestedInput {
  where: FileScalarWhereInput;
  data: FileUpdateManyDataInput;
}

export interface FileUpdateManyDataInput {
  url?: Maybe<String>;
}

export interface ImageUpsertWithWhereUniqueWithoutPostInput {
  where: ImageWhereUniqueInput;
  update: ImageUpdateWithoutPostDataInput;
  create: ImageCreateWithoutPostInput;
}

export interface PostUpsertWithWhereUniqueWithoutNextPostsInput {
  where: PostWhereUniqueInput;
  update: PostUpdateWithoutNextPostsDataInput;
  create: PostCreateWithoutNextPostsInput;
}

export interface PostScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  caption?: Maybe<String>;
  caption_not?: Maybe<String>;
  caption_in?: Maybe<String[] | String>;
  caption_not_in?: Maybe<String[] | String>;
  caption_lt?: Maybe<String>;
  caption_lte?: Maybe<String>;
  caption_gt?: Maybe<String>;
  caption_gte?: Maybe<String>;
  caption_contains?: Maybe<String>;
  caption_not_contains?: Maybe<String>;
  caption_starts_with?: Maybe<String>;
  caption_not_starts_with?: Maybe<String>;
  caption_ends_with?: Maybe<String>;
  caption_not_ends_with?: Maybe<String>;
  location?: Maybe<String>;
  location_not?: Maybe<String>;
  location_in?: Maybe<String[] | String>;
  location_not_in?: Maybe<String[] | String>;
  location_lt?: Maybe<String>;
  location_lte?: Maybe<String>;
  location_gt?: Maybe<String>;
  location_gte?: Maybe<String>;
  location_contains?: Maybe<String>;
  location_not_contains?: Maybe<String>;
  location_starts_with?: Maybe<String>;
  location_not_starts_with?: Maybe<String>;
  location_ends_with?: Maybe<String>;
  location_not_ends_with?: Maybe<String>;
  category?: Maybe<String>;
  category_not?: Maybe<String>;
  category_in?: Maybe<String[] | String>;
  category_not_in?: Maybe<String[] | String>;
  category_lt?: Maybe<String>;
  category_lte?: Maybe<String>;
  category_gt?: Maybe<String>;
  category_gte?: Maybe<String>;
  category_contains?: Maybe<String>;
  category_not_contains?: Maybe<String>;
  category_starts_with?: Maybe<String>;
  category_not_starts_with?: Maybe<String>;
  category_ends_with?: Maybe<String>;
  category_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  OR?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  NOT?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
}

export interface PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput;
  data: PostUpdateManyDataInput;
}

export interface PostUpdateManyDataInput {
  caption?: Maybe<String>;
  location?: Maybe<String>;
  category?: Maybe<String>;
}

export interface PostUpsertWithoutAudioInput {
  update: PostUpdateWithoutAudioDataInput;
  create: PostCreateWithoutAudioInput;
}

export interface AudioUpsertWithWhereUniqueWithoutAudioFileInput {
  where: AudioWhereUniqueInput;
  update: AudioUpdateWithoutAudioFileDataInput;
  create: AudioCreateWithoutAudioFileInput;
}

export interface FileUpsertWithWhereUniqueWithoutVideoInput {
  where: FileWhereUniqueInput;
  update: FileUpdateWithoutVideoDataInput;
  create: FileCreateWithoutVideoInput;
}

export interface VideoUpsertWithWhereUniqueWithoutPostInput {
  where: VideoWhereUniqueInput;
  update: VideoUpdateWithoutPostDataInput;
  create: VideoCreateWithoutPostInput;
}

export interface PostUpsertWithWhereUniqueWithoutPrePostsInput {
  where: PostWhereUniqueInput;
  update: PostUpdateWithoutPrePostsDataInput;
  create: PostCreateWithoutPrePostsInput;
}

export interface PostUpsertWithWhereUniqueWithoutNextChallengerInput {
  where: PostWhereUniqueInput;
  update: PostUpdateWithoutNextChallengerDataInput;
  create: PostCreateWithoutNextChallengerInput;
}

export interface PostUpdateManyWithoutTagChallengerInput {
  create?: Maybe<
    PostCreateWithoutTagChallengerInput[] | PostCreateWithoutTagChallengerInput
  >;
  delete?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  connect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  set?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  disconnect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  update?: Maybe<
    | PostUpdateWithWhereUniqueWithoutTagChallengerInput[]
    | PostUpdateWithWhereUniqueWithoutTagChallengerInput
  >;
  upsert?: Maybe<
    | PostUpsertWithWhereUniqueWithoutTagChallengerInput[]
    | PostUpsertWithWhereUniqueWithoutTagChallengerInput
  >;
  deleteMany?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  updateMany?: Maybe<
    PostUpdateManyWithWhereNestedInput[] | PostUpdateManyWithWhereNestedInput
  >;
}

export interface PostUpdateWithWhereUniqueWithoutTagChallengerInput {
  where: PostWhereUniqueInput;
  data: PostUpdateWithoutTagChallengerDataInput;
}

export interface PostUpdateWithoutTagChallengerDataInput {
  caption?: Maybe<String>;
  location?: Maybe<String>;
  files?: Maybe<FileUpdateManyWithoutPostInput>;
  user?: Maybe<UserUpdateOneWithoutPostsInput>;
  likes?: Maybe<LikeUpdateManyWithoutPostInput>;
  hashtags?: Maybe<HashtagUpdateManyWithoutPostInput>;
  comments?: Maybe<CommentUpdateManyWithoutPostInput>;
  category?: Maybe<String>;
  relChallenger?: Maybe<UserUpdateManyWithoutRelChallengerInput>;
  preChallenger?: Maybe<UserUpdateManyWithoutPreChallengerInput>;
  nextChallenger?: Maybe<UserUpdateManyWithoutNextChallengerInput>;
  nextPosts?: Maybe<PostUpdateManyWithoutPrePostsInput>;
  prePosts?: Maybe<PostUpdateManyWithoutNextPostsInput>;
  video?: Maybe<VideoUpdateManyWithoutPostInput>;
  image?: Maybe<ImageUpdateManyWithoutPostInput>;
  audio?: Maybe<AudioUpdateManyWithoutPostInput>;
  text?: Maybe<TextUpdateManyWithoutPostInput>;
}

export interface PostUpsertWithWhereUniqueWithoutTagChallengerInput {
  where: PostWhereUniqueInput;
  update: PostUpdateWithoutTagChallengerDataInput;
  create: PostCreateWithoutTagChallengerInput;
}

export interface UserUpsertWithWhereUniqueWithoutPreChallengerInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutPreChallengerDataInput;
  create: UserCreateWithoutPreChallengerInput;
}

export interface PostUpsertWithWhereUniqueWithoutRelChallengerInput {
  where: PostWhereUniqueInput;
  update: PostUpdateWithoutRelChallengerDataInput;
  create: PostCreateWithoutRelChallengerInput;
}

export interface UserUpsertWithWhereUniqueWithoutNextChallengerInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutNextChallengerDataInput;
  create: UserCreateWithoutNextChallengerInput;
}

export interface PostUpsertWithWhereUniqueWithoutPreChallengerInput {
  where: PostWhereUniqueInput;
  update: PostUpdateWithoutPreChallengerDataInput;
  create: PostCreateWithoutPreChallengerInput;
}

export interface UserUpsertWithWhereUniqueWithoutRelChallengerInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutRelChallengerDataInput;
  create: UserCreateWithoutRelChallengerInput;
}

export interface PostUpsertWithoutCommentsInput {
  update: PostUpdateWithoutCommentsDataInput;
  create: PostCreateWithoutCommentsInput;
}

export interface CommentUpsertWithWhereUniqueWithoutUserInput {
  where: CommentWhereUniqueInput;
  update: CommentUpdateWithoutUserDataInput;
  create: CommentCreateWithoutUserInput;
}

export interface CommentScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  OR?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  NOT?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
}

export interface CommentUpdateManyWithWhereNestedInput {
  where: CommentScalarWhereInput;
  data: CommentUpdateManyDataInput;
}

export interface CommentUpdateManyDataInput {
  text?: Maybe<String>;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface MessageUpsertWithWhereUniqueWithoutRoomInput {
  where: MessageWhereUniqueInput;
  update: MessageUpdateWithoutRoomDataInput;
  create: MessageCreateWithoutRoomInput;
}

export interface MessageScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<MessageScalarWhereInput[] | MessageScalarWhereInput>;
  OR?: Maybe<MessageScalarWhereInput[] | MessageScalarWhereInput>;
  NOT?: Maybe<MessageScalarWhereInput[] | MessageScalarWhereInput>;
}

export interface MessageUpdateManyWithWhereNestedInput {
  where: MessageScalarWhereInput;
  data: MessageUpdateManyDataInput;
}

export interface MessageUpdateManyDataInput {
  text?: Maybe<String>;
}

export interface RoomUpsertWithWhereUniqueWithoutParticipantsInput {
  where: RoomWhereUniqueInput;
  update: RoomUpdateWithoutParticipantsDataInput;
  create: RoomCreateWithoutParticipantsInput;
}

export interface RoomScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<RoomScalarWhereInput[] | RoomScalarWhereInput>;
  OR?: Maybe<RoomScalarWhereInput[] | RoomScalarWhereInput>;
  NOT?: Maybe<RoomScalarWhereInput[] | RoomScalarWhereInput>;
}

export interface UserUpsertWithoutCommentsInput {
  update: UserUpdateWithoutCommentsDataInput;
  create: UserCreateWithoutCommentsInput;
}

export interface CommentUpsertWithWhereUniqueWithoutPostInput {
  where: CommentWhereUniqueInput;
  update: CommentUpdateWithoutPostDataInput;
  create: CommentCreateWithoutPostInput;
}

export interface PostUpsertWithoutLikesInput {
  update: PostUpdateWithoutLikesDataInput;
  create: PostCreateWithoutLikesInput;
}

export interface LikeUpsertWithWhereUniqueWithoutUserInput {
  where: LikeWhereUniqueInput;
  update: LikeUpdateWithoutUserDataInput;
  create: LikeCreateWithoutUserInput;
}

export interface LikeScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<LikeScalarWhereInput[] | LikeScalarWhereInput>;
  OR?: Maybe<LikeScalarWhereInput[] | LikeScalarWhereInput>;
  NOT?: Maybe<LikeScalarWhereInput[] | LikeScalarWhereInput>;
}

export interface UserUpsertWithWhereUniqueWithoutFollowingInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutFollowingDataInput;
  create: UserCreateWithoutFollowingInput;
}

export interface UserUpsertWithoutLikesInput {
  update: UserUpdateWithoutLikesDataInput;
  create: UserCreateWithoutLikesInput;
}

export interface LikeUpsertWithWhereUniqueWithoutPostInput {
  where: LikeWhereUniqueInput;
  update: LikeUpdateWithoutPostDataInput;
  create: LikeCreateWithoutPostInput;
}

export interface PostUpsertWithoutTextInput {
  update: PostUpdateWithoutTextDataInput;
  create: PostCreateWithoutTextInput;
}

export interface TextUpsertWithWhereUniqueWithoutImageFileInput {
  where: TextWhereUniqueInput;
  update: TextUpdateWithoutImageFileDataInput;
  create: TextCreateWithoutImageFileInput;
}

export interface FileUpsertWithWhereUniqueWithoutPostInput {
  where: FileWhereUniqueInput;
  update: FileUpdateWithoutPostDataInput;
  create: FileCreateWithoutPostInput;
}

export interface PostUpsertWithWhereUniqueWithoutUserInput {
  where: PostWhereUniqueInput;
  update: PostUpdateWithoutUserDataInput;
  create: PostCreateWithoutUserInput;
}

export interface UserUpsertWithWhereUniqueWithoutFollowersInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutFollowersDataInput;
  create: UserCreateWithoutFollowersInput;
}

export interface UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput;
  create: UserCreateWithoutPostsInput;
}

export interface PostUpsertWithoutFilesInput {
  update: PostUpdateWithoutFilesDataInput;
  create: PostCreateWithoutFilesInput;
}

export interface FileUpsertWithoutAudioInput {
  update: FileUpdateWithoutAudioDataInput;
  create: FileCreateWithoutAudioInput;
}

export interface AudioUpdateManyMutationInput {
  audio_url?: Maybe<String>;
  audio_img_url?: Maybe<String>;
}

export interface CategoryCreateInput {
  id?: Maybe<ID_Input>;
  cat_name: String;
}

export interface CategoryUpdateInput {
  cat_name?: Maybe<String>;
}

export interface CategoryUpdateManyMutationInput {
  cat_name?: Maybe<String>;
}

export interface CommentCreateInput {
  id?: Maybe<ID_Input>;
  text: String;
  user?: Maybe<UserCreateOneWithoutCommentsInput>;
  post?: Maybe<PostCreateOneWithoutCommentsInput>;
}

export interface CommentUpdateInput {
  text?: Maybe<String>;
  user?: Maybe<UserUpdateOneWithoutCommentsInput>;
  post?: Maybe<PostUpdateOneWithoutCommentsInput>;
}

export interface CommentUpdateManyMutationInput {
  text?: Maybe<String>;
}

export interface FileCreateInput {
  id?: Maybe<ID_Input>;
  url: String;
  post?: Maybe<PostCreateOneWithoutFilesInput>;
  text?: Maybe<TextCreateManyWithoutImageFileInput>;
  video?: Maybe<VideoCreateManyWithoutFilesInput>;
  audio?: Maybe<AudioCreateManyWithoutAudioFileInput>;
  image?: Maybe<ImageCreateManyWithoutFilesInput>;
}

export interface FileUpdateInput {
  url?: Maybe<String>;
  post?: Maybe<PostUpdateOneWithoutFilesInput>;
  text?: Maybe<TextUpdateManyWithoutImageFileInput>;
  video?: Maybe<VideoUpdateManyWithoutFilesInput>;
  audio?: Maybe<AudioUpdateManyWithoutAudioFileInput>;
  image?: Maybe<ImageUpdateManyWithoutFilesInput>;
}

export interface FileUpdateManyMutationInput {
  url?: Maybe<String>;
}

export interface HashtagCreateInput {
  id?: Maybe<ID_Input>;
  tag_name: String;
  post?: Maybe<PostCreateManyWithoutHashtagsInput>;
}

export interface PostCreateManyWithoutHashtagsInput {
  create?: Maybe<
    PostCreateWithoutHashtagsInput[] | PostCreateWithoutHashtagsInput
  >;
  connect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
}

export interface PostCreateWithoutHashtagsInput {
  id?: Maybe<ID_Input>;
  caption?: Maybe<String>;
  location?: Maybe<String>;
  files?: Maybe<FileCreateManyWithoutPostInput>;
  user?: Maybe<UserCreateOneWithoutPostsInput>;
  likes?: Maybe<LikeCreateManyWithoutPostInput>;
  comments?: Maybe<CommentCreateManyWithoutPostInput>;
  category: String;
  relChallenger?: Maybe<UserCreateManyWithoutRelChallengerInput>;
  preChallenger?: Maybe<UserCreateManyWithoutPreChallengerInput>;
  nextChallenger?: Maybe<UserCreateManyWithoutNextChallengerInput>;
  nextPosts?: Maybe<PostCreateManyWithoutPrePostsInput>;
  prePosts?: Maybe<PostCreateManyWithoutNextPostsInput>;
  tagChallenger?: Maybe<UserCreateManyWithoutTagChallengerInput>;
  video?: Maybe<VideoCreateManyWithoutPostInput>;
  image?: Maybe<ImageCreateManyWithoutPostInput>;
  audio?: Maybe<AudioCreateManyWithoutPostInput>;
  text?: Maybe<TextCreateManyWithoutPostInput>;
}

export interface HashtagUpdateInput {
  tag_name?: Maybe<String>;
  post?: Maybe<PostUpdateManyWithoutHashtagsInput>;
}

export interface PostUpdateManyWithoutHashtagsInput {
  create?: Maybe<
    PostCreateWithoutHashtagsInput[] | PostCreateWithoutHashtagsInput
  >;
  delete?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  connect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  set?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  disconnect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  update?: Maybe<
    | PostUpdateWithWhereUniqueWithoutHashtagsInput[]
    | PostUpdateWithWhereUniqueWithoutHashtagsInput
  >;
  upsert?: Maybe<
    | PostUpsertWithWhereUniqueWithoutHashtagsInput[]
    | PostUpsertWithWhereUniqueWithoutHashtagsInput
  >;
  deleteMany?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  updateMany?: Maybe<
    PostUpdateManyWithWhereNestedInput[] | PostUpdateManyWithWhereNestedInput
  >;
}

export interface PostUpdateWithWhereUniqueWithoutHashtagsInput {
  where: PostWhereUniqueInput;
  data: PostUpdateWithoutHashtagsDataInput;
}

export interface PostUpdateWithoutHashtagsDataInput {
  caption?: Maybe<String>;
  location?: Maybe<String>;
  files?: Maybe<FileUpdateManyWithoutPostInput>;
  user?: Maybe<UserUpdateOneWithoutPostsInput>;
  likes?: Maybe<LikeUpdateManyWithoutPostInput>;
  comments?: Maybe<CommentUpdateManyWithoutPostInput>;
  category?: Maybe<String>;
  relChallenger?: Maybe<UserUpdateManyWithoutRelChallengerInput>;
  preChallenger?: Maybe<UserUpdateManyWithoutPreChallengerInput>;
  nextChallenger?: Maybe<UserUpdateManyWithoutNextChallengerInput>;
  nextPosts?: Maybe<PostUpdateManyWithoutPrePostsInput>;
  prePosts?: Maybe<PostUpdateManyWithoutNextPostsInput>;
  tagChallenger?: Maybe<UserUpdateManyWithoutTagChallengerInput>;
  video?: Maybe<VideoUpdateManyWithoutPostInput>;
  image?: Maybe<ImageUpdateManyWithoutPostInput>;
  audio?: Maybe<AudioUpdateManyWithoutPostInput>;
  text?: Maybe<TextUpdateManyWithoutPostInput>;
}

export interface PostUpsertWithWhereUniqueWithoutHashtagsInput {
  where: PostWhereUniqueInput;
  update: PostUpdateWithoutHashtagsDataInput;
  create: PostCreateWithoutHashtagsInput;
}

export interface HashtagUpdateManyMutationInput {
  tag_name?: Maybe<String>;
}

export interface ImageCreateInput {
  id?: Maybe<ID_Input>;
  image_url: String;
  files?: Maybe<FileCreateManyWithoutImageInput>;
  post?: Maybe<PostCreateOneWithoutImageInput>;
}

export interface ImageUpdateInput {
  image_url?: Maybe<String>;
  files?: Maybe<FileUpdateManyWithoutImageInput>;
  post?: Maybe<PostUpdateOneWithoutImageInput>;
}

export interface ImageUpdateManyMutationInput {
  image_url?: Maybe<String>;
}

export interface LikeCreateInput {
  id?: Maybe<ID_Input>;
  user?: Maybe<UserCreateOneWithoutLikesInput>;
  post?: Maybe<PostCreateOneWithoutLikesInput>;
}

export interface LikeUpdateInput {
  user?: Maybe<UserUpdateOneWithoutLikesInput>;
  post?: Maybe<PostUpdateOneWithoutLikesInput>;
}

export interface MessageCreateInput {
  id?: Maybe<ID_Input>;
  text: String;
  from: UserCreateOneInput;
  to: UserCreateOneInput;
  room: RoomCreateOneWithoutMessagesInput;
}

export interface RoomCreateOneWithoutMessagesInput {
  create?: Maybe<RoomCreateWithoutMessagesInput>;
  connect?: Maybe<RoomWhereUniqueInput>;
}

export interface RoomCreateWithoutMessagesInput {
  id?: Maybe<ID_Input>;
  participants?: Maybe<UserCreateManyWithoutRoomsInput>;
}

export interface UserCreateManyWithoutRoomsInput {
  create?: Maybe<UserCreateWithoutRoomsInput[] | UserCreateWithoutRoomsInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserCreateWithoutRoomsInput {
  id?: Maybe<ID_Input>;
  avatar?: Maybe<String>;
  username: String;
  nickname: String;
  passwd: String;
  email: String;
  bio?: Maybe<String>;
  following?: Maybe<UserCreateManyWithoutFollowersInput>;
  followers?: Maybe<UserCreateManyWithoutFollowingInput>;
  posts?: Maybe<PostCreateManyWithoutUserInput>;
  likes?: Maybe<LikeCreateManyWithoutUserInput>;
  comments?: Maybe<CommentCreateManyWithoutUserInput>;
  relChallenger?: Maybe<PostCreateManyWithoutRelChallengerInput>;
  preChallenger?: Maybe<PostCreateManyWithoutPreChallengerInput>;
  nextChallenger?: Maybe<PostCreateManyWithoutNextChallengerInput>;
  tagChallenger?: Maybe<PostCreateManyWithoutTagChallengerInput>;
  loginSecret?: Maybe<String>;
  favCategory?: Maybe<String>;
}

export interface MessageUpdateInput {
  text?: Maybe<String>;
  from?: Maybe<UserUpdateOneRequiredInput>;
  to?: Maybe<UserUpdateOneRequiredInput>;
  room?: Maybe<RoomUpdateOneRequiredWithoutMessagesInput>;
}

export interface RoomUpdateOneRequiredWithoutMessagesInput {
  create?: Maybe<RoomCreateWithoutMessagesInput>;
  update?: Maybe<RoomUpdateWithoutMessagesDataInput>;
  upsert?: Maybe<RoomUpsertWithoutMessagesInput>;
  connect?: Maybe<RoomWhereUniqueInput>;
}

export interface RoomUpdateWithoutMessagesDataInput {
  participants?: Maybe<UserUpdateManyWithoutRoomsInput>;
}

export interface UserUpdateManyWithoutRoomsInput {
  create?: Maybe<UserCreateWithoutRoomsInput[] | UserCreateWithoutRoomsInput>;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutRoomsInput[]
    | UserUpdateWithWhereUniqueWithoutRoomsInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutRoomsInput[]
    | UserUpsertWithWhereUniqueWithoutRoomsInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateWithWhereUniqueWithoutRoomsInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutRoomsDataInput;
}

export interface UserUpdateWithoutRoomsDataInput {
  avatar?: Maybe<String>;
  username?: Maybe<String>;
  nickname?: Maybe<String>;
  passwd?: Maybe<String>;
  email?: Maybe<String>;
  bio?: Maybe<String>;
  following?: Maybe<UserUpdateManyWithoutFollowersInput>;
  followers?: Maybe<UserUpdateManyWithoutFollowingInput>;
  posts?: Maybe<PostUpdateManyWithoutUserInput>;
  likes?: Maybe<LikeUpdateManyWithoutUserInput>;
  comments?: Maybe<CommentUpdateManyWithoutUserInput>;
  relChallenger?: Maybe<PostUpdateManyWithoutRelChallengerInput>;
  preChallenger?: Maybe<PostUpdateManyWithoutPreChallengerInput>;
  nextChallenger?: Maybe<PostUpdateManyWithoutNextChallengerInput>;
  tagChallenger?: Maybe<PostUpdateManyWithoutTagChallengerInput>;
  loginSecret?: Maybe<String>;
  favCategory?: Maybe<String>;
}

export interface UserUpsertWithWhereUniqueWithoutRoomsInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutRoomsDataInput;
  create: UserCreateWithoutRoomsInput;
}

export interface RoomUpsertWithoutMessagesInput {
  update: RoomUpdateWithoutMessagesDataInput;
  create: RoomCreateWithoutMessagesInput;
}

export interface MessageUpdateManyMutationInput {
  text?: Maybe<String>;
}

export interface PostCreateInput {
  id?: Maybe<ID_Input>;
  caption?: Maybe<String>;
  location?: Maybe<String>;
  files?: Maybe<FileCreateManyWithoutPostInput>;
  user?: Maybe<UserCreateOneWithoutPostsInput>;
  likes?: Maybe<LikeCreateManyWithoutPostInput>;
  hashtags?: Maybe<HashtagCreateManyWithoutPostInput>;
  comments?: Maybe<CommentCreateManyWithoutPostInput>;
  category: String;
  relChallenger?: Maybe<UserCreateManyWithoutRelChallengerInput>;
  preChallenger?: Maybe<UserCreateManyWithoutPreChallengerInput>;
  nextChallenger?: Maybe<UserCreateManyWithoutNextChallengerInput>;
  nextPosts?: Maybe<PostCreateManyWithoutPrePostsInput>;
  prePosts?: Maybe<PostCreateManyWithoutNextPostsInput>;
  tagChallenger?: Maybe<UserCreateManyWithoutTagChallengerInput>;
  video?: Maybe<VideoCreateManyWithoutPostInput>;
  image?: Maybe<ImageCreateManyWithoutPostInput>;
  audio?: Maybe<AudioCreateManyWithoutPostInput>;
  text?: Maybe<TextCreateManyWithoutPostInput>;
}

export interface PostUpdateInput {
  caption?: Maybe<String>;
  location?: Maybe<String>;
  files?: Maybe<FileUpdateManyWithoutPostInput>;
  user?: Maybe<UserUpdateOneWithoutPostsInput>;
  likes?: Maybe<LikeUpdateManyWithoutPostInput>;
  hashtags?: Maybe<HashtagUpdateManyWithoutPostInput>;
  comments?: Maybe<CommentUpdateManyWithoutPostInput>;
  category?: Maybe<String>;
  relChallenger?: Maybe<UserUpdateManyWithoutRelChallengerInput>;
  preChallenger?: Maybe<UserUpdateManyWithoutPreChallengerInput>;
  nextChallenger?: Maybe<UserUpdateManyWithoutNextChallengerInput>;
  nextPosts?: Maybe<PostUpdateManyWithoutPrePostsInput>;
  prePosts?: Maybe<PostUpdateManyWithoutNextPostsInput>;
  tagChallenger?: Maybe<UserUpdateManyWithoutTagChallengerInput>;
  video?: Maybe<VideoUpdateManyWithoutPostInput>;
  image?: Maybe<ImageUpdateManyWithoutPostInput>;
  audio?: Maybe<AudioUpdateManyWithoutPostInput>;
  text?: Maybe<TextUpdateManyWithoutPostInput>;
}

export interface PostUpdateManyMutationInput {
  caption?: Maybe<String>;
  location?: Maybe<String>;
  category?: Maybe<String>;
}

export interface RoomCreateInput {
  id?: Maybe<ID_Input>;
  participants?: Maybe<UserCreateManyWithoutRoomsInput>;
  messages?: Maybe<MessageCreateManyWithoutRoomInput>;
}

export interface RoomUpdateInput {
  participants?: Maybe<UserUpdateManyWithoutRoomsInput>;
  messages?: Maybe<MessageUpdateManyWithoutRoomInput>;
}

export interface TextCreateInput {
  id?: Maybe<ID_Input>;
  text_img_url: String;
  content: String;
  imageFile: FileCreateOneWithoutTextInput;
  post?: Maybe<PostCreateOneWithoutTextInput>;
  relay: Boolean;
}

export interface TextUpdateInput {
  text_img_url?: Maybe<String>;
  content?: Maybe<String>;
  imageFile?: Maybe<FileUpdateOneRequiredWithoutTextInput>;
  post?: Maybe<PostUpdateOneWithoutTextInput>;
  relay?: Maybe<Boolean>;
}

export interface TextUpdateManyMutationInput {
  text_img_url?: Maybe<String>;
  content?: Maybe<String>;
  relay?: Maybe<Boolean>;
}

export interface UserUpdateInput {
  avatar?: Maybe<String>;
  username?: Maybe<String>;
  nickname?: Maybe<String>;
  passwd?: Maybe<String>;
  email?: Maybe<String>;
  bio?: Maybe<String>;
  following?: Maybe<UserUpdateManyWithoutFollowersInput>;
  followers?: Maybe<UserUpdateManyWithoutFollowingInput>;
  posts?: Maybe<PostUpdateManyWithoutUserInput>;
  likes?: Maybe<LikeUpdateManyWithoutUserInput>;
  comments?: Maybe<CommentUpdateManyWithoutUserInput>;
  rooms?: Maybe<RoomUpdateManyWithoutParticipantsInput>;
  relChallenger?: Maybe<PostUpdateManyWithoutRelChallengerInput>;
  preChallenger?: Maybe<PostUpdateManyWithoutPreChallengerInput>;
  nextChallenger?: Maybe<PostUpdateManyWithoutNextChallengerInput>;
  tagChallenger?: Maybe<PostUpdateManyWithoutTagChallengerInput>;
  loginSecret?: Maybe<String>;
  favCategory?: Maybe<String>;
}

export interface UserUpdateManyMutationInput {
  avatar?: Maybe<String>;
  username?: Maybe<String>;
  nickname?: Maybe<String>;
  passwd?: Maybe<String>;
  email?: Maybe<String>;
  bio?: Maybe<String>;
  loginSecret?: Maybe<String>;
  favCategory?: Maybe<String>;
}

export interface VideoCreateInput {
  id?: Maybe<ID_Input>;
  video_url: String;
  post?: Maybe<PostCreateOneWithoutVideoInput>;
  files?: Maybe<FileCreateManyWithoutVideoInput>;
}

export interface VideoUpdateInput {
  video_url?: Maybe<String>;
  post?: Maybe<PostUpdateOneWithoutVideoInput>;
  files?: Maybe<FileUpdateManyWithoutVideoInput>;
}

export interface VideoUpdateManyMutationInput {
  video_url?: Maybe<String>;
}

export interface AudioSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<AudioWhereInput>;
  AND?: Maybe<AudioSubscriptionWhereInput[] | AudioSubscriptionWhereInput>;
  OR?: Maybe<AudioSubscriptionWhereInput[] | AudioSubscriptionWhereInput>;
  NOT?: Maybe<AudioSubscriptionWhereInput[] | AudioSubscriptionWhereInput>;
}

export interface CategorySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CategoryWhereInput>;
  AND?: Maybe<
    CategorySubscriptionWhereInput[] | CategorySubscriptionWhereInput
  >;
  OR?: Maybe<CategorySubscriptionWhereInput[] | CategorySubscriptionWhereInput>;
  NOT?: Maybe<
    CategorySubscriptionWhereInput[] | CategorySubscriptionWhereInput
  >;
}

export interface CommentSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CommentWhereInput>;
  AND?: Maybe<CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput>;
  OR?: Maybe<CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput>;
  NOT?: Maybe<CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput>;
}

export interface FileSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<FileWhereInput>;
  AND?: Maybe<FileSubscriptionWhereInput[] | FileSubscriptionWhereInput>;
  OR?: Maybe<FileSubscriptionWhereInput[] | FileSubscriptionWhereInput>;
  NOT?: Maybe<FileSubscriptionWhereInput[] | FileSubscriptionWhereInput>;
}

export interface HashtagSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<HashtagWhereInput>;
  AND?: Maybe<HashtagSubscriptionWhereInput[] | HashtagSubscriptionWhereInput>;
  OR?: Maybe<HashtagSubscriptionWhereInput[] | HashtagSubscriptionWhereInput>;
  NOT?: Maybe<HashtagSubscriptionWhereInput[] | HashtagSubscriptionWhereInput>;
}

export interface ImageSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ImageWhereInput>;
  AND?: Maybe<ImageSubscriptionWhereInput[] | ImageSubscriptionWhereInput>;
  OR?: Maybe<ImageSubscriptionWhereInput[] | ImageSubscriptionWhereInput>;
  NOT?: Maybe<ImageSubscriptionWhereInput[] | ImageSubscriptionWhereInput>;
}

export interface LikeSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<LikeWhereInput>;
  AND?: Maybe<LikeSubscriptionWhereInput[] | LikeSubscriptionWhereInput>;
  OR?: Maybe<LikeSubscriptionWhereInput[] | LikeSubscriptionWhereInput>;
  NOT?: Maybe<LikeSubscriptionWhereInput[] | LikeSubscriptionWhereInput>;
}

export interface MessageSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<MessageWhereInput>;
  AND?: Maybe<MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput>;
  OR?: Maybe<MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput>;
  NOT?: Maybe<MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput>;
}

export interface PostSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PostWhereInput>;
  AND?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
  OR?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
  NOT?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
}

export interface RoomSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<RoomWhereInput>;
  AND?: Maybe<RoomSubscriptionWhereInput[] | RoomSubscriptionWhereInput>;
  OR?: Maybe<RoomSubscriptionWhereInput[] | RoomSubscriptionWhereInput>;
  NOT?: Maybe<RoomSubscriptionWhereInput[] | RoomSubscriptionWhereInput>;
}

export interface TextSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<TextWhereInput>;
  AND?: Maybe<TextSubscriptionWhereInput[] | TextSubscriptionWhereInput>;
  OR?: Maybe<TextSubscriptionWhereInput[] | TextSubscriptionWhereInput>;
  NOT?: Maybe<TextSubscriptionWhereInput[] | TextSubscriptionWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface VideoSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<VideoWhereInput>;
  AND?: Maybe<VideoSubscriptionWhereInput[] | VideoSubscriptionWhereInput>;
  OR?: Maybe<VideoSubscriptionWhereInput[] | VideoSubscriptionWhereInput>;
  NOT?: Maybe<VideoSubscriptionWhereInput[] | VideoSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Audio {
  id: ID_Output;
  audio_url: String;
  audio_img_url: String;
  createdAt: DateTimeOutput;
}

export interface AudioPromise extends Promise<Audio>, Fragmentable {
  id: () => Promise<ID_Output>;
  audio_url: () => Promise<String>;
  audio_img_url: () => Promise<String>;
  audioFile: <T = FilePromise>() => T;
  post: <T = PostPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface AudioSubscription
  extends Promise<AsyncIterator<Audio>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  audio_url: () => Promise<AsyncIterator<String>>;
  audio_img_url: () => Promise<AsyncIterator<String>>;
  audioFile: <T = FileSubscription>() => T;
  post: <T = PostSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AudioNullablePromise
  extends Promise<Audio | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  audio_url: () => Promise<String>;
  audio_img_url: () => Promise<String>;
  audioFile: <T = FilePromise>() => T;
  post: <T = PostPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface File {
  id: ID_Output;
  url: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface FilePromise extends Promise<File>, Fragmentable {
  id: () => Promise<ID_Output>;
  url: () => Promise<String>;
  post: <T = PostPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  text: <T = FragmentableArray<Text>>(args?: {
    where?: TextWhereInput;
    orderBy?: TextOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  video: <T = FragmentableArray<Video>>(args?: {
    where?: VideoWhereInput;
    orderBy?: VideoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  audio: <T = FragmentableArray<Audio>>(args?: {
    where?: AudioWhereInput;
    orderBy?: AudioOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  image: <T = FragmentableArray<Image>>(args?: {
    where?: ImageWhereInput;
    orderBy?: ImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface FileSubscription
  extends Promise<AsyncIterator<File>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  url: () => Promise<AsyncIterator<String>>;
  post: <T = PostSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  text: <T = Promise<AsyncIterator<TextSubscription>>>(args?: {
    where?: TextWhereInput;
    orderBy?: TextOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  video: <T = Promise<AsyncIterator<VideoSubscription>>>(args?: {
    where?: VideoWhereInput;
    orderBy?: VideoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  audio: <T = Promise<AsyncIterator<AudioSubscription>>>(args?: {
    where?: AudioWhereInput;
    orderBy?: AudioOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  image: <T = Promise<AsyncIterator<ImageSubscription>>>(args?: {
    where?: ImageWhereInput;
    orderBy?: ImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface FileNullablePromise
  extends Promise<File | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  url: () => Promise<String>;
  post: <T = PostPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  text: <T = FragmentableArray<Text>>(args?: {
    where?: TextWhereInput;
    orderBy?: TextOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  video: <T = FragmentableArray<Video>>(args?: {
    where?: VideoWhereInput;
    orderBy?: VideoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  audio: <T = FragmentableArray<Audio>>(args?: {
    where?: AudioWhereInput;
    orderBy?: AudioOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  image: <T = FragmentableArray<Image>>(args?: {
    where?: ImageWhereInput;
    orderBy?: ImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Post {
  id: ID_Output;
  caption?: String;
  location?: String;
  category: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface PostPromise extends Promise<Post>, Fragmentable {
  id: () => Promise<ID_Output>;
  caption: () => Promise<String>;
  location: () => Promise<String>;
  files: <T = FragmentableArray<File>>(args?: {
    where?: FileWhereInput;
    orderBy?: FileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  user: <T = UserPromise>() => T;
  likes: <T = FragmentableArray<Like>>(args?: {
    where?: LikeWhereInput;
    orderBy?: LikeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  hashtags: <T = FragmentableArray<Hashtag>>(args?: {
    where?: HashtagWhereInput;
    orderBy?: HashtagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  category: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  relChallenger: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  preChallenger: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  nextChallenger: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  nextPosts: <T = FragmentableArray<Post>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  prePosts: <T = FragmentableArray<Post>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  tagChallenger: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  video: <T = FragmentableArray<Video>>(args?: {
    where?: VideoWhereInput;
    orderBy?: VideoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  image: <T = FragmentableArray<Image>>(args?: {
    where?: ImageWhereInput;
    orderBy?: ImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  audio: <T = FragmentableArray<Audio>>(args?: {
    where?: AudioWhereInput;
    orderBy?: AudioOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  text: <T = FragmentableArray<Text>>(args?: {
    where?: TextWhereInput;
    orderBy?: TextOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface PostSubscription
  extends Promise<AsyncIterator<Post>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  caption: () => Promise<AsyncIterator<String>>;
  location: () => Promise<AsyncIterator<String>>;
  files: <T = Promise<AsyncIterator<FileSubscription>>>(args?: {
    where?: FileWhereInput;
    orderBy?: FileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  user: <T = UserSubscription>() => T;
  likes: <T = Promise<AsyncIterator<LikeSubscription>>>(args?: {
    where?: LikeWhereInput;
    orderBy?: LikeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  hashtags: <T = Promise<AsyncIterator<HashtagSubscription>>>(args?: {
    where?: HashtagWhereInput;
    orderBy?: HashtagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  comments: <T = Promise<AsyncIterator<CommentSubscription>>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  category: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  relChallenger: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  preChallenger: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  nextChallenger: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  nextPosts: <T = Promise<AsyncIterator<PostSubscription>>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  prePosts: <T = Promise<AsyncIterator<PostSubscription>>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  tagChallenger: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  video: <T = Promise<AsyncIterator<VideoSubscription>>>(args?: {
    where?: VideoWhereInput;
    orderBy?: VideoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  image: <T = Promise<AsyncIterator<ImageSubscription>>>(args?: {
    where?: ImageWhereInput;
    orderBy?: ImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  audio: <T = Promise<AsyncIterator<AudioSubscription>>>(args?: {
    where?: AudioWhereInput;
    orderBy?: AudioOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  text: <T = Promise<AsyncIterator<TextSubscription>>>(args?: {
    where?: TextWhereInput;
    orderBy?: TextOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface PostNullablePromise
  extends Promise<Post | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  caption: () => Promise<String>;
  location: () => Promise<String>;
  files: <T = FragmentableArray<File>>(args?: {
    where?: FileWhereInput;
    orderBy?: FileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  user: <T = UserPromise>() => T;
  likes: <T = FragmentableArray<Like>>(args?: {
    where?: LikeWhereInput;
    orderBy?: LikeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  hashtags: <T = FragmentableArray<Hashtag>>(args?: {
    where?: HashtagWhereInput;
    orderBy?: HashtagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  category: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  relChallenger: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  preChallenger: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  nextChallenger: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  nextPosts: <T = FragmentableArray<Post>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  prePosts: <T = FragmentableArray<Post>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  tagChallenger: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  video: <T = FragmentableArray<Video>>(args?: {
    where?: VideoWhereInput;
    orderBy?: VideoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  image: <T = FragmentableArray<Image>>(args?: {
    where?: ImageWhereInput;
    orderBy?: ImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  audio: <T = FragmentableArray<Audio>>(args?: {
    where?: AudioWhereInput;
    orderBy?: AudioOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  text: <T = FragmentableArray<Text>>(args?: {
    where?: TextWhereInput;
    orderBy?: TextOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface User {
  id: ID_Output;
  avatar?: String;
  username: String;
  nickname: String;
  passwd: String;
  email: String;
  bio?: String;
  loginSecret?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  favCategory?: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  avatar: () => Promise<String>;
  username: () => Promise<String>;
  nickname: () => Promise<String>;
  passwd: () => Promise<String>;
  email: () => Promise<String>;
  bio: () => Promise<String>;
  following: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  followers: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  posts: <T = FragmentableArray<Post>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  likes: <T = FragmentableArray<Like>>(args?: {
    where?: LikeWhereInput;
    orderBy?: LikeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  rooms: <T = FragmentableArray<Room>>(args?: {
    where?: RoomWhereInput;
    orderBy?: RoomOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  relChallenger: <T = FragmentableArray<Post>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  preChallenger: <T = FragmentableArray<Post>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  nextChallenger: <T = FragmentableArray<Post>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  tagChallenger: <T = FragmentableArray<Post>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  loginSecret: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  favCategory: () => Promise<String>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  avatar: () => Promise<AsyncIterator<String>>;
  username: () => Promise<AsyncIterator<String>>;
  nickname: () => Promise<AsyncIterator<String>>;
  passwd: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  bio: () => Promise<AsyncIterator<String>>;
  following: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  followers: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  posts: <T = Promise<AsyncIterator<PostSubscription>>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  likes: <T = Promise<AsyncIterator<LikeSubscription>>>(args?: {
    where?: LikeWhereInput;
    orderBy?: LikeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  comments: <T = Promise<AsyncIterator<CommentSubscription>>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  rooms: <T = Promise<AsyncIterator<RoomSubscription>>>(args?: {
    where?: RoomWhereInput;
    orderBy?: RoomOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  relChallenger: <T = Promise<AsyncIterator<PostSubscription>>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  preChallenger: <T = Promise<AsyncIterator<PostSubscription>>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  nextChallenger: <T = Promise<AsyncIterator<PostSubscription>>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  tagChallenger: <T = Promise<AsyncIterator<PostSubscription>>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  loginSecret: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  favCategory: () => Promise<AsyncIterator<String>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  avatar: () => Promise<String>;
  username: () => Promise<String>;
  nickname: () => Promise<String>;
  passwd: () => Promise<String>;
  email: () => Promise<String>;
  bio: () => Promise<String>;
  following: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  followers: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  posts: <T = FragmentableArray<Post>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  likes: <T = FragmentableArray<Like>>(args?: {
    where?: LikeWhereInput;
    orderBy?: LikeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  rooms: <T = FragmentableArray<Room>>(args?: {
    where?: RoomWhereInput;
    orderBy?: RoomOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  relChallenger: <T = FragmentableArray<Post>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  preChallenger: <T = FragmentableArray<Post>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  nextChallenger: <T = FragmentableArray<Post>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  tagChallenger: <T = FragmentableArray<Post>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  loginSecret: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  favCategory: () => Promise<String>;
}

export interface Like {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface LikePromise extends Promise<Like>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  post: <T = PostPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface LikeSubscription
  extends Promise<AsyncIterator<Like>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  post: <T = PostSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface LikeNullablePromise
  extends Promise<Like | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  post: <T = PostPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Comment {
  id: ID_Output;
  text: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface CommentPromise extends Promise<Comment>, Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
  user: <T = UserPromise>() => T;
  post: <T = PostPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CommentSubscription
  extends Promise<AsyncIterator<Comment>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  text: () => Promise<AsyncIterator<String>>;
  user: <T = UserSubscription>() => T;
  post: <T = PostSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CommentNullablePromise
  extends Promise<Comment | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
  user: <T = UserPromise>() => T;
  post: <T = PostPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Room {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface RoomPromise extends Promise<Room>, Fragmentable {
  id: () => Promise<ID_Output>;
  participants: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  messages: <T = FragmentableArray<Message>>(args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface RoomSubscription
  extends Promise<AsyncIterator<Room>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  participants: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  messages: <T = Promise<AsyncIterator<MessageSubscription>>>(args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface RoomNullablePromise
  extends Promise<Room | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  participants: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  messages: <T = FragmentableArray<Message>>(args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Message {
  id: ID_Output;
  text: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface MessagePromise extends Promise<Message>, Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
  from: <T = UserPromise>() => T;
  to: <T = UserPromise>() => T;
  room: <T = RoomPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface MessageSubscription
  extends Promise<AsyncIterator<Message>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  text: () => Promise<AsyncIterator<String>>;
  from: <T = UserSubscription>() => T;
  to: <T = UserSubscription>() => T;
  room: <T = RoomSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface MessageNullablePromise
  extends Promise<Message | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
  from: <T = UserPromise>() => T;
  to: <T = UserPromise>() => T;
  room: <T = RoomPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Hashtag {
  id: ID_Output;
  tag_name: String;
}

export interface HashtagPromise extends Promise<Hashtag>, Fragmentable {
  id: () => Promise<ID_Output>;
  tag_name: () => Promise<String>;
  post: <T = FragmentableArray<Post>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface HashtagSubscription
  extends Promise<AsyncIterator<Hashtag>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  tag_name: () => Promise<AsyncIterator<String>>;
  post: <T = Promise<AsyncIterator<PostSubscription>>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface HashtagNullablePromise
  extends Promise<Hashtag | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  tag_name: () => Promise<String>;
  post: <T = FragmentableArray<Post>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Video {
  id: ID_Output;
  video_url: String;
  createdAt: DateTimeOutput;
}

export interface VideoPromise extends Promise<Video>, Fragmentable {
  id: () => Promise<ID_Output>;
  video_url: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  post: <T = PostPromise>() => T;
  files: <T = FragmentableArray<File>>(args?: {
    where?: FileWhereInput;
    orderBy?: FileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface VideoSubscription
  extends Promise<AsyncIterator<Video>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  video_url: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  post: <T = PostSubscription>() => T;
  files: <T = Promise<AsyncIterator<FileSubscription>>>(args?: {
    where?: FileWhereInput;
    orderBy?: FileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface VideoNullablePromise
  extends Promise<Video | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  video_url: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  post: <T = PostPromise>() => T;
  files: <T = FragmentableArray<File>>(args?: {
    where?: FileWhereInput;
    orderBy?: FileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Image {
  id: ID_Output;
  image_url: String;
  createdAt: DateTimeOutput;
}

export interface ImagePromise extends Promise<Image>, Fragmentable {
  id: () => Promise<ID_Output>;
  image_url: () => Promise<String>;
  files: <T = FragmentableArray<File>>(args?: {
    where?: FileWhereInput;
    orderBy?: FileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  post: <T = PostPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface ImageSubscription
  extends Promise<AsyncIterator<Image>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  image_url: () => Promise<AsyncIterator<String>>;
  files: <T = Promise<AsyncIterator<FileSubscription>>>(args?: {
    where?: FileWhereInput;
    orderBy?: FileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  post: <T = PostSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ImageNullablePromise
  extends Promise<Image | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  image_url: () => Promise<String>;
  files: <T = FragmentableArray<File>>(args?: {
    where?: FileWhereInput;
    orderBy?: FileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  post: <T = PostPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface Text {
  id: ID_Output;
  text_img_url: String;
  content: String;
  relay: Boolean;
  createdAt: DateTimeOutput;
}

export interface TextPromise extends Promise<Text>, Fragmentable {
  id: () => Promise<ID_Output>;
  text_img_url: () => Promise<String>;
  content: () => Promise<String>;
  imageFile: <T = FilePromise>() => T;
  post: <T = PostPromise>() => T;
  relay: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface TextSubscription
  extends Promise<AsyncIterator<Text>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  text_img_url: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
  imageFile: <T = FileSubscription>() => T;
  post: <T = PostSubscription>() => T;
  relay: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface TextNullablePromise
  extends Promise<Text | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  text_img_url: () => Promise<String>;
  content: () => Promise<String>;
  imageFile: <T = FilePromise>() => T;
  post: <T = PostPromise>() => T;
  relay: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface AudioConnection {
  pageInfo: PageInfo;
  edges: AudioEdge[];
}

export interface AudioConnectionPromise
  extends Promise<AudioConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AudioEdge>>() => T;
  aggregate: <T = AggregateAudioPromise>() => T;
}

export interface AudioConnectionSubscription
  extends Promise<AsyncIterator<AudioConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AudioEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAudioSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AudioEdge {
  node: Audio;
  cursor: String;
}

export interface AudioEdgePromise extends Promise<AudioEdge>, Fragmentable {
  node: <T = AudioPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AudioEdgeSubscription
  extends Promise<AsyncIterator<AudioEdge>>,
    Fragmentable {
  node: <T = AudioSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAudio {
  count: Int;
}

export interface AggregateAudioPromise
  extends Promise<AggregateAudio>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAudioSubscription
  extends Promise<AsyncIterator<AggregateAudio>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Category {
  id: ID_Output;
  cat_name: String;
}

export interface CategoryPromise extends Promise<Category>, Fragmentable {
  id: () => Promise<ID_Output>;
  cat_name: () => Promise<String>;
}

export interface CategorySubscription
  extends Promise<AsyncIterator<Category>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  cat_name: () => Promise<AsyncIterator<String>>;
}

export interface CategoryNullablePromise
  extends Promise<Category | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  cat_name: () => Promise<String>;
}

export interface CategoryConnection {
  pageInfo: PageInfo;
  edges: CategoryEdge[];
}

export interface CategoryConnectionPromise
  extends Promise<CategoryConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CategoryEdge>>() => T;
  aggregate: <T = AggregateCategoryPromise>() => T;
}

export interface CategoryConnectionSubscription
  extends Promise<AsyncIterator<CategoryConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CategoryEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCategorySubscription>() => T;
}

export interface CategoryEdge {
  node: Category;
  cursor: String;
}

export interface CategoryEdgePromise
  extends Promise<CategoryEdge>,
    Fragmentable {
  node: <T = CategoryPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CategoryEdgeSubscription
  extends Promise<AsyncIterator<CategoryEdge>>,
    Fragmentable {
  node: <T = CategorySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCategory {
  count: Int;
}

export interface AggregateCategoryPromise
  extends Promise<AggregateCategory>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCategorySubscription
  extends Promise<AsyncIterator<AggregateCategory>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CommentConnection {
  pageInfo: PageInfo;
  edges: CommentEdge[];
}

export interface CommentConnectionPromise
  extends Promise<CommentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CommentEdge>>() => T;
  aggregate: <T = AggregateCommentPromise>() => T;
}

export interface CommentConnectionSubscription
  extends Promise<AsyncIterator<CommentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CommentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCommentSubscription>() => T;
}

export interface CommentEdge {
  node: Comment;
  cursor: String;
}

export interface CommentEdgePromise extends Promise<CommentEdge>, Fragmentable {
  node: <T = CommentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CommentEdgeSubscription
  extends Promise<AsyncIterator<CommentEdge>>,
    Fragmentable {
  node: <T = CommentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateComment {
  count: Int;
}

export interface AggregateCommentPromise
  extends Promise<AggregateComment>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCommentSubscription
  extends Promise<AsyncIterator<AggregateComment>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface FileConnection {
  pageInfo: PageInfo;
  edges: FileEdge[];
}

export interface FileConnectionPromise
  extends Promise<FileConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<FileEdge>>() => T;
  aggregate: <T = AggregateFilePromise>() => T;
}

export interface FileConnectionSubscription
  extends Promise<AsyncIterator<FileConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<FileEdgeSubscription>>>() => T;
  aggregate: <T = AggregateFileSubscription>() => T;
}

export interface FileEdge {
  node: File;
  cursor: String;
}

export interface FileEdgePromise extends Promise<FileEdge>, Fragmentable {
  node: <T = FilePromise>() => T;
  cursor: () => Promise<String>;
}

export interface FileEdgeSubscription
  extends Promise<AsyncIterator<FileEdge>>,
    Fragmentable {
  node: <T = FileSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateFile {
  count: Int;
}

export interface AggregateFilePromise
  extends Promise<AggregateFile>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateFileSubscription
  extends Promise<AsyncIterator<AggregateFile>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface HashtagConnection {
  pageInfo: PageInfo;
  edges: HashtagEdge[];
}

export interface HashtagConnectionPromise
  extends Promise<HashtagConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<HashtagEdge>>() => T;
  aggregate: <T = AggregateHashtagPromise>() => T;
}

export interface HashtagConnectionSubscription
  extends Promise<AsyncIterator<HashtagConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<HashtagEdgeSubscription>>>() => T;
  aggregate: <T = AggregateHashtagSubscription>() => T;
}

export interface HashtagEdge {
  node: Hashtag;
  cursor: String;
}

export interface HashtagEdgePromise extends Promise<HashtagEdge>, Fragmentable {
  node: <T = HashtagPromise>() => T;
  cursor: () => Promise<String>;
}

export interface HashtagEdgeSubscription
  extends Promise<AsyncIterator<HashtagEdge>>,
    Fragmentable {
  node: <T = HashtagSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateHashtag {
  count: Int;
}

export interface AggregateHashtagPromise
  extends Promise<AggregateHashtag>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateHashtagSubscription
  extends Promise<AsyncIterator<AggregateHashtag>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ImageConnection {
  pageInfo: PageInfo;
  edges: ImageEdge[];
}

export interface ImageConnectionPromise
  extends Promise<ImageConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ImageEdge>>() => T;
  aggregate: <T = AggregateImagePromise>() => T;
}

export interface ImageConnectionSubscription
  extends Promise<AsyncIterator<ImageConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ImageEdgeSubscription>>>() => T;
  aggregate: <T = AggregateImageSubscription>() => T;
}

export interface ImageEdge {
  node: Image;
  cursor: String;
}

export interface ImageEdgePromise extends Promise<ImageEdge>, Fragmentable {
  node: <T = ImagePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ImageEdgeSubscription
  extends Promise<AsyncIterator<ImageEdge>>,
    Fragmentable {
  node: <T = ImageSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateImage {
  count: Int;
}

export interface AggregateImagePromise
  extends Promise<AggregateImage>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateImageSubscription
  extends Promise<AsyncIterator<AggregateImage>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface LikeConnection {
  pageInfo: PageInfo;
  edges: LikeEdge[];
}

export interface LikeConnectionPromise
  extends Promise<LikeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<LikeEdge>>() => T;
  aggregate: <T = AggregateLikePromise>() => T;
}

export interface LikeConnectionSubscription
  extends Promise<AsyncIterator<LikeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<LikeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateLikeSubscription>() => T;
}

export interface LikeEdge {
  node: Like;
  cursor: String;
}

export interface LikeEdgePromise extends Promise<LikeEdge>, Fragmentable {
  node: <T = LikePromise>() => T;
  cursor: () => Promise<String>;
}

export interface LikeEdgeSubscription
  extends Promise<AsyncIterator<LikeEdge>>,
    Fragmentable {
  node: <T = LikeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateLike {
  count: Int;
}

export interface AggregateLikePromise
  extends Promise<AggregateLike>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateLikeSubscription
  extends Promise<AsyncIterator<AggregateLike>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface MessageConnection {
  pageInfo: PageInfo;
  edges: MessageEdge[];
}

export interface MessageConnectionPromise
  extends Promise<MessageConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MessageEdge>>() => T;
  aggregate: <T = AggregateMessagePromise>() => T;
}

export interface MessageConnectionSubscription
  extends Promise<AsyncIterator<MessageConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MessageEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMessageSubscription>() => T;
}

export interface MessageEdge {
  node: Message;
  cursor: String;
}

export interface MessageEdgePromise extends Promise<MessageEdge>, Fragmentable {
  node: <T = MessagePromise>() => T;
  cursor: () => Promise<String>;
}

export interface MessageEdgeSubscription
  extends Promise<AsyncIterator<MessageEdge>>,
    Fragmentable {
  node: <T = MessageSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateMessage {
  count: Int;
}

export interface AggregateMessagePromise
  extends Promise<AggregateMessage>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMessageSubscription
  extends Promise<AsyncIterator<AggregateMessage>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PostConnection {
  pageInfo: PageInfo;
  edges: PostEdge[];
}

export interface PostConnectionPromise
  extends Promise<PostConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PostEdge>>() => T;
  aggregate: <T = AggregatePostPromise>() => T;
}

export interface PostConnectionSubscription
  extends Promise<AsyncIterator<PostConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PostEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePostSubscription>() => T;
}

export interface PostEdge {
  node: Post;
  cursor: String;
}

export interface PostEdgePromise extends Promise<PostEdge>, Fragmentable {
  node: <T = PostPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PostEdgeSubscription
  extends Promise<AsyncIterator<PostEdge>>,
    Fragmentable {
  node: <T = PostSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePost {
  count: Int;
}

export interface AggregatePostPromise
  extends Promise<AggregatePost>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePostSubscription
  extends Promise<AsyncIterator<AggregatePost>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface RoomConnection {
  pageInfo: PageInfo;
  edges: RoomEdge[];
}

export interface RoomConnectionPromise
  extends Promise<RoomConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<RoomEdge>>() => T;
  aggregate: <T = AggregateRoomPromise>() => T;
}

export interface RoomConnectionSubscription
  extends Promise<AsyncIterator<RoomConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<RoomEdgeSubscription>>>() => T;
  aggregate: <T = AggregateRoomSubscription>() => T;
}

export interface RoomEdge {
  node: Room;
  cursor: String;
}

export interface RoomEdgePromise extends Promise<RoomEdge>, Fragmentable {
  node: <T = RoomPromise>() => T;
  cursor: () => Promise<String>;
}

export interface RoomEdgeSubscription
  extends Promise<AsyncIterator<RoomEdge>>,
    Fragmentable {
  node: <T = RoomSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateRoom {
  count: Int;
}

export interface AggregateRoomPromise
  extends Promise<AggregateRoom>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateRoomSubscription
  extends Promise<AsyncIterator<AggregateRoom>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface TextConnection {
  pageInfo: PageInfo;
  edges: TextEdge[];
}

export interface TextConnectionPromise
  extends Promise<TextConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TextEdge>>() => T;
  aggregate: <T = AggregateTextPromise>() => T;
}

export interface TextConnectionSubscription
  extends Promise<AsyncIterator<TextConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TextEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTextSubscription>() => T;
}

export interface TextEdge {
  node: Text;
  cursor: String;
}

export interface TextEdgePromise extends Promise<TextEdge>, Fragmentable {
  node: <T = TextPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TextEdgeSubscription
  extends Promise<AsyncIterator<TextEdge>>,
    Fragmentable {
  node: <T = TextSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateText {
  count: Int;
}

export interface AggregateTextPromise
  extends Promise<AggregateText>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTextSubscription
  extends Promise<AsyncIterator<AggregateText>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface VideoConnection {
  pageInfo: PageInfo;
  edges: VideoEdge[];
}

export interface VideoConnectionPromise
  extends Promise<VideoConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<VideoEdge>>() => T;
  aggregate: <T = AggregateVideoPromise>() => T;
}

export interface VideoConnectionSubscription
  extends Promise<AsyncIterator<VideoConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<VideoEdgeSubscription>>>() => T;
  aggregate: <T = AggregateVideoSubscription>() => T;
}

export interface VideoEdge {
  node: Video;
  cursor: String;
}

export interface VideoEdgePromise extends Promise<VideoEdge>, Fragmentable {
  node: <T = VideoPromise>() => T;
  cursor: () => Promise<String>;
}

export interface VideoEdgeSubscription
  extends Promise<AsyncIterator<VideoEdge>>,
    Fragmentable {
  node: <T = VideoSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateVideo {
  count: Int;
}

export interface AggregateVideoPromise
  extends Promise<AggregateVideo>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateVideoSubscription
  extends Promise<AsyncIterator<AggregateVideo>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AudioSubscriptionPayload {
  mutation: MutationType;
  node: Audio;
  updatedFields: String[];
  previousValues: AudioPreviousValues;
}

export interface AudioSubscriptionPayloadPromise
  extends Promise<AudioSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AudioPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AudioPreviousValuesPromise>() => T;
}

export interface AudioSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AudioSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AudioSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AudioPreviousValuesSubscription>() => T;
}

export interface AudioPreviousValues {
  id: ID_Output;
  audio_url: String;
  audio_img_url: String;
  createdAt: DateTimeOutput;
}

export interface AudioPreviousValuesPromise
  extends Promise<AudioPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  audio_url: () => Promise<String>;
  audio_img_url: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface AudioPreviousValuesSubscription
  extends Promise<AsyncIterator<AudioPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  audio_url: () => Promise<AsyncIterator<String>>;
  audio_img_url: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CategorySubscriptionPayload {
  mutation: MutationType;
  node: Category;
  updatedFields: String[];
  previousValues: CategoryPreviousValues;
}

export interface CategorySubscriptionPayloadPromise
  extends Promise<CategorySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CategoryPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CategoryPreviousValuesPromise>() => T;
}

export interface CategorySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CategorySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CategorySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CategoryPreviousValuesSubscription>() => T;
}

export interface CategoryPreviousValues {
  id: ID_Output;
  cat_name: String;
}

export interface CategoryPreviousValuesPromise
  extends Promise<CategoryPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  cat_name: () => Promise<String>;
}

export interface CategoryPreviousValuesSubscription
  extends Promise<AsyncIterator<CategoryPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  cat_name: () => Promise<AsyncIterator<String>>;
}

export interface CommentSubscriptionPayload {
  mutation: MutationType;
  node: Comment;
  updatedFields: String[];
  previousValues: CommentPreviousValues;
}

export interface CommentSubscriptionPayloadPromise
  extends Promise<CommentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CommentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CommentPreviousValuesPromise>() => T;
}

export interface CommentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CommentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CommentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CommentPreviousValuesSubscription>() => T;
}

export interface CommentPreviousValues {
  id: ID_Output;
  text: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface CommentPreviousValuesPromise
  extends Promise<CommentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CommentPreviousValuesSubscription
  extends Promise<AsyncIterator<CommentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  text: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface FileSubscriptionPayload {
  mutation: MutationType;
  node: File;
  updatedFields: String[];
  previousValues: FilePreviousValues;
}

export interface FileSubscriptionPayloadPromise
  extends Promise<FileSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = FilePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = FilePreviousValuesPromise>() => T;
}

export interface FileSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<FileSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = FileSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = FilePreviousValuesSubscription>() => T;
}

export interface FilePreviousValues {
  id: ID_Output;
  url: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface FilePreviousValuesPromise
  extends Promise<FilePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  url: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface FilePreviousValuesSubscription
  extends Promise<AsyncIterator<FilePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  url: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface HashtagSubscriptionPayload {
  mutation: MutationType;
  node: Hashtag;
  updatedFields: String[];
  previousValues: HashtagPreviousValues;
}

export interface HashtagSubscriptionPayloadPromise
  extends Promise<HashtagSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = HashtagPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = HashtagPreviousValuesPromise>() => T;
}

export interface HashtagSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<HashtagSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = HashtagSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = HashtagPreviousValuesSubscription>() => T;
}

export interface HashtagPreviousValues {
  id: ID_Output;
  tag_name: String;
}

export interface HashtagPreviousValuesPromise
  extends Promise<HashtagPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  tag_name: () => Promise<String>;
}

export interface HashtagPreviousValuesSubscription
  extends Promise<AsyncIterator<HashtagPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  tag_name: () => Promise<AsyncIterator<String>>;
}

export interface ImageSubscriptionPayload {
  mutation: MutationType;
  node: Image;
  updatedFields: String[];
  previousValues: ImagePreviousValues;
}

export interface ImageSubscriptionPayloadPromise
  extends Promise<ImageSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ImagePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ImagePreviousValuesPromise>() => T;
}

export interface ImageSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ImageSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ImageSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ImagePreviousValuesSubscription>() => T;
}

export interface ImagePreviousValues {
  id: ID_Output;
  image_url: String;
  createdAt: DateTimeOutput;
}

export interface ImagePreviousValuesPromise
  extends Promise<ImagePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  image_url: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface ImagePreviousValuesSubscription
  extends Promise<AsyncIterator<ImagePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  image_url: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface LikeSubscriptionPayload {
  mutation: MutationType;
  node: Like;
  updatedFields: String[];
  previousValues: LikePreviousValues;
}

export interface LikeSubscriptionPayloadPromise
  extends Promise<LikeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = LikePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = LikePreviousValuesPromise>() => T;
}

export interface LikeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<LikeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = LikeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = LikePreviousValuesSubscription>() => T;
}

export interface LikePreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface LikePreviousValuesPromise
  extends Promise<LikePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface LikePreviousValuesSubscription
  extends Promise<AsyncIterator<LikePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface MessageSubscriptionPayload {
  mutation: MutationType;
  node: Message;
  updatedFields: String[];
  previousValues: MessagePreviousValues;
}

export interface MessageSubscriptionPayloadPromise
  extends Promise<MessageSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MessagePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MessagePreviousValuesPromise>() => T;
}

export interface MessageSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MessageSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MessageSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MessagePreviousValuesSubscription>() => T;
}

export interface MessagePreviousValues {
  id: ID_Output;
  text: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface MessagePreviousValuesPromise
  extends Promise<MessagePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface MessagePreviousValuesSubscription
  extends Promise<AsyncIterator<MessagePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  text: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PostSubscriptionPayload {
  mutation: MutationType;
  node: Post;
  updatedFields: String[];
  previousValues: PostPreviousValues;
}

export interface PostSubscriptionPayloadPromise
  extends Promise<PostSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PostPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PostPreviousValuesPromise>() => T;
}

export interface PostSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PostSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PostSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PostPreviousValuesSubscription>() => T;
}

export interface PostPreviousValues {
  id: ID_Output;
  caption?: String;
  location?: String;
  category: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface PostPreviousValuesPromise
  extends Promise<PostPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  caption: () => Promise<String>;
  location: () => Promise<String>;
  category: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PostPreviousValuesSubscription
  extends Promise<AsyncIterator<PostPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  caption: () => Promise<AsyncIterator<String>>;
  location: () => Promise<AsyncIterator<String>>;
  category: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface RoomSubscriptionPayload {
  mutation: MutationType;
  node: Room;
  updatedFields: String[];
  previousValues: RoomPreviousValues;
}

export interface RoomSubscriptionPayloadPromise
  extends Promise<RoomSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = RoomPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = RoomPreviousValuesPromise>() => T;
}

export interface RoomSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<RoomSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = RoomSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = RoomPreviousValuesSubscription>() => T;
}

export interface RoomPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface RoomPreviousValuesPromise
  extends Promise<RoomPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface RoomPreviousValuesSubscription
  extends Promise<AsyncIterator<RoomPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface TextSubscriptionPayload {
  mutation: MutationType;
  node: Text;
  updatedFields: String[];
  previousValues: TextPreviousValues;
}

export interface TextSubscriptionPayloadPromise
  extends Promise<TextSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TextPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TextPreviousValuesPromise>() => T;
}

export interface TextSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TextSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TextSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TextPreviousValuesSubscription>() => T;
}

export interface TextPreviousValues {
  id: ID_Output;
  text_img_url: String;
  content: String;
  relay: Boolean;
  createdAt: DateTimeOutput;
}

export interface TextPreviousValuesPromise
  extends Promise<TextPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  text_img_url: () => Promise<String>;
  content: () => Promise<String>;
  relay: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface TextPreviousValuesSubscription
  extends Promise<AsyncIterator<TextPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  text_img_url: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
  relay: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  avatar?: String;
  username: String;
  nickname: String;
  passwd: String;
  email: String;
  bio?: String;
  loginSecret?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  favCategory?: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  avatar: () => Promise<String>;
  username: () => Promise<String>;
  nickname: () => Promise<String>;
  passwd: () => Promise<String>;
  email: () => Promise<String>;
  bio: () => Promise<String>;
  loginSecret: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  favCategory: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  avatar: () => Promise<AsyncIterator<String>>;
  username: () => Promise<AsyncIterator<String>>;
  nickname: () => Promise<AsyncIterator<String>>;
  passwd: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  bio: () => Promise<AsyncIterator<String>>;
  loginSecret: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  favCategory: () => Promise<AsyncIterator<String>>;
}

export interface VideoSubscriptionPayload {
  mutation: MutationType;
  node: Video;
  updatedFields: String[];
  previousValues: VideoPreviousValues;
}

export interface VideoSubscriptionPayloadPromise
  extends Promise<VideoSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = VideoPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = VideoPreviousValuesPromise>() => T;
}

export interface VideoSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<VideoSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = VideoSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = VideoPreviousValuesSubscription>() => T;
}

export interface VideoPreviousValues {
  id: ID_Output;
  video_url: String;
  createdAt: DateTimeOutput;
}

export interface VideoPreviousValuesPromise
  extends Promise<VideoPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  video_url: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface VideoPreviousValuesSubscription
  extends Promise<AsyncIterator<VideoPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  video_url: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Post",
    embedded: false
  },
  {
    name: "File",
    embedded: false
  },
  {
    name: "Room",
    embedded: false
  },
  {
    name: "Message",
    embedded: false
  },
  {
    name: "Like",
    embedded: false
  },
  {
    name: "Comment",
    embedded: false
  },
  {
    name: "Video",
    embedded: false
  },
  {
    name: "Image",
    embedded: false
  },
  {
    name: "Audio",
    embedded: false
  },
  {
    name: "Text",
    embedded: false
  },
  {
    name: "Category",
    embedded: false
  },
  {
    name: "Hashtag",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
