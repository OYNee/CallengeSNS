module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateAudio {
  count: Int!
}

type AggregateCategory {
  count: Int!
}

type AggregateComment {
  count: Int!
}

type AggregateFile {
  count: Int!
}

type AggregateHashtag {
  count: Int!
}

type AggregateImage {
  count: Int!
}

type AggregateLike {
  count: Int!
}

type AggregateMessage {
  count: Int!
}

type AggregatePost {
  count: Int!
}

type AggregateRoom {
  count: Int!
}

type AggregateText {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateVideo {
  count: Int!
}

type Audio {
  id: ID!
  audio_url: String!
  audio_img_url: String!
  audioFile: File!
  post: Post
  createdAt: DateTime!
}

type AudioConnection {
  pageInfo: PageInfo!
  edges: [AudioEdge]!
  aggregate: AggregateAudio!
}

input AudioCreateInput {
  id: ID
  audio_url: String!
  audio_img_url: String!
  audioFile: FileCreateOneWithoutAudioInput!
  post: PostCreateOneWithoutAudioInput
}

input AudioCreateManyWithoutAudioFileInput {
  create: [AudioCreateWithoutAudioFileInput!]
  connect: [AudioWhereUniqueInput!]
}

input AudioCreateManyWithoutPostInput {
  create: [AudioCreateWithoutPostInput!]
  connect: [AudioWhereUniqueInput!]
}

input AudioCreateWithoutAudioFileInput {
  id: ID
  audio_url: String!
  audio_img_url: String!
  post: PostCreateOneWithoutAudioInput
}

input AudioCreateWithoutPostInput {
  id: ID
  audio_url: String!
  audio_img_url: String!
  audioFile: FileCreateOneWithoutAudioInput!
}

type AudioEdge {
  node: Audio!
  cursor: String!
}

enum AudioOrderByInput {
  id_ASC
  id_DESC
  audio_url_ASC
  audio_url_DESC
  audio_img_url_ASC
  audio_img_url_DESC
  createdAt_ASC
  createdAt_DESC
}

type AudioPreviousValues {
  id: ID!
  audio_url: String!
  audio_img_url: String!
  createdAt: DateTime!
}

input AudioScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  audio_url: String
  audio_url_not: String
  audio_url_in: [String!]
  audio_url_not_in: [String!]
  audio_url_lt: String
  audio_url_lte: String
  audio_url_gt: String
  audio_url_gte: String
  audio_url_contains: String
  audio_url_not_contains: String
  audio_url_starts_with: String
  audio_url_not_starts_with: String
  audio_url_ends_with: String
  audio_url_not_ends_with: String
  audio_img_url: String
  audio_img_url_not: String
  audio_img_url_in: [String!]
  audio_img_url_not_in: [String!]
  audio_img_url_lt: String
  audio_img_url_lte: String
  audio_img_url_gt: String
  audio_img_url_gte: String
  audio_img_url_contains: String
  audio_img_url_not_contains: String
  audio_img_url_starts_with: String
  audio_img_url_not_starts_with: String
  audio_img_url_ends_with: String
  audio_img_url_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [AudioScalarWhereInput!]
  OR: [AudioScalarWhereInput!]
  NOT: [AudioScalarWhereInput!]
}

type AudioSubscriptionPayload {
  mutation: MutationType!
  node: Audio
  updatedFields: [String!]
  previousValues: AudioPreviousValues
}

input AudioSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: AudioWhereInput
  AND: [AudioSubscriptionWhereInput!]
  OR: [AudioSubscriptionWhereInput!]
  NOT: [AudioSubscriptionWhereInput!]
}

input AudioUpdateInput {
  audio_url: String
  audio_img_url: String
  audioFile: FileUpdateOneRequiredWithoutAudioInput
  post: PostUpdateOneWithoutAudioInput
}

input AudioUpdateManyDataInput {
  audio_url: String
  audio_img_url: String
}

input AudioUpdateManyMutationInput {
  audio_url: String
  audio_img_url: String
}

input AudioUpdateManyWithoutAudioFileInput {
  create: [AudioCreateWithoutAudioFileInput!]
  delete: [AudioWhereUniqueInput!]
  connect: [AudioWhereUniqueInput!]
  set: [AudioWhereUniqueInput!]
  disconnect: [AudioWhereUniqueInput!]
  update: [AudioUpdateWithWhereUniqueWithoutAudioFileInput!]
  upsert: [AudioUpsertWithWhereUniqueWithoutAudioFileInput!]
  deleteMany: [AudioScalarWhereInput!]
  updateMany: [AudioUpdateManyWithWhereNestedInput!]
}

input AudioUpdateManyWithoutPostInput {
  create: [AudioCreateWithoutPostInput!]
  delete: [AudioWhereUniqueInput!]
  connect: [AudioWhereUniqueInput!]
  set: [AudioWhereUniqueInput!]
  disconnect: [AudioWhereUniqueInput!]
  update: [AudioUpdateWithWhereUniqueWithoutPostInput!]
  upsert: [AudioUpsertWithWhereUniqueWithoutPostInput!]
  deleteMany: [AudioScalarWhereInput!]
  updateMany: [AudioUpdateManyWithWhereNestedInput!]
}

input AudioUpdateManyWithWhereNestedInput {
  where: AudioScalarWhereInput!
  data: AudioUpdateManyDataInput!
}

input AudioUpdateWithoutAudioFileDataInput {
  audio_url: String
  audio_img_url: String
  post: PostUpdateOneWithoutAudioInput
}

input AudioUpdateWithoutPostDataInput {
  audio_url: String
  audio_img_url: String
  audioFile: FileUpdateOneRequiredWithoutAudioInput
}

input AudioUpdateWithWhereUniqueWithoutAudioFileInput {
  where: AudioWhereUniqueInput!
  data: AudioUpdateWithoutAudioFileDataInput!
}

input AudioUpdateWithWhereUniqueWithoutPostInput {
  where: AudioWhereUniqueInput!
  data: AudioUpdateWithoutPostDataInput!
}

input AudioUpsertWithWhereUniqueWithoutAudioFileInput {
  where: AudioWhereUniqueInput!
  update: AudioUpdateWithoutAudioFileDataInput!
  create: AudioCreateWithoutAudioFileInput!
}

input AudioUpsertWithWhereUniqueWithoutPostInput {
  where: AudioWhereUniqueInput!
  update: AudioUpdateWithoutPostDataInput!
  create: AudioCreateWithoutPostInput!
}

input AudioWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  audio_url: String
  audio_url_not: String
  audio_url_in: [String!]
  audio_url_not_in: [String!]
  audio_url_lt: String
  audio_url_lte: String
  audio_url_gt: String
  audio_url_gte: String
  audio_url_contains: String
  audio_url_not_contains: String
  audio_url_starts_with: String
  audio_url_not_starts_with: String
  audio_url_ends_with: String
  audio_url_not_ends_with: String
  audio_img_url: String
  audio_img_url_not: String
  audio_img_url_in: [String!]
  audio_img_url_not_in: [String!]
  audio_img_url_lt: String
  audio_img_url_lte: String
  audio_img_url_gt: String
  audio_img_url_gte: String
  audio_img_url_contains: String
  audio_img_url_not_contains: String
  audio_img_url_starts_with: String
  audio_img_url_not_starts_with: String
  audio_img_url_ends_with: String
  audio_img_url_not_ends_with: String
  audioFile: FileWhereInput
  post: PostWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [AudioWhereInput!]
  OR: [AudioWhereInput!]
  NOT: [AudioWhereInput!]
}

input AudioWhereUniqueInput {
  id: ID
}

type BatchPayload {
  count: Long!
}

type Category {
  id: ID!
  cat_name: String!
}

type CategoryConnection {
  pageInfo: PageInfo!
  edges: [CategoryEdge]!
  aggregate: AggregateCategory!
}

input CategoryCreateInput {
  id: ID
  cat_name: String!
}

type CategoryEdge {
  node: Category!
  cursor: String!
}

enum CategoryOrderByInput {
  id_ASC
  id_DESC
  cat_name_ASC
  cat_name_DESC
}

type CategoryPreviousValues {
  id: ID!
  cat_name: String!
}

type CategorySubscriptionPayload {
  mutation: MutationType!
  node: Category
  updatedFields: [String!]
  previousValues: CategoryPreviousValues
}

input CategorySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CategoryWhereInput
  AND: [CategorySubscriptionWhereInput!]
  OR: [CategorySubscriptionWhereInput!]
  NOT: [CategorySubscriptionWhereInput!]
}

input CategoryUpdateInput {
  cat_name: String
}

input CategoryUpdateManyMutationInput {
  cat_name: String
}

input CategoryWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  cat_name: String
  cat_name_not: String
  cat_name_in: [String!]
  cat_name_not_in: [String!]
  cat_name_lt: String
  cat_name_lte: String
  cat_name_gt: String
  cat_name_gte: String
  cat_name_contains: String
  cat_name_not_contains: String
  cat_name_starts_with: String
  cat_name_not_starts_with: String
  cat_name_ends_with: String
  cat_name_not_ends_with: String
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
}

input CategoryWhereUniqueInput {
  id: ID
}

type Comment {
  id: ID!
  text: String!
  user: User
  post: Post
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CommentConnection {
  pageInfo: PageInfo!
  edges: [CommentEdge]!
  aggregate: AggregateComment!
}

input CommentCreateInput {
  id: ID
  text: String!
  user: UserCreateOneWithoutCommentsInput
  post: PostCreateOneWithoutCommentsInput
}

input CommentCreateManyWithoutPostInput {
  create: [CommentCreateWithoutPostInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateManyWithoutUserInput {
  create: [CommentCreateWithoutUserInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateWithoutPostInput {
  id: ID
  text: String!
  user: UserCreateOneWithoutCommentsInput
}

input CommentCreateWithoutUserInput {
  id: ID
  text: String!
  post: PostCreateOneWithoutCommentsInput
}

type CommentEdge {
  node: Comment!
  cursor: String!
}

enum CommentOrderByInput {
  id_ASC
  id_DESC
  text_ASC
  text_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CommentPreviousValues {
  id: ID!
  text: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input CommentScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [CommentScalarWhereInput!]
  OR: [CommentScalarWhereInput!]
  NOT: [CommentScalarWhereInput!]
}

type CommentSubscriptionPayload {
  mutation: MutationType!
  node: Comment
  updatedFields: [String!]
  previousValues: CommentPreviousValues
}

input CommentSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CommentWhereInput
  AND: [CommentSubscriptionWhereInput!]
  OR: [CommentSubscriptionWhereInput!]
  NOT: [CommentSubscriptionWhereInput!]
}

input CommentUpdateInput {
  text: String
  user: UserUpdateOneWithoutCommentsInput
  post: PostUpdateOneWithoutCommentsInput
}

input CommentUpdateManyDataInput {
  text: String
}

input CommentUpdateManyMutationInput {
  text: String
}

input CommentUpdateManyWithoutPostInput {
  create: [CommentCreateWithoutPostInput!]
  delete: [CommentWhereUniqueInput!]
  connect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutPostInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutPostInput!]
  deleteMany: [CommentScalarWhereInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
}

input CommentUpdateManyWithoutUserInput {
  create: [CommentCreateWithoutUserInput!]
  delete: [CommentWhereUniqueInput!]
  connect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [CommentScalarWhereInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
}

input CommentUpdateManyWithWhereNestedInput {
  where: CommentScalarWhereInput!
  data: CommentUpdateManyDataInput!
}

input CommentUpdateWithoutPostDataInput {
  text: String
  user: UserUpdateOneWithoutCommentsInput
}

input CommentUpdateWithoutUserDataInput {
  text: String
  post: PostUpdateOneWithoutCommentsInput
}

input CommentUpdateWithWhereUniqueWithoutPostInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutPostDataInput!
}

input CommentUpdateWithWhereUniqueWithoutUserInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutUserDataInput!
}

input CommentUpsertWithWhereUniqueWithoutPostInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutPostDataInput!
  create: CommentCreateWithoutPostInput!
}

input CommentUpsertWithWhereUniqueWithoutUserInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutUserDataInput!
  create: CommentCreateWithoutUserInput!
}

input CommentWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  user: UserWhereInput
  post: PostWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  NOT: [CommentWhereInput!]
}

input CommentWhereUniqueInput {
  id: ID
}

scalar DateTime

type File {
  id: ID!
  url: String!
  post: Post
  createdAt: DateTime!
  updatedAt: DateTime!
  text(where: TextWhereInput, orderBy: TextOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Text!]
  video(where: VideoWhereInput, orderBy: VideoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Video!]
  audio(where: AudioWhereInput, orderBy: AudioOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Audio!]
  image(where: ImageWhereInput, orderBy: ImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Image!]
}

type FileConnection {
  pageInfo: PageInfo!
  edges: [FileEdge]!
  aggregate: AggregateFile!
}

input FileCreateInput {
  id: ID
  url: String!
  post: PostCreateOneWithoutFilesInput
  text: TextCreateManyWithoutImageFileInput
  video: VideoCreateManyWithoutFilesInput
  audio: AudioCreateManyWithoutAudioFileInput
  image: ImageCreateManyWithoutFilesInput
}

input FileCreateManyWithoutImageInput {
  create: [FileCreateWithoutImageInput!]
  connect: [FileWhereUniqueInput!]
}

input FileCreateManyWithoutPostInput {
  create: [FileCreateWithoutPostInput!]
  connect: [FileWhereUniqueInput!]
}

input FileCreateManyWithoutVideoInput {
  create: [FileCreateWithoutVideoInput!]
  connect: [FileWhereUniqueInput!]
}

input FileCreateOneWithoutAudioInput {
  create: FileCreateWithoutAudioInput
  connect: FileWhereUniqueInput
}

input FileCreateOneWithoutTextInput {
  create: FileCreateWithoutTextInput
  connect: FileWhereUniqueInput
}

input FileCreateWithoutAudioInput {
  id: ID
  url: String!
  post: PostCreateOneWithoutFilesInput
  text: TextCreateManyWithoutImageFileInput
  video: VideoCreateManyWithoutFilesInput
  image: ImageCreateManyWithoutFilesInput
}

input FileCreateWithoutImageInput {
  id: ID
  url: String!
  post: PostCreateOneWithoutFilesInput
  text: TextCreateManyWithoutImageFileInput
  video: VideoCreateManyWithoutFilesInput
  audio: AudioCreateManyWithoutAudioFileInput
}

input FileCreateWithoutPostInput {
  id: ID
  url: String!
  text: TextCreateManyWithoutImageFileInput
  video: VideoCreateManyWithoutFilesInput
  audio: AudioCreateManyWithoutAudioFileInput
  image: ImageCreateManyWithoutFilesInput
}

input FileCreateWithoutTextInput {
  id: ID
  url: String!
  post: PostCreateOneWithoutFilesInput
  video: VideoCreateManyWithoutFilesInput
  audio: AudioCreateManyWithoutAudioFileInput
  image: ImageCreateManyWithoutFilesInput
}

input FileCreateWithoutVideoInput {
  id: ID
  url: String!
  post: PostCreateOneWithoutFilesInput
  text: TextCreateManyWithoutImageFileInput
  audio: AudioCreateManyWithoutAudioFileInput
  image: ImageCreateManyWithoutFilesInput
}

type FileEdge {
  node: File!
  cursor: String!
}

enum FileOrderByInput {
  id_ASC
  id_DESC
  url_ASC
  url_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type FilePreviousValues {
  id: ID!
  url: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input FileScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [FileScalarWhereInput!]
  OR: [FileScalarWhereInput!]
  NOT: [FileScalarWhereInput!]
}

type FileSubscriptionPayload {
  mutation: MutationType!
  node: File
  updatedFields: [String!]
  previousValues: FilePreviousValues
}

input FileSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: FileWhereInput
  AND: [FileSubscriptionWhereInput!]
  OR: [FileSubscriptionWhereInput!]
  NOT: [FileSubscriptionWhereInput!]
}

input FileUpdateInput {
  url: String
  post: PostUpdateOneWithoutFilesInput
  text: TextUpdateManyWithoutImageFileInput
  video: VideoUpdateManyWithoutFilesInput
  audio: AudioUpdateManyWithoutAudioFileInput
  image: ImageUpdateManyWithoutFilesInput
}

input FileUpdateManyDataInput {
  url: String
}

input FileUpdateManyMutationInput {
  url: String
}

input FileUpdateManyWithoutImageInput {
  create: [FileCreateWithoutImageInput!]
  delete: [FileWhereUniqueInput!]
  connect: [FileWhereUniqueInput!]
  set: [FileWhereUniqueInput!]
  disconnect: [FileWhereUniqueInput!]
  update: [FileUpdateWithWhereUniqueWithoutImageInput!]
  upsert: [FileUpsertWithWhereUniqueWithoutImageInput!]
  deleteMany: [FileScalarWhereInput!]
  updateMany: [FileUpdateManyWithWhereNestedInput!]
}

input FileUpdateManyWithoutPostInput {
  create: [FileCreateWithoutPostInput!]
  delete: [FileWhereUniqueInput!]
  connect: [FileWhereUniqueInput!]
  set: [FileWhereUniqueInput!]
  disconnect: [FileWhereUniqueInput!]
  update: [FileUpdateWithWhereUniqueWithoutPostInput!]
  upsert: [FileUpsertWithWhereUniqueWithoutPostInput!]
  deleteMany: [FileScalarWhereInput!]
  updateMany: [FileUpdateManyWithWhereNestedInput!]
}

input FileUpdateManyWithoutVideoInput {
  create: [FileCreateWithoutVideoInput!]
  delete: [FileWhereUniqueInput!]
  connect: [FileWhereUniqueInput!]
  set: [FileWhereUniqueInput!]
  disconnect: [FileWhereUniqueInput!]
  update: [FileUpdateWithWhereUniqueWithoutVideoInput!]
  upsert: [FileUpsertWithWhereUniqueWithoutVideoInput!]
  deleteMany: [FileScalarWhereInput!]
  updateMany: [FileUpdateManyWithWhereNestedInput!]
}

input FileUpdateManyWithWhereNestedInput {
  where: FileScalarWhereInput!
  data: FileUpdateManyDataInput!
}

input FileUpdateOneRequiredWithoutAudioInput {
  create: FileCreateWithoutAudioInput
  update: FileUpdateWithoutAudioDataInput
  upsert: FileUpsertWithoutAudioInput
  connect: FileWhereUniqueInput
}

input FileUpdateOneRequiredWithoutTextInput {
  create: FileCreateWithoutTextInput
  update: FileUpdateWithoutTextDataInput
  upsert: FileUpsertWithoutTextInput
  connect: FileWhereUniqueInput
}

input FileUpdateWithoutAudioDataInput {
  url: String
  post: PostUpdateOneWithoutFilesInput
  text: TextUpdateManyWithoutImageFileInput
  video: VideoUpdateManyWithoutFilesInput
  image: ImageUpdateManyWithoutFilesInput
}

input FileUpdateWithoutImageDataInput {
  url: String
  post: PostUpdateOneWithoutFilesInput
  text: TextUpdateManyWithoutImageFileInput
  video: VideoUpdateManyWithoutFilesInput
  audio: AudioUpdateManyWithoutAudioFileInput
}

input FileUpdateWithoutPostDataInput {
  url: String
  text: TextUpdateManyWithoutImageFileInput
  video: VideoUpdateManyWithoutFilesInput
  audio: AudioUpdateManyWithoutAudioFileInput
  image: ImageUpdateManyWithoutFilesInput
}

input FileUpdateWithoutTextDataInput {
  url: String
  post: PostUpdateOneWithoutFilesInput
  video: VideoUpdateManyWithoutFilesInput
  audio: AudioUpdateManyWithoutAudioFileInput
  image: ImageUpdateManyWithoutFilesInput
}

input FileUpdateWithoutVideoDataInput {
  url: String
  post: PostUpdateOneWithoutFilesInput
  text: TextUpdateManyWithoutImageFileInput
  audio: AudioUpdateManyWithoutAudioFileInput
  image: ImageUpdateManyWithoutFilesInput
}

input FileUpdateWithWhereUniqueWithoutImageInput {
  where: FileWhereUniqueInput!
  data: FileUpdateWithoutImageDataInput!
}

input FileUpdateWithWhereUniqueWithoutPostInput {
  where: FileWhereUniqueInput!
  data: FileUpdateWithoutPostDataInput!
}

input FileUpdateWithWhereUniqueWithoutVideoInput {
  where: FileWhereUniqueInput!
  data: FileUpdateWithoutVideoDataInput!
}

input FileUpsertWithoutAudioInput {
  update: FileUpdateWithoutAudioDataInput!
  create: FileCreateWithoutAudioInput!
}

input FileUpsertWithoutTextInput {
  update: FileUpdateWithoutTextDataInput!
  create: FileCreateWithoutTextInput!
}

input FileUpsertWithWhereUniqueWithoutImageInput {
  where: FileWhereUniqueInput!
  update: FileUpdateWithoutImageDataInput!
  create: FileCreateWithoutImageInput!
}

input FileUpsertWithWhereUniqueWithoutPostInput {
  where: FileWhereUniqueInput!
  update: FileUpdateWithoutPostDataInput!
  create: FileCreateWithoutPostInput!
}

input FileUpsertWithWhereUniqueWithoutVideoInput {
  where: FileWhereUniqueInput!
  update: FileUpdateWithoutVideoDataInput!
  create: FileCreateWithoutVideoInput!
}

input FileWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  post: PostWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  text_every: TextWhereInput
  text_some: TextWhereInput
  text_none: TextWhereInput
  video_every: VideoWhereInput
  video_some: VideoWhereInput
  video_none: VideoWhereInput
  audio_every: AudioWhereInput
  audio_some: AudioWhereInput
  audio_none: AudioWhereInput
  image_every: ImageWhereInput
  image_some: ImageWhereInput
  image_none: ImageWhereInput
  AND: [FileWhereInput!]
  OR: [FileWhereInput!]
  NOT: [FileWhereInput!]
}

input FileWhereUniqueInput {
  id: ID
}

type Hashtag {
  id: ID!
  tag_name: String!
  post(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
}

type HashtagConnection {
  pageInfo: PageInfo!
  edges: [HashtagEdge]!
  aggregate: AggregateHashtag!
}

input HashtagCreateInput {
  id: ID
  tag_name: String!
  post: PostCreateManyWithoutHashtagsInput
}

input HashtagCreateManyWithoutPostInput {
  create: [HashtagCreateWithoutPostInput!]
  connect: [HashtagWhereUniqueInput!]
}

input HashtagCreateWithoutPostInput {
  id: ID
  tag_name: String!
}

type HashtagEdge {
  node: Hashtag!
  cursor: String!
}

enum HashtagOrderByInput {
  id_ASC
  id_DESC
  tag_name_ASC
  tag_name_DESC
}

type HashtagPreviousValues {
  id: ID!
  tag_name: String!
}

input HashtagScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  tag_name: String
  tag_name_not: String
  tag_name_in: [String!]
  tag_name_not_in: [String!]
  tag_name_lt: String
  tag_name_lte: String
  tag_name_gt: String
  tag_name_gte: String
  tag_name_contains: String
  tag_name_not_contains: String
  tag_name_starts_with: String
  tag_name_not_starts_with: String
  tag_name_ends_with: String
  tag_name_not_ends_with: String
  AND: [HashtagScalarWhereInput!]
  OR: [HashtagScalarWhereInput!]
  NOT: [HashtagScalarWhereInput!]
}

type HashtagSubscriptionPayload {
  mutation: MutationType!
  node: Hashtag
  updatedFields: [String!]
  previousValues: HashtagPreviousValues
}

input HashtagSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: HashtagWhereInput
  AND: [HashtagSubscriptionWhereInput!]
  OR: [HashtagSubscriptionWhereInput!]
  NOT: [HashtagSubscriptionWhereInput!]
}

input HashtagUpdateInput {
  tag_name: String
  post: PostUpdateManyWithoutHashtagsInput
}

input HashtagUpdateManyDataInput {
  tag_name: String
}

input HashtagUpdateManyMutationInput {
  tag_name: String
}

input HashtagUpdateManyWithoutPostInput {
  create: [HashtagCreateWithoutPostInput!]
  delete: [HashtagWhereUniqueInput!]
  connect: [HashtagWhereUniqueInput!]
  set: [HashtagWhereUniqueInput!]
  disconnect: [HashtagWhereUniqueInput!]
  update: [HashtagUpdateWithWhereUniqueWithoutPostInput!]
  upsert: [HashtagUpsertWithWhereUniqueWithoutPostInput!]
  deleteMany: [HashtagScalarWhereInput!]
  updateMany: [HashtagUpdateManyWithWhereNestedInput!]
}

input HashtagUpdateManyWithWhereNestedInput {
  where: HashtagScalarWhereInput!
  data: HashtagUpdateManyDataInput!
}

input HashtagUpdateWithoutPostDataInput {
  tag_name: String
}

input HashtagUpdateWithWhereUniqueWithoutPostInput {
  where: HashtagWhereUniqueInput!
  data: HashtagUpdateWithoutPostDataInput!
}

input HashtagUpsertWithWhereUniqueWithoutPostInput {
  where: HashtagWhereUniqueInput!
  update: HashtagUpdateWithoutPostDataInput!
  create: HashtagCreateWithoutPostInput!
}

input HashtagWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  tag_name: String
  tag_name_not: String
  tag_name_in: [String!]
  tag_name_not_in: [String!]
  tag_name_lt: String
  tag_name_lte: String
  tag_name_gt: String
  tag_name_gte: String
  tag_name_contains: String
  tag_name_not_contains: String
  tag_name_starts_with: String
  tag_name_not_starts_with: String
  tag_name_ends_with: String
  tag_name_not_ends_with: String
  post_every: PostWhereInput
  post_some: PostWhereInput
  post_none: PostWhereInput
  AND: [HashtagWhereInput!]
  OR: [HashtagWhereInput!]
  NOT: [HashtagWhereInput!]
}

input HashtagWhereUniqueInput {
  id: ID
  tag_name: String
}

type Image {
  id: ID!
  image_url: String!
  files(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [File!]
  post: Post
  createdAt: DateTime!
}

type ImageConnection {
  pageInfo: PageInfo!
  edges: [ImageEdge]!
  aggregate: AggregateImage!
}

input ImageCreateInput {
  id: ID
  image_url: String!
  files: FileCreateManyWithoutImageInput
  post: PostCreateOneWithoutImageInput
}

input ImageCreateManyWithoutFilesInput {
  create: [ImageCreateWithoutFilesInput!]
  connect: [ImageWhereUniqueInput!]
}

input ImageCreateManyWithoutPostInput {
  create: [ImageCreateWithoutPostInput!]
  connect: [ImageWhereUniqueInput!]
}

input ImageCreateWithoutFilesInput {
  id: ID
  image_url: String!
  post: PostCreateOneWithoutImageInput
}

input ImageCreateWithoutPostInput {
  id: ID
  image_url: String!
  files: FileCreateManyWithoutImageInput
}

type ImageEdge {
  node: Image!
  cursor: String!
}

enum ImageOrderByInput {
  id_ASC
  id_DESC
  image_url_ASC
  image_url_DESC
  createdAt_ASC
  createdAt_DESC
}

type ImagePreviousValues {
  id: ID!
  image_url: String!
  createdAt: DateTime!
}

input ImageScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  image_url: String
  image_url_not: String
  image_url_in: [String!]
  image_url_not_in: [String!]
  image_url_lt: String
  image_url_lte: String
  image_url_gt: String
  image_url_gte: String
  image_url_contains: String
  image_url_not_contains: String
  image_url_starts_with: String
  image_url_not_starts_with: String
  image_url_ends_with: String
  image_url_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [ImageScalarWhereInput!]
  OR: [ImageScalarWhereInput!]
  NOT: [ImageScalarWhereInput!]
}

type ImageSubscriptionPayload {
  mutation: MutationType!
  node: Image
  updatedFields: [String!]
  previousValues: ImagePreviousValues
}

input ImageSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ImageWhereInput
  AND: [ImageSubscriptionWhereInput!]
  OR: [ImageSubscriptionWhereInput!]
  NOT: [ImageSubscriptionWhereInput!]
}

input ImageUpdateInput {
  image_url: String
  files: FileUpdateManyWithoutImageInput
  post: PostUpdateOneWithoutImageInput
}

input ImageUpdateManyDataInput {
  image_url: String
}

input ImageUpdateManyMutationInput {
  image_url: String
}

input ImageUpdateManyWithoutFilesInput {
  create: [ImageCreateWithoutFilesInput!]
  delete: [ImageWhereUniqueInput!]
  connect: [ImageWhereUniqueInput!]
  set: [ImageWhereUniqueInput!]
  disconnect: [ImageWhereUniqueInput!]
  update: [ImageUpdateWithWhereUniqueWithoutFilesInput!]
  upsert: [ImageUpsertWithWhereUniqueWithoutFilesInput!]
  deleteMany: [ImageScalarWhereInput!]
  updateMany: [ImageUpdateManyWithWhereNestedInput!]
}

input ImageUpdateManyWithoutPostInput {
  create: [ImageCreateWithoutPostInput!]
  delete: [ImageWhereUniqueInput!]
  connect: [ImageWhereUniqueInput!]
  set: [ImageWhereUniqueInput!]
  disconnect: [ImageWhereUniqueInput!]
  update: [ImageUpdateWithWhereUniqueWithoutPostInput!]
  upsert: [ImageUpsertWithWhereUniqueWithoutPostInput!]
  deleteMany: [ImageScalarWhereInput!]
  updateMany: [ImageUpdateManyWithWhereNestedInput!]
}

input ImageUpdateManyWithWhereNestedInput {
  where: ImageScalarWhereInput!
  data: ImageUpdateManyDataInput!
}

input ImageUpdateWithoutFilesDataInput {
  image_url: String
  post: PostUpdateOneWithoutImageInput
}

input ImageUpdateWithoutPostDataInput {
  image_url: String
  files: FileUpdateManyWithoutImageInput
}

input ImageUpdateWithWhereUniqueWithoutFilesInput {
  where: ImageWhereUniqueInput!
  data: ImageUpdateWithoutFilesDataInput!
}

input ImageUpdateWithWhereUniqueWithoutPostInput {
  where: ImageWhereUniqueInput!
  data: ImageUpdateWithoutPostDataInput!
}

input ImageUpsertWithWhereUniqueWithoutFilesInput {
  where: ImageWhereUniqueInput!
  update: ImageUpdateWithoutFilesDataInput!
  create: ImageCreateWithoutFilesInput!
}

input ImageUpsertWithWhereUniqueWithoutPostInput {
  where: ImageWhereUniqueInput!
  update: ImageUpdateWithoutPostDataInput!
  create: ImageCreateWithoutPostInput!
}

input ImageWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  image_url: String
  image_url_not: String
  image_url_in: [String!]
  image_url_not_in: [String!]
  image_url_lt: String
  image_url_lte: String
  image_url_gt: String
  image_url_gte: String
  image_url_contains: String
  image_url_not_contains: String
  image_url_starts_with: String
  image_url_not_starts_with: String
  image_url_ends_with: String
  image_url_not_ends_with: String
  files_every: FileWhereInput
  files_some: FileWhereInput
  files_none: FileWhereInput
  post: PostWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [ImageWhereInput!]
  OR: [ImageWhereInput!]
  NOT: [ImageWhereInput!]
}

input ImageWhereUniqueInput {
  id: ID
}

type Like {
  id: ID!
  user: User
  post: Post
  createdAt: DateTime!
  updatedAt: DateTime!
}

type LikeConnection {
  pageInfo: PageInfo!
  edges: [LikeEdge]!
  aggregate: AggregateLike!
}

input LikeCreateInput {
  id: ID
  user: UserCreateOneWithoutLikesInput
  post: PostCreateOneWithoutLikesInput
}

input LikeCreateManyWithoutPostInput {
  create: [LikeCreateWithoutPostInput!]
  connect: [LikeWhereUniqueInput!]
}

input LikeCreateManyWithoutUserInput {
  create: [LikeCreateWithoutUserInput!]
  connect: [LikeWhereUniqueInput!]
}

input LikeCreateWithoutPostInput {
  id: ID
  user: UserCreateOneWithoutLikesInput
}

input LikeCreateWithoutUserInput {
  id: ID
  post: PostCreateOneWithoutLikesInput
}

type LikeEdge {
  node: Like!
  cursor: String!
}

enum LikeOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type LikePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input LikeScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [LikeScalarWhereInput!]
  OR: [LikeScalarWhereInput!]
  NOT: [LikeScalarWhereInput!]
}

type LikeSubscriptionPayload {
  mutation: MutationType!
  node: Like
  updatedFields: [String!]
  previousValues: LikePreviousValues
}

input LikeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: LikeWhereInput
  AND: [LikeSubscriptionWhereInput!]
  OR: [LikeSubscriptionWhereInput!]
  NOT: [LikeSubscriptionWhereInput!]
}

input LikeUpdateInput {
  user: UserUpdateOneWithoutLikesInput
  post: PostUpdateOneWithoutLikesInput
}

input LikeUpdateManyWithoutPostInput {
  create: [LikeCreateWithoutPostInput!]
  delete: [LikeWhereUniqueInput!]
  connect: [LikeWhereUniqueInput!]
  set: [LikeWhereUniqueInput!]
  disconnect: [LikeWhereUniqueInput!]
  update: [LikeUpdateWithWhereUniqueWithoutPostInput!]
  upsert: [LikeUpsertWithWhereUniqueWithoutPostInput!]
  deleteMany: [LikeScalarWhereInput!]
}

input LikeUpdateManyWithoutUserInput {
  create: [LikeCreateWithoutUserInput!]
  delete: [LikeWhereUniqueInput!]
  connect: [LikeWhereUniqueInput!]
  set: [LikeWhereUniqueInput!]
  disconnect: [LikeWhereUniqueInput!]
  update: [LikeUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [LikeUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [LikeScalarWhereInput!]
}

input LikeUpdateWithoutPostDataInput {
  user: UserUpdateOneWithoutLikesInput
}

input LikeUpdateWithoutUserDataInput {
  post: PostUpdateOneWithoutLikesInput
}

input LikeUpdateWithWhereUniqueWithoutPostInput {
  where: LikeWhereUniqueInput!
  data: LikeUpdateWithoutPostDataInput!
}

input LikeUpdateWithWhereUniqueWithoutUserInput {
  where: LikeWhereUniqueInput!
  data: LikeUpdateWithoutUserDataInput!
}

input LikeUpsertWithWhereUniqueWithoutPostInput {
  where: LikeWhereUniqueInput!
  update: LikeUpdateWithoutPostDataInput!
  create: LikeCreateWithoutPostInput!
}

input LikeUpsertWithWhereUniqueWithoutUserInput {
  where: LikeWhereUniqueInput!
  update: LikeUpdateWithoutUserDataInput!
  create: LikeCreateWithoutUserInput!
}

input LikeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user: UserWhereInput
  post: PostWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [LikeWhereInput!]
  OR: [LikeWhereInput!]
  NOT: [LikeWhereInput!]
}

input LikeWhereUniqueInput {
  id: ID
}

scalar Long

type Message {
  id: ID!
  text: String!
  from: User!
  to: User!
  room: Room!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type MessageConnection {
  pageInfo: PageInfo!
  edges: [MessageEdge]!
  aggregate: AggregateMessage!
}

input MessageCreateInput {
  id: ID
  text: String!
  from: UserCreateOneInput!
  to: UserCreateOneInput!
  room: RoomCreateOneWithoutMessagesInput!
}

input MessageCreateManyWithoutRoomInput {
  create: [MessageCreateWithoutRoomInput!]
  connect: [MessageWhereUniqueInput!]
}

input MessageCreateWithoutRoomInput {
  id: ID
  text: String!
  from: UserCreateOneInput!
  to: UserCreateOneInput!
}

type MessageEdge {
  node: Message!
  cursor: String!
}

enum MessageOrderByInput {
  id_ASC
  id_DESC
  text_ASC
  text_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type MessagePreviousValues {
  id: ID!
  text: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input MessageScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [MessageScalarWhereInput!]
  OR: [MessageScalarWhereInput!]
  NOT: [MessageScalarWhereInput!]
}

type MessageSubscriptionPayload {
  mutation: MutationType!
  node: Message
  updatedFields: [String!]
  previousValues: MessagePreviousValues
}

input MessageSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: MessageWhereInput
  AND: [MessageSubscriptionWhereInput!]
  OR: [MessageSubscriptionWhereInput!]
  NOT: [MessageSubscriptionWhereInput!]
}

input MessageUpdateInput {
  text: String
  from: UserUpdateOneRequiredInput
  to: UserUpdateOneRequiredInput
  room: RoomUpdateOneRequiredWithoutMessagesInput
}

input MessageUpdateManyDataInput {
  text: String
}

input MessageUpdateManyMutationInput {
  text: String
}

input MessageUpdateManyWithoutRoomInput {
  create: [MessageCreateWithoutRoomInput!]
  delete: [MessageWhereUniqueInput!]
  connect: [MessageWhereUniqueInput!]
  set: [MessageWhereUniqueInput!]
  disconnect: [MessageWhereUniqueInput!]
  update: [MessageUpdateWithWhereUniqueWithoutRoomInput!]
  upsert: [MessageUpsertWithWhereUniqueWithoutRoomInput!]
  deleteMany: [MessageScalarWhereInput!]
  updateMany: [MessageUpdateManyWithWhereNestedInput!]
}

input MessageUpdateManyWithWhereNestedInput {
  where: MessageScalarWhereInput!
  data: MessageUpdateManyDataInput!
}

input MessageUpdateWithoutRoomDataInput {
  text: String
  from: UserUpdateOneRequiredInput
  to: UserUpdateOneRequiredInput
}

input MessageUpdateWithWhereUniqueWithoutRoomInput {
  where: MessageWhereUniqueInput!
  data: MessageUpdateWithoutRoomDataInput!
}

input MessageUpsertWithWhereUniqueWithoutRoomInput {
  where: MessageWhereUniqueInput!
  update: MessageUpdateWithoutRoomDataInput!
  create: MessageCreateWithoutRoomInput!
}

input MessageWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  from: UserWhereInput
  to: UserWhereInput
  room: RoomWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [MessageWhereInput!]
  OR: [MessageWhereInput!]
  NOT: [MessageWhereInput!]
}

input MessageWhereUniqueInput {
  id: ID
}

type Mutation {
  createAudio(data: AudioCreateInput!): Audio!
  updateAudio(data: AudioUpdateInput!, where: AudioWhereUniqueInput!): Audio
  updateManyAudios(data: AudioUpdateManyMutationInput!, where: AudioWhereInput): BatchPayload!
  upsertAudio(where: AudioWhereUniqueInput!, create: AudioCreateInput!, update: AudioUpdateInput!): Audio!
  deleteAudio(where: AudioWhereUniqueInput!): Audio
  deleteManyAudios(where: AudioWhereInput): BatchPayload!
  createCategory(data: CategoryCreateInput!): Category!
  updateCategory(data: CategoryUpdateInput!, where: CategoryWhereUniqueInput!): Category
  updateManyCategories(data: CategoryUpdateManyMutationInput!, where: CategoryWhereInput): BatchPayload!
  upsertCategory(where: CategoryWhereUniqueInput!, create: CategoryCreateInput!, update: CategoryUpdateInput!): Category!
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteManyCategories(where: CategoryWhereInput): BatchPayload!
  createComment(data: CommentCreateInput!): Comment!
  updateComment(data: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment
  updateManyComments(data: CommentUpdateManyMutationInput!, where: CommentWhereInput): BatchPayload!
  upsertComment(where: CommentWhereUniqueInput!, create: CommentCreateInput!, update: CommentUpdateInput!): Comment!
  deleteComment(where: CommentWhereUniqueInput!): Comment
  deleteManyComments(where: CommentWhereInput): BatchPayload!
  createFile(data: FileCreateInput!): File!
  updateFile(data: FileUpdateInput!, where: FileWhereUniqueInput!): File
  updateManyFiles(data: FileUpdateManyMutationInput!, where: FileWhereInput): BatchPayload!
  upsertFile(where: FileWhereUniqueInput!, create: FileCreateInput!, update: FileUpdateInput!): File!
  deleteFile(where: FileWhereUniqueInput!): File
  deleteManyFiles(where: FileWhereInput): BatchPayload!
  createHashtag(data: HashtagCreateInput!): Hashtag!
  updateHashtag(data: HashtagUpdateInput!, where: HashtagWhereUniqueInput!): Hashtag
  updateManyHashtags(data: HashtagUpdateManyMutationInput!, where: HashtagWhereInput): BatchPayload!
  upsertHashtag(where: HashtagWhereUniqueInput!, create: HashtagCreateInput!, update: HashtagUpdateInput!): Hashtag!
  deleteHashtag(where: HashtagWhereUniqueInput!): Hashtag
  deleteManyHashtags(where: HashtagWhereInput): BatchPayload!
  createImage(data: ImageCreateInput!): Image!
  updateImage(data: ImageUpdateInput!, where: ImageWhereUniqueInput!): Image
  updateManyImages(data: ImageUpdateManyMutationInput!, where: ImageWhereInput): BatchPayload!
  upsertImage(where: ImageWhereUniqueInput!, create: ImageCreateInput!, update: ImageUpdateInput!): Image!
  deleteImage(where: ImageWhereUniqueInput!): Image
  deleteManyImages(where: ImageWhereInput): BatchPayload!
  createLike(data: LikeCreateInput!): Like!
  updateLike(data: LikeUpdateInput!, where: LikeWhereUniqueInput!): Like
  upsertLike(where: LikeWhereUniqueInput!, create: LikeCreateInput!, update: LikeUpdateInput!): Like!
  deleteLike(where: LikeWhereUniqueInput!): Like
  deleteManyLikes(where: LikeWhereInput): BatchPayload!
  createMessage(data: MessageCreateInput!): Message!
  updateMessage(data: MessageUpdateInput!, where: MessageWhereUniqueInput!): Message
  updateManyMessages(data: MessageUpdateManyMutationInput!, where: MessageWhereInput): BatchPayload!
  upsertMessage(where: MessageWhereUniqueInput!, create: MessageCreateInput!, update: MessageUpdateInput!): Message!
  deleteMessage(where: MessageWhereUniqueInput!): Message
  deleteManyMessages(where: MessageWhereInput): BatchPayload!
  createPost(data: PostCreateInput!): Post!
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateManyPosts(data: PostUpdateManyMutationInput!, where: PostWhereInput): BatchPayload!
  upsertPost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!
  deletePost(where: PostWhereUniqueInput!): Post
  deleteManyPosts(where: PostWhereInput): BatchPayload!
  createRoom(data: RoomCreateInput!): Room!
  updateRoom(data: RoomUpdateInput!, where: RoomWhereUniqueInput!): Room
  upsertRoom(where: RoomWhereUniqueInput!, create: RoomCreateInput!, update: RoomUpdateInput!): Room!
  deleteRoom(where: RoomWhereUniqueInput!): Room
  deleteManyRooms(where: RoomWhereInput): BatchPayload!
  createText(data: TextCreateInput!): Text!
  updateText(data: TextUpdateInput!, where: TextWhereUniqueInput!): Text
  updateManyTexts(data: TextUpdateManyMutationInput!, where: TextWhereInput): BatchPayload!
  upsertText(where: TextWhereUniqueInput!, create: TextCreateInput!, update: TextUpdateInput!): Text!
  deleteText(where: TextWhereUniqueInput!): Text
  deleteManyTexts(where: TextWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  createVideo(data: VideoCreateInput!): Video!
  updateVideo(data: VideoUpdateInput!, where: VideoWhereUniqueInput!): Video
  updateManyVideos(data: VideoUpdateManyMutationInput!, where: VideoWhereInput): BatchPayload!
  upsertVideo(where: VideoWhereUniqueInput!, create: VideoCreateInput!, update: VideoUpdateInput!): Video!
  deleteVideo(where: VideoWhereUniqueInput!): Video
  deleteManyVideos(where: VideoWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Post {
  id: ID!
  caption: String
  location: String
  files(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [File!]
  user: User
  likes(where: LikeWhereInput, orderBy: LikeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Like!]
  hashtags(where: HashtagWhereInput, orderBy: HashtagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Hashtag!]
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
  category: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  relChallenger(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  preChallenger(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  nextChallenger(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  nextPosts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
  prePosts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
  tagChallenger(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  video(where: VideoWhereInput, orderBy: VideoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Video!]
  image(where: ImageWhereInput, orderBy: ImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Image!]
  audio(where: AudioWhereInput, orderBy: AudioOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Audio!]
  text(where: TextWhereInput, orderBy: TextOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Text!]
}

type PostConnection {
  pageInfo: PageInfo!
  edges: [PostEdge]!
  aggregate: AggregatePost!
}

input PostCreateInput {
  id: ID
  caption: String
  location: String
  files: FileCreateManyWithoutPostInput
  user: UserCreateOneWithoutPostsInput
  likes: LikeCreateManyWithoutPostInput
  hashtags: HashtagCreateManyWithoutPostInput
  comments: CommentCreateManyWithoutPostInput
  category: String!
  relChallenger: UserCreateManyWithoutRelChallengerInput
  preChallenger: UserCreateManyWithoutPreChallengerInput
  nextChallenger: UserCreateManyWithoutNextChallengerInput
  nextPosts: PostCreateManyWithoutPrePostsInput
  prePosts: PostCreateManyWithoutNextPostsInput
  tagChallenger: UserCreateManyWithoutTagChallengerInput
  video: VideoCreateManyWithoutPostInput
  image: ImageCreateManyWithoutPostInput
  audio: AudioCreateManyWithoutPostInput
  text: TextCreateManyWithoutPostInput
}

input PostCreateManyWithoutHashtagsInput {
  create: [PostCreateWithoutHashtagsInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateManyWithoutNextChallengerInput {
  create: [PostCreateWithoutNextChallengerInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateManyWithoutNextPostsInput {
  create: [PostCreateWithoutNextPostsInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateManyWithoutPreChallengerInput {
  create: [PostCreateWithoutPreChallengerInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateManyWithoutPrePostsInput {
  create: [PostCreateWithoutPrePostsInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateManyWithoutRelChallengerInput {
  create: [PostCreateWithoutRelChallengerInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateManyWithoutTagChallengerInput {
  create: [PostCreateWithoutTagChallengerInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateManyWithoutUserInput {
  create: [PostCreateWithoutUserInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateOneWithoutAudioInput {
  create: PostCreateWithoutAudioInput
  connect: PostWhereUniqueInput
}

input PostCreateOneWithoutCommentsInput {
  create: PostCreateWithoutCommentsInput
  connect: PostWhereUniqueInput
}

input PostCreateOneWithoutFilesInput {
  create: PostCreateWithoutFilesInput
  connect: PostWhereUniqueInput
}

input PostCreateOneWithoutImageInput {
  create: PostCreateWithoutImageInput
  connect: PostWhereUniqueInput
}

input PostCreateOneWithoutLikesInput {
  create: PostCreateWithoutLikesInput
  connect: PostWhereUniqueInput
}

input PostCreateOneWithoutTextInput {
  create: PostCreateWithoutTextInput
  connect: PostWhereUniqueInput
}

input PostCreateOneWithoutVideoInput {
  create: PostCreateWithoutVideoInput
  connect: PostWhereUniqueInput
}

input PostCreateWithoutAudioInput {
  id: ID
  caption: String
  location: String
  files: FileCreateManyWithoutPostInput
  user: UserCreateOneWithoutPostsInput
  likes: LikeCreateManyWithoutPostInput
  hashtags: HashtagCreateManyWithoutPostInput
  comments: CommentCreateManyWithoutPostInput
  category: String!
  relChallenger: UserCreateManyWithoutRelChallengerInput
  preChallenger: UserCreateManyWithoutPreChallengerInput
  nextChallenger: UserCreateManyWithoutNextChallengerInput
  nextPosts: PostCreateManyWithoutPrePostsInput
  prePosts: PostCreateManyWithoutNextPostsInput
  tagChallenger: UserCreateManyWithoutTagChallengerInput
  video: VideoCreateManyWithoutPostInput
  image: ImageCreateManyWithoutPostInput
  text: TextCreateManyWithoutPostInput
}

input PostCreateWithoutCommentsInput {
  id: ID
  caption: String
  location: String
  files: FileCreateManyWithoutPostInput
  user: UserCreateOneWithoutPostsInput
  likes: LikeCreateManyWithoutPostInput
  hashtags: HashtagCreateManyWithoutPostInput
  category: String!
  relChallenger: UserCreateManyWithoutRelChallengerInput
  preChallenger: UserCreateManyWithoutPreChallengerInput
  nextChallenger: UserCreateManyWithoutNextChallengerInput
  nextPosts: PostCreateManyWithoutPrePostsInput
  prePosts: PostCreateManyWithoutNextPostsInput
  tagChallenger: UserCreateManyWithoutTagChallengerInput
  video: VideoCreateManyWithoutPostInput
  image: ImageCreateManyWithoutPostInput
  audio: AudioCreateManyWithoutPostInput
  text: TextCreateManyWithoutPostInput
}

input PostCreateWithoutFilesInput {
  id: ID
  caption: String
  location: String
  user: UserCreateOneWithoutPostsInput
  likes: LikeCreateManyWithoutPostInput
  hashtags: HashtagCreateManyWithoutPostInput
  comments: CommentCreateManyWithoutPostInput
  category: String!
  relChallenger: UserCreateManyWithoutRelChallengerInput
  preChallenger: UserCreateManyWithoutPreChallengerInput
  nextChallenger: UserCreateManyWithoutNextChallengerInput
  nextPosts: PostCreateManyWithoutPrePostsInput
  prePosts: PostCreateManyWithoutNextPostsInput
  tagChallenger: UserCreateManyWithoutTagChallengerInput
  video: VideoCreateManyWithoutPostInput
  image: ImageCreateManyWithoutPostInput
  audio: AudioCreateManyWithoutPostInput
  text: TextCreateManyWithoutPostInput
}

input PostCreateWithoutHashtagsInput {
  id: ID
  caption: String
  location: String
  files: FileCreateManyWithoutPostInput
  user: UserCreateOneWithoutPostsInput
  likes: LikeCreateManyWithoutPostInput
  comments: CommentCreateManyWithoutPostInput
  category: String!
  relChallenger: UserCreateManyWithoutRelChallengerInput
  preChallenger: UserCreateManyWithoutPreChallengerInput
  nextChallenger: UserCreateManyWithoutNextChallengerInput
  nextPosts: PostCreateManyWithoutPrePostsInput
  prePosts: PostCreateManyWithoutNextPostsInput
  tagChallenger: UserCreateManyWithoutTagChallengerInput
  video: VideoCreateManyWithoutPostInput
  image: ImageCreateManyWithoutPostInput
  audio: AudioCreateManyWithoutPostInput
  text: TextCreateManyWithoutPostInput
}

input PostCreateWithoutImageInput {
  id: ID
  caption: String
  location: String
  files: FileCreateManyWithoutPostInput
  user: UserCreateOneWithoutPostsInput
  likes: LikeCreateManyWithoutPostInput
  hashtags: HashtagCreateManyWithoutPostInput
  comments: CommentCreateManyWithoutPostInput
  category: String!
  relChallenger: UserCreateManyWithoutRelChallengerInput
  preChallenger: UserCreateManyWithoutPreChallengerInput
  nextChallenger: UserCreateManyWithoutNextChallengerInput
  nextPosts: PostCreateManyWithoutPrePostsInput
  prePosts: PostCreateManyWithoutNextPostsInput
  tagChallenger: UserCreateManyWithoutTagChallengerInput
  video: VideoCreateManyWithoutPostInput
  audio: AudioCreateManyWithoutPostInput
  text: TextCreateManyWithoutPostInput
}

input PostCreateWithoutLikesInput {
  id: ID
  caption: String
  location: String
  files: FileCreateManyWithoutPostInput
  user: UserCreateOneWithoutPostsInput
  hashtags: HashtagCreateManyWithoutPostInput
  comments: CommentCreateManyWithoutPostInput
  category: String!
  relChallenger: UserCreateManyWithoutRelChallengerInput
  preChallenger: UserCreateManyWithoutPreChallengerInput
  nextChallenger: UserCreateManyWithoutNextChallengerInput
  nextPosts: PostCreateManyWithoutPrePostsInput
  prePosts: PostCreateManyWithoutNextPostsInput
  tagChallenger: UserCreateManyWithoutTagChallengerInput
  video: VideoCreateManyWithoutPostInput
  image: ImageCreateManyWithoutPostInput
  audio: AudioCreateManyWithoutPostInput
  text: TextCreateManyWithoutPostInput
}

input PostCreateWithoutNextChallengerInput {
  id: ID
  caption: String
  location: String
  files: FileCreateManyWithoutPostInput
  user: UserCreateOneWithoutPostsInput
  likes: LikeCreateManyWithoutPostInput
  hashtags: HashtagCreateManyWithoutPostInput
  comments: CommentCreateManyWithoutPostInput
  category: String!
  relChallenger: UserCreateManyWithoutRelChallengerInput
  preChallenger: UserCreateManyWithoutPreChallengerInput
  nextPosts: PostCreateManyWithoutPrePostsInput
  prePosts: PostCreateManyWithoutNextPostsInput
  tagChallenger: UserCreateManyWithoutTagChallengerInput
  video: VideoCreateManyWithoutPostInput
  image: ImageCreateManyWithoutPostInput
  audio: AudioCreateManyWithoutPostInput
  text: TextCreateManyWithoutPostInput
}

input PostCreateWithoutNextPostsInput {
  id: ID
  caption: String
  location: String
  files: FileCreateManyWithoutPostInput
  user: UserCreateOneWithoutPostsInput
  likes: LikeCreateManyWithoutPostInput
  hashtags: HashtagCreateManyWithoutPostInput
  comments: CommentCreateManyWithoutPostInput
  category: String!
  relChallenger: UserCreateManyWithoutRelChallengerInput
  preChallenger: UserCreateManyWithoutPreChallengerInput
  nextChallenger: UserCreateManyWithoutNextChallengerInput
  prePosts: PostCreateManyWithoutNextPostsInput
  tagChallenger: UserCreateManyWithoutTagChallengerInput
  video: VideoCreateManyWithoutPostInput
  image: ImageCreateManyWithoutPostInput
  audio: AudioCreateManyWithoutPostInput
  text: TextCreateManyWithoutPostInput
}

input PostCreateWithoutPreChallengerInput {
  id: ID
  caption: String
  location: String
  files: FileCreateManyWithoutPostInput
  user: UserCreateOneWithoutPostsInput
  likes: LikeCreateManyWithoutPostInput
  hashtags: HashtagCreateManyWithoutPostInput
  comments: CommentCreateManyWithoutPostInput
  category: String!
  relChallenger: UserCreateManyWithoutRelChallengerInput
  nextChallenger: UserCreateManyWithoutNextChallengerInput
  nextPosts: PostCreateManyWithoutPrePostsInput
  prePosts: PostCreateManyWithoutNextPostsInput
  tagChallenger: UserCreateManyWithoutTagChallengerInput
  video: VideoCreateManyWithoutPostInput
  image: ImageCreateManyWithoutPostInput
  audio: AudioCreateManyWithoutPostInput
  text: TextCreateManyWithoutPostInput
}

input PostCreateWithoutPrePostsInput {
  id: ID
  caption: String
  location: String
  files: FileCreateManyWithoutPostInput
  user: UserCreateOneWithoutPostsInput
  likes: LikeCreateManyWithoutPostInput
  hashtags: HashtagCreateManyWithoutPostInput
  comments: CommentCreateManyWithoutPostInput
  category: String!
  relChallenger: UserCreateManyWithoutRelChallengerInput
  preChallenger: UserCreateManyWithoutPreChallengerInput
  nextChallenger: UserCreateManyWithoutNextChallengerInput
  nextPosts: PostCreateManyWithoutPrePostsInput
  tagChallenger: UserCreateManyWithoutTagChallengerInput
  video: VideoCreateManyWithoutPostInput
  image: ImageCreateManyWithoutPostInput
  audio: AudioCreateManyWithoutPostInput
  text: TextCreateManyWithoutPostInput
}

input PostCreateWithoutRelChallengerInput {
  id: ID
  caption: String
  location: String
  files: FileCreateManyWithoutPostInput
  user: UserCreateOneWithoutPostsInput
  likes: LikeCreateManyWithoutPostInput
  hashtags: HashtagCreateManyWithoutPostInput
  comments: CommentCreateManyWithoutPostInput
  category: String!
  preChallenger: UserCreateManyWithoutPreChallengerInput
  nextChallenger: UserCreateManyWithoutNextChallengerInput
  nextPosts: PostCreateManyWithoutPrePostsInput
  prePosts: PostCreateManyWithoutNextPostsInput
  tagChallenger: UserCreateManyWithoutTagChallengerInput
  video: VideoCreateManyWithoutPostInput
  image: ImageCreateManyWithoutPostInput
  audio: AudioCreateManyWithoutPostInput
  text: TextCreateManyWithoutPostInput
}

input PostCreateWithoutTagChallengerInput {
  id: ID
  caption: String
  location: String
  files: FileCreateManyWithoutPostInput
  user: UserCreateOneWithoutPostsInput
  likes: LikeCreateManyWithoutPostInput
  hashtags: HashtagCreateManyWithoutPostInput
  comments: CommentCreateManyWithoutPostInput
  category: String!
  relChallenger: UserCreateManyWithoutRelChallengerInput
  preChallenger: UserCreateManyWithoutPreChallengerInput
  nextChallenger: UserCreateManyWithoutNextChallengerInput
  nextPosts: PostCreateManyWithoutPrePostsInput
  prePosts: PostCreateManyWithoutNextPostsInput
  video: VideoCreateManyWithoutPostInput
  image: ImageCreateManyWithoutPostInput
  audio: AudioCreateManyWithoutPostInput
  text: TextCreateManyWithoutPostInput
}

input PostCreateWithoutTextInput {
  id: ID
  caption: String
  location: String
  files: FileCreateManyWithoutPostInput
  user: UserCreateOneWithoutPostsInput
  likes: LikeCreateManyWithoutPostInput
  hashtags: HashtagCreateManyWithoutPostInput
  comments: CommentCreateManyWithoutPostInput
  category: String!
  relChallenger: UserCreateManyWithoutRelChallengerInput
  preChallenger: UserCreateManyWithoutPreChallengerInput
  nextChallenger: UserCreateManyWithoutNextChallengerInput
  nextPosts: PostCreateManyWithoutPrePostsInput
  prePosts: PostCreateManyWithoutNextPostsInput
  tagChallenger: UserCreateManyWithoutTagChallengerInput
  video: VideoCreateManyWithoutPostInput
  image: ImageCreateManyWithoutPostInput
  audio: AudioCreateManyWithoutPostInput
}

input PostCreateWithoutUserInput {
  id: ID
  caption: String
  location: String
  files: FileCreateManyWithoutPostInput
  likes: LikeCreateManyWithoutPostInput
  hashtags: HashtagCreateManyWithoutPostInput
  comments: CommentCreateManyWithoutPostInput
  category: String!
  relChallenger: UserCreateManyWithoutRelChallengerInput
  preChallenger: UserCreateManyWithoutPreChallengerInput
  nextChallenger: UserCreateManyWithoutNextChallengerInput
  nextPosts: PostCreateManyWithoutPrePostsInput
  prePosts: PostCreateManyWithoutNextPostsInput
  tagChallenger: UserCreateManyWithoutTagChallengerInput
  video: VideoCreateManyWithoutPostInput
  image: ImageCreateManyWithoutPostInput
  audio: AudioCreateManyWithoutPostInput
  text: TextCreateManyWithoutPostInput
}

input PostCreateWithoutVideoInput {
  id: ID
  caption: String
  location: String
  files: FileCreateManyWithoutPostInput
  user: UserCreateOneWithoutPostsInput
  likes: LikeCreateManyWithoutPostInput
  hashtags: HashtagCreateManyWithoutPostInput
  comments: CommentCreateManyWithoutPostInput
  category: String!
  relChallenger: UserCreateManyWithoutRelChallengerInput
  preChallenger: UserCreateManyWithoutPreChallengerInput
  nextChallenger: UserCreateManyWithoutNextChallengerInput
  nextPosts: PostCreateManyWithoutPrePostsInput
  prePosts: PostCreateManyWithoutNextPostsInput
  tagChallenger: UserCreateManyWithoutTagChallengerInput
  image: ImageCreateManyWithoutPostInput
  audio: AudioCreateManyWithoutPostInput
  text: TextCreateManyWithoutPostInput
}

type PostEdge {
  node: Post!
  cursor: String!
}

enum PostOrderByInput {
  id_ASC
  id_DESC
  caption_ASC
  caption_DESC
  location_ASC
  location_DESC
  category_ASC
  category_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PostPreviousValues {
  id: ID!
  caption: String
  location: String
  category: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input PostScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  caption: String
  caption_not: String
  caption_in: [String!]
  caption_not_in: [String!]
  caption_lt: String
  caption_lte: String
  caption_gt: String
  caption_gte: String
  caption_contains: String
  caption_not_contains: String
  caption_starts_with: String
  caption_not_starts_with: String
  caption_ends_with: String
  caption_not_ends_with: String
  location: String
  location_not: String
  location_in: [String!]
  location_not_in: [String!]
  location_lt: String
  location_lte: String
  location_gt: String
  location_gte: String
  location_contains: String
  location_not_contains: String
  location_starts_with: String
  location_not_starts_with: String
  location_ends_with: String
  location_not_ends_with: String
  category: String
  category_not: String
  category_in: [String!]
  category_not_in: [String!]
  category_lt: String
  category_lte: String
  category_gt: String
  category_gte: String
  category_contains: String
  category_not_contains: String
  category_starts_with: String
  category_not_starts_with: String
  category_ends_with: String
  category_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [PostScalarWhereInput!]
  OR: [PostScalarWhereInput!]
  NOT: [PostScalarWhereInput!]
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
  updatedFields: [String!]
  previousValues: PostPreviousValues
}

input PostSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PostWhereInput
  AND: [PostSubscriptionWhereInput!]
  OR: [PostSubscriptionWhereInput!]
  NOT: [PostSubscriptionWhereInput!]
}

input PostUpdateInput {
  caption: String
  location: String
  files: FileUpdateManyWithoutPostInput
  user: UserUpdateOneWithoutPostsInput
  likes: LikeUpdateManyWithoutPostInput
  hashtags: HashtagUpdateManyWithoutPostInput
  comments: CommentUpdateManyWithoutPostInput
  category: String
  relChallenger: UserUpdateManyWithoutRelChallengerInput
  preChallenger: UserUpdateManyWithoutPreChallengerInput
  nextChallenger: UserUpdateManyWithoutNextChallengerInput
  nextPosts: PostUpdateManyWithoutPrePostsInput
  prePosts: PostUpdateManyWithoutNextPostsInput
  tagChallenger: UserUpdateManyWithoutTagChallengerInput
  video: VideoUpdateManyWithoutPostInput
  image: ImageUpdateManyWithoutPostInput
  audio: AudioUpdateManyWithoutPostInput
  text: TextUpdateManyWithoutPostInput
}

input PostUpdateManyDataInput {
  caption: String
  location: String
  category: String
}

input PostUpdateManyMutationInput {
  caption: String
  location: String
  category: String
}

input PostUpdateManyWithoutHashtagsInput {
  create: [PostCreateWithoutHashtagsInput!]
  delete: [PostWhereUniqueInput!]
  connect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutHashtagsInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutHashtagsInput!]
  deleteMany: [PostScalarWhereInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
}

input PostUpdateManyWithoutNextChallengerInput {
  create: [PostCreateWithoutNextChallengerInput!]
  delete: [PostWhereUniqueInput!]
  connect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutNextChallengerInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutNextChallengerInput!]
  deleteMany: [PostScalarWhereInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
}

input PostUpdateManyWithoutNextPostsInput {
  create: [PostCreateWithoutNextPostsInput!]
  delete: [PostWhereUniqueInput!]
  connect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutNextPostsInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutNextPostsInput!]
  deleteMany: [PostScalarWhereInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
}

input PostUpdateManyWithoutPreChallengerInput {
  create: [PostCreateWithoutPreChallengerInput!]
  delete: [PostWhereUniqueInput!]
  connect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutPreChallengerInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutPreChallengerInput!]
  deleteMany: [PostScalarWhereInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
}

input PostUpdateManyWithoutPrePostsInput {
  create: [PostCreateWithoutPrePostsInput!]
  delete: [PostWhereUniqueInput!]
  connect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutPrePostsInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutPrePostsInput!]
  deleteMany: [PostScalarWhereInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
}

input PostUpdateManyWithoutRelChallengerInput {
  create: [PostCreateWithoutRelChallengerInput!]
  delete: [PostWhereUniqueInput!]
  connect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutRelChallengerInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutRelChallengerInput!]
  deleteMany: [PostScalarWhereInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
}

input PostUpdateManyWithoutTagChallengerInput {
  create: [PostCreateWithoutTagChallengerInput!]
  delete: [PostWhereUniqueInput!]
  connect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutTagChallengerInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutTagChallengerInput!]
  deleteMany: [PostScalarWhereInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
}

input PostUpdateManyWithoutUserInput {
  create: [PostCreateWithoutUserInput!]
  delete: [PostWhereUniqueInput!]
  connect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [PostScalarWhereInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
}

input PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput!
  data: PostUpdateManyDataInput!
}

input PostUpdateOneWithoutAudioInput {
  create: PostCreateWithoutAudioInput
  update: PostUpdateWithoutAudioDataInput
  upsert: PostUpsertWithoutAudioInput
  delete: Boolean
  disconnect: Boolean
  connect: PostWhereUniqueInput
}

input PostUpdateOneWithoutCommentsInput {
  create: PostCreateWithoutCommentsInput
  update: PostUpdateWithoutCommentsDataInput
  upsert: PostUpsertWithoutCommentsInput
  delete: Boolean
  disconnect: Boolean
  connect: PostWhereUniqueInput
}

input PostUpdateOneWithoutFilesInput {
  create: PostCreateWithoutFilesInput
  update: PostUpdateWithoutFilesDataInput
  upsert: PostUpsertWithoutFilesInput
  delete: Boolean
  disconnect: Boolean
  connect: PostWhereUniqueInput
}

input PostUpdateOneWithoutImageInput {
  create: PostCreateWithoutImageInput
  update: PostUpdateWithoutImageDataInput
  upsert: PostUpsertWithoutImageInput
  delete: Boolean
  disconnect: Boolean
  connect: PostWhereUniqueInput
}

input PostUpdateOneWithoutLikesInput {
  create: PostCreateWithoutLikesInput
  update: PostUpdateWithoutLikesDataInput
  upsert: PostUpsertWithoutLikesInput
  delete: Boolean
  disconnect: Boolean
  connect: PostWhereUniqueInput
}

input PostUpdateOneWithoutTextInput {
  create: PostCreateWithoutTextInput
  update: PostUpdateWithoutTextDataInput
  upsert: PostUpsertWithoutTextInput
  delete: Boolean
  disconnect: Boolean
  connect: PostWhereUniqueInput
}

input PostUpdateOneWithoutVideoInput {
  create: PostCreateWithoutVideoInput
  update: PostUpdateWithoutVideoDataInput
  upsert: PostUpsertWithoutVideoInput
  delete: Boolean
  disconnect: Boolean
  connect: PostWhereUniqueInput
}

input PostUpdateWithoutAudioDataInput {
  caption: String
  location: String
  files: FileUpdateManyWithoutPostInput
  user: UserUpdateOneWithoutPostsInput
  likes: LikeUpdateManyWithoutPostInput
  hashtags: HashtagUpdateManyWithoutPostInput
  comments: CommentUpdateManyWithoutPostInput
  category: String
  relChallenger: UserUpdateManyWithoutRelChallengerInput
  preChallenger: UserUpdateManyWithoutPreChallengerInput
  nextChallenger: UserUpdateManyWithoutNextChallengerInput
  nextPosts: PostUpdateManyWithoutPrePostsInput
  prePosts: PostUpdateManyWithoutNextPostsInput
  tagChallenger: UserUpdateManyWithoutTagChallengerInput
  video: VideoUpdateManyWithoutPostInput
  image: ImageUpdateManyWithoutPostInput
  text: TextUpdateManyWithoutPostInput
}

input PostUpdateWithoutCommentsDataInput {
  caption: String
  location: String
  files: FileUpdateManyWithoutPostInput
  user: UserUpdateOneWithoutPostsInput
  likes: LikeUpdateManyWithoutPostInput
  hashtags: HashtagUpdateManyWithoutPostInput
  category: String
  relChallenger: UserUpdateManyWithoutRelChallengerInput
  preChallenger: UserUpdateManyWithoutPreChallengerInput
  nextChallenger: UserUpdateManyWithoutNextChallengerInput
  nextPosts: PostUpdateManyWithoutPrePostsInput
  prePosts: PostUpdateManyWithoutNextPostsInput
  tagChallenger: UserUpdateManyWithoutTagChallengerInput
  video: VideoUpdateManyWithoutPostInput
  image: ImageUpdateManyWithoutPostInput
  audio: AudioUpdateManyWithoutPostInput
  text: TextUpdateManyWithoutPostInput
}

input PostUpdateWithoutFilesDataInput {
  caption: String
  location: String
  user: UserUpdateOneWithoutPostsInput
  likes: LikeUpdateManyWithoutPostInput
  hashtags: HashtagUpdateManyWithoutPostInput
  comments: CommentUpdateManyWithoutPostInput
  category: String
  relChallenger: UserUpdateManyWithoutRelChallengerInput
  preChallenger: UserUpdateManyWithoutPreChallengerInput
  nextChallenger: UserUpdateManyWithoutNextChallengerInput
  nextPosts: PostUpdateManyWithoutPrePostsInput
  prePosts: PostUpdateManyWithoutNextPostsInput
  tagChallenger: UserUpdateManyWithoutTagChallengerInput
  video: VideoUpdateManyWithoutPostInput
  image: ImageUpdateManyWithoutPostInput
  audio: AudioUpdateManyWithoutPostInput
  text: TextUpdateManyWithoutPostInput
}

input PostUpdateWithoutHashtagsDataInput {
  caption: String
  location: String
  files: FileUpdateManyWithoutPostInput
  user: UserUpdateOneWithoutPostsInput
  likes: LikeUpdateManyWithoutPostInput
  comments: CommentUpdateManyWithoutPostInput
  category: String
  relChallenger: UserUpdateManyWithoutRelChallengerInput
  preChallenger: UserUpdateManyWithoutPreChallengerInput
  nextChallenger: UserUpdateManyWithoutNextChallengerInput
  nextPosts: PostUpdateManyWithoutPrePostsInput
  prePosts: PostUpdateManyWithoutNextPostsInput
  tagChallenger: UserUpdateManyWithoutTagChallengerInput
  video: VideoUpdateManyWithoutPostInput
  image: ImageUpdateManyWithoutPostInput
  audio: AudioUpdateManyWithoutPostInput
  text: TextUpdateManyWithoutPostInput
}

input PostUpdateWithoutImageDataInput {
  caption: String
  location: String
  files: FileUpdateManyWithoutPostInput
  user: UserUpdateOneWithoutPostsInput
  likes: LikeUpdateManyWithoutPostInput
  hashtags: HashtagUpdateManyWithoutPostInput
  comments: CommentUpdateManyWithoutPostInput
  category: String
  relChallenger: UserUpdateManyWithoutRelChallengerInput
  preChallenger: UserUpdateManyWithoutPreChallengerInput
  nextChallenger: UserUpdateManyWithoutNextChallengerInput
  nextPosts: PostUpdateManyWithoutPrePostsInput
  prePosts: PostUpdateManyWithoutNextPostsInput
  tagChallenger: UserUpdateManyWithoutTagChallengerInput
  video: VideoUpdateManyWithoutPostInput
  audio: AudioUpdateManyWithoutPostInput
  text: TextUpdateManyWithoutPostInput
}

input PostUpdateWithoutLikesDataInput {
  caption: String
  location: String
  files: FileUpdateManyWithoutPostInput
  user: UserUpdateOneWithoutPostsInput
  hashtags: HashtagUpdateManyWithoutPostInput
  comments: CommentUpdateManyWithoutPostInput
  category: String
  relChallenger: UserUpdateManyWithoutRelChallengerInput
  preChallenger: UserUpdateManyWithoutPreChallengerInput
  nextChallenger: UserUpdateManyWithoutNextChallengerInput
  nextPosts: PostUpdateManyWithoutPrePostsInput
  prePosts: PostUpdateManyWithoutNextPostsInput
  tagChallenger: UserUpdateManyWithoutTagChallengerInput
  video: VideoUpdateManyWithoutPostInput
  image: ImageUpdateManyWithoutPostInput
  audio: AudioUpdateManyWithoutPostInput
  text: TextUpdateManyWithoutPostInput
}

input PostUpdateWithoutNextChallengerDataInput {
  caption: String
  location: String
  files: FileUpdateManyWithoutPostInput
  user: UserUpdateOneWithoutPostsInput
  likes: LikeUpdateManyWithoutPostInput
  hashtags: HashtagUpdateManyWithoutPostInput
  comments: CommentUpdateManyWithoutPostInput
  category: String
  relChallenger: UserUpdateManyWithoutRelChallengerInput
  preChallenger: UserUpdateManyWithoutPreChallengerInput
  nextPosts: PostUpdateManyWithoutPrePostsInput
  prePosts: PostUpdateManyWithoutNextPostsInput
  tagChallenger: UserUpdateManyWithoutTagChallengerInput
  video: VideoUpdateManyWithoutPostInput
  image: ImageUpdateManyWithoutPostInput
  audio: AudioUpdateManyWithoutPostInput
  text: TextUpdateManyWithoutPostInput
}

input PostUpdateWithoutNextPostsDataInput {
  caption: String
  location: String
  files: FileUpdateManyWithoutPostInput
  user: UserUpdateOneWithoutPostsInput
  likes: LikeUpdateManyWithoutPostInput
  hashtags: HashtagUpdateManyWithoutPostInput
  comments: CommentUpdateManyWithoutPostInput
  category: String
  relChallenger: UserUpdateManyWithoutRelChallengerInput
  preChallenger: UserUpdateManyWithoutPreChallengerInput
  nextChallenger: UserUpdateManyWithoutNextChallengerInput
  prePosts: PostUpdateManyWithoutNextPostsInput
  tagChallenger: UserUpdateManyWithoutTagChallengerInput
  video: VideoUpdateManyWithoutPostInput
  image: ImageUpdateManyWithoutPostInput
  audio: AudioUpdateManyWithoutPostInput
  text: TextUpdateManyWithoutPostInput
}

input PostUpdateWithoutPreChallengerDataInput {
  caption: String
  location: String
  files: FileUpdateManyWithoutPostInput
  user: UserUpdateOneWithoutPostsInput
  likes: LikeUpdateManyWithoutPostInput
  hashtags: HashtagUpdateManyWithoutPostInput
  comments: CommentUpdateManyWithoutPostInput
  category: String
  relChallenger: UserUpdateManyWithoutRelChallengerInput
  nextChallenger: UserUpdateManyWithoutNextChallengerInput
  nextPosts: PostUpdateManyWithoutPrePostsInput
  prePosts: PostUpdateManyWithoutNextPostsInput
  tagChallenger: UserUpdateManyWithoutTagChallengerInput
  video: VideoUpdateManyWithoutPostInput
  image: ImageUpdateManyWithoutPostInput
  audio: AudioUpdateManyWithoutPostInput
  text: TextUpdateManyWithoutPostInput
}

input PostUpdateWithoutPrePostsDataInput {
  caption: String
  location: String
  files: FileUpdateManyWithoutPostInput
  user: UserUpdateOneWithoutPostsInput
  likes: LikeUpdateManyWithoutPostInput
  hashtags: HashtagUpdateManyWithoutPostInput
  comments: CommentUpdateManyWithoutPostInput
  category: String
  relChallenger: UserUpdateManyWithoutRelChallengerInput
  preChallenger: UserUpdateManyWithoutPreChallengerInput
  nextChallenger: UserUpdateManyWithoutNextChallengerInput
  nextPosts: PostUpdateManyWithoutPrePostsInput
  tagChallenger: UserUpdateManyWithoutTagChallengerInput
  video: VideoUpdateManyWithoutPostInput
  image: ImageUpdateManyWithoutPostInput
  audio: AudioUpdateManyWithoutPostInput
  text: TextUpdateManyWithoutPostInput
}

input PostUpdateWithoutRelChallengerDataInput {
  caption: String
  location: String
  files: FileUpdateManyWithoutPostInput
  user: UserUpdateOneWithoutPostsInput
  likes: LikeUpdateManyWithoutPostInput
  hashtags: HashtagUpdateManyWithoutPostInput
  comments: CommentUpdateManyWithoutPostInput
  category: String
  preChallenger: UserUpdateManyWithoutPreChallengerInput
  nextChallenger: UserUpdateManyWithoutNextChallengerInput
  nextPosts: PostUpdateManyWithoutPrePostsInput
  prePosts: PostUpdateManyWithoutNextPostsInput
  tagChallenger: UserUpdateManyWithoutTagChallengerInput
  video: VideoUpdateManyWithoutPostInput
  image: ImageUpdateManyWithoutPostInput
  audio: AudioUpdateManyWithoutPostInput
  text: TextUpdateManyWithoutPostInput
}

input PostUpdateWithoutTagChallengerDataInput {
  caption: String
  location: String
  files: FileUpdateManyWithoutPostInput
  user: UserUpdateOneWithoutPostsInput
  likes: LikeUpdateManyWithoutPostInput
  hashtags: HashtagUpdateManyWithoutPostInput
  comments: CommentUpdateManyWithoutPostInput
  category: String
  relChallenger: UserUpdateManyWithoutRelChallengerInput
  preChallenger: UserUpdateManyWithoutPreChallengerInput
  nextChallenger: UserUpdateManyWithoutNextChallengerInput
  nextPosts: PostUpdateManyWithoutPrePostsInput
  prePosts: PostUpdateManyWithoutNextPostsInput
  video: VideoUpdateManyWithoutPostInput
  image: ImageUpdateManyWithoutPostInput
  audio: AudioUpdateManyWithoutPostInput
  text: TextUpdateManyWithoutPostInput
}

input PostUpdateWithoutTextDataInput {
  caption: String
  location: String
  files: FileUpdateManyWithoutPostInput
  user: UserUpdateOneWithoutPostsInput
  likes: LikeUpdateManyWithoutPostInput
  hashtags: HashtagUpdateManyWithoutPostInput
  comments: CommentUpdateManyWithoutPostInput
  category: String
  relChallenger: UserUpdateManyWithoutRelChallengerInput
  preChallenger: UserUpdateManyWithoutPreChallengerInput
  nextChallenger: UserUpdateManyWithoutNextChallengerInput
  nextPosts: PostUpdateManyWithoutPrePostsInput
  prePosts: PostUpdateManyWithoutNextPostsInput
  tagChallenger: UserUpdateManyWithoutTagChallengerInput
  video: VideoUpdateManyWithoutPostInput
  image: ImageUpdateManyWithoutPostInput
  audio: AudioUpdateManyWithoutPostInput
}

input PostUpdateWithoutUserDataInput {
  caption: String
  location: String
  files: FileUpdateManyWithoutPostInput
  likes: LikeUpdateManyWithoutPostInput
  hashtags: HashtagUpdateManyWithoutPostInput
  comments: CommentUpdateManyWithoutPostInput
  category: String
  relChallenger: UserUpdateManyWithoutRelChallengerInput
  preChallenger: UserUpdateManyWithoutPreChallengerInput
  nextChallenger: UserUpdateManyWithoutNextChallengerInput
  nextPosts: PostUpdateManyWithoutPrePostsInput
  prePosts: PostUpdateManyWithoutNextPostsInput
  tagChallenger: UserUpdateManyWithoutTagChallengerInput
  video: VideoUpdateManyWithoutPostInput
  image: ImageUpdateManyWithoutPostInput
  audio: AudioUpdateManyWithoutPostInput
  text: TextUpdateManyWithoutPostInput
}

input PostUpdateWithoutVideoDataInput {
  caption: String
  location: String
  files: FileUpdateManyWithoutPostInput
  user: UserUpdateOneWithoutPostsInput
  likes: LikeUpdateManyWithoutPostInput
  hashtags: HashtagUpdateManyWithoutPostInput
  comments: CommentUpdateManyWithoutPostInput
  category: String
  relChallenger: UserUpdateManyWithoutRelChallengerInput
  preChallenger: UserUpdateManyWithoutPreChallengerInput
  nextChallenger: UserUpdateManyWithoutNextChallengerInput
  nextPosts: PostUpdateManyWithoutPrePostsInput
  prePosts: PostUpdateManyWithoutNextPostsInput
  tagChallenger: UserUpdateManyWithoutTagChallengerInput
  image: ImageUpdateManyWithoutPostInput
  audio: AudioUpdateManyWithoutPostInput
  text: TextUpdateManyWithoutPostInput
}

input PostUpdateWithWhereUniqueWithoutHashtagsInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutHashtagsDataInput!
}

input PostUpdateWithWhereUniqueWithoutNextChallengerInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutNextChallengerDataInput!
}

input PostUpdateWithWhereUniqueWithoutNextPostsInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutNextPostsDataInput!
}

input PostUpdateWithWhereUniqueWithoutPreChallengerInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutPreChallengerDataInput!
}

input PostUpdateWithWhereUniqueWithoutPrePostsInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutPrePostsDataInput!
}

input PostUpdateWithWhereUniqueWithoutRelChallengerInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutRelChallengerDataInput!
}

input PostUpdateWithWhereUniqueWithoutTagChallengerInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutTagChallengerDataInput!
}

input PostUpdateWithWhereUniqueWithoutUserInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutUserDataInput!
}

input PostUpsertWithoutAudioInput {
  update: PostUpdateWithoutAudioDataInput!
  create: PostCreateWithoutAudioInput!
}

input PostUpsertWithoutCommentsInput {
  update: PostUpdateWithoutCommentsDataInput!
  create: PostCreateWithoutCommentsInput!
}

input PostUpsertWithoutFilesInput {
  update: PostUpdateWithoutFilesDataInput!
  create: PostCreateWithoutFilesInput!
}

input PostUpsertWithoutImageInput {
  update: PostUpdateWithoutImageDataInput!
  create: PostCreateWithoutImageInput!
}

input PostUpsertWithoutLikesInput {
  update: PostUpdateWithoutLikesDataInput!
  create: PostCreateWithoutLikesInput!
}

input PostUpsertWithoutTextInput {
  update: PostUpdateWithoutTextDataInput!
  create: PostCreateWithoutTextInput!
}

input PostUpsertWithoutVideoInput {
  update: PostUpdateWithoutVideoDataInput!
  create: PostCreateWithoutVideoInput!
}

input PostUpsertWithWhereUniqueWithoutHashtagsInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutHashtagsDataInput!
  create: PostCreateWithoutHashtagsInput!
}

input PostUpsertWithWhereUniqueWithoutNextChallengerInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutNextChallengerDataInput!
  create: PostCreateWithoutNextChallengerInput!
}

input PostUpsertWithWhereUniqueWithoutNextPostsInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutNextPostsDataInput!
  create: PostCreateWithoutNextPostsInput!
}

input PostUpsertWithWhereUniqueWithoutPreChallengerInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutPreChallengerDataInput!
  create: PostCreateWithoutPreChallengerInput!
}

input PostUpsertWithWhereUniqueWithoutPrePostsInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutPrePostsDataInput!
  create: PostCreateWithoutPrePostsInput!
}

input PostUpsertWithWhereUniqueWithoutRelChallengerInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutRelChallengerDataInput!
  create: PostCreateWithoutRelChallengerInput!
}

input PostUpsertWithWhereUniqueWithoutTagChallengerInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutTagChallengerDataInput!
  create: PostCreateWithoutTagChallengerInput!
}

input PostUpsertWithWhereUniqueWithoutUserInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutUserDataInput!
  create: PostCreateWithoutUserInput!
}

input PostWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  caption: String
  caption_not: String
  caption_in: [String!]
  caption_not_in: [String!]
  caption_lt: String
  caption_lte: String
  caption_gt: String
  caption_gte: String
  caption_contains: String
  caption_not_contains: String
  caption_starts_with: String
  caption_not_starts_with: String
  caption_ends_with: String
  caption_not_ends_with: String
  location: String
  location_not: String
  location_in: [String!]
  location_not_in: [String!]
  location_lt: String
  location_lte: String
  location_gt: String
  location_gte: String
  location_contains: String
  location_not_contains: String
  location_starts_with: String
  location_not_starts_with: String
  location_ends_with: String
  location_not_ends_with: String
  files_every: FileWhereInput
  files_some: FileWhereInput
  files_none: FileWhereInput
  user: UserWhereInput
  likes_every: LikeWhereInput
  likes_some: LikeWhereInput
  likes_none: LikeWhereInput
  hashtags_every: HashtagWhereInput
  hashtags_some: HashtagWhereInput
  hashtags_none: HashtagWhereInput
  comments_every: CommentWhereInput
  comments_some: CommentWhereInput
  comments_none: CommentWhereInput
  category: String
  category_not: String
  category_in: [String!]
  category_not_in: [String!]
  category_lt: String
  category_lte: String
  category_gt: String
  category_gte: String
  category_contains: String
  category_not_contains: String
  category_starts_with: String
  category_not_starts_with: String
  category_ends_with: String
  category_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  relChallenger_every: UserWhereInput
  relChallenger_some: UserWhereInput
  relChallenger_none: UserWhereInput
  preChallenger_every: UserWhereInput
  preChallenger_some: UserWhereInput
  preChallenger_none: UserWhereInput
  nextChallenger_every: UserWhereInput
  nextChallenger_some: UserWhereInput
  nextChallenger_none: UserWhereInput
  nextPosts_every: PostWhereInput
  nextPosts_some: PostWhereInput
  nextPosts_none: PostWhereInput
  prePosts_every: PostWhereInput
  prePosts_some: PostWhereInput
  prePosts_none: PostWhereInput
  tagChallenger_every: UserWhereInput
  tagChallenger_some: UserWhereInput
  tagChallenger_none: UserWhereInput
  video_every: VideoWhereInput
  video_some: VideoWhereInput
  video_none: VideoWhereInput
  image_every: ImageWhereInput
  image_some: ImageWhereInput
  image_none: ImageWhereInput
  audio_every: AudioWhereInput
  audio_some: AudioWhereInput
  audio_none: AudioWhereInput
  text_every: TextWhereInput
  text_some: TextWhereInput
  text_none: TextWhereInput
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
}

input PostWhereUniqueInput {
  id: ID
}

type Query {
  audio(where: AudioWhereUniqueInput!): Audio
  audios(where: AudioWhereInput, orderBy: AudioOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Audio]!
  audiosConnection(where: AudioWhereInput, orderBy: AudioOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AudioConnection!
  category(where: CategoryWhereUniqueInput!): Category
  categories(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Category]!
  categoriesConnection(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CategoryConnection!
  comment(where: CommentWhereUniqueInput!): Comment
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment]!
  commentsConnection(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CommentConnection!
  file(where: FileWhereUniqueInput!): File
  files(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [File]!
  filesConnection(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FileConnection!
  hashtag(where: HashtagWhereUniqueInput!): Hashtag
  hashtags(where: HashtagWhereInput, orderBy: HashtagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Hashtag]!
  hashtagsConnection(where: HashtagWhereInput, orderBy: HashtagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): HashtagConnection!
  image(where: ImageWhereUniqueInput!): Image
  images(where: ImageWhereInput, orderBy: ImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Image]!
  imagesConnection(where: ImageWhereInput, orderBy: ImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ImageConnection!
  like(where: LikeWhereUniqueInput!): Like
  likes(where: LikeWhereInput, orderBy: LikeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Like]!
  likesConnection(where: LikeWhereInput, orderBy: LikeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LikeConnection!
  message(where: MessageWhereUniqueInput!): Message
  messages(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Message]!
  messagesConnection(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MessageConnection!
  post(where: PostWhereUniqueInput!): Post
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post]!
  postsConnection(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PostConnection!
  room(where: RoomWhereUniqueInput!): Room
  rooms(where: RoomWhereInput, orderBy: RoomOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Room]!
  roomsConnection(where: RoomWhereInput, orderBy: RoomOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RoomConnection!
  text(where: TextWhereUniqueInput!): Text
  texts(where: TextWhereInput, orderBy: TextOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Text]!
  textsConnection(where: TextWhereInput, orderBy: TextOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TextConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  video(where: VideoWhereUniqueInput!): Video
  videos(where: VideoWhereInput, orderBy: VideoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Video]!
  videosConnection(where: VideoWhereInput, orderBy: VideoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): VideoConnection!
  node(id: ID!): Node
}

type Room {
  id: ID!
  participants(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  messages(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Message!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type RoomConnection {
  pageInfo: PageInfo!
  edges: [RoomEdge]!
  aggregate: AggregateRoom!
}

input RoomCreateInput {
  id: ID
  participants: UserCreateManyWithoutRoomsInput
  messages: MessageCreateManyWithoutRoomInput
}

input RoomCreateManyWithoutParticipantsInput {
  create: [RoomCreateWithoutParticipantsInput!]
  connect: [RoomWhereUniqueInput!]
}

input RoomCreateOneWithoutMessagesInput {
  create: RoomCreateWithoutMessagesInput
  connect: RoomWhereUniqueInput
}

input RoomCreateWithoutMessagesInput {
  id: ID
  participants: UserCreateManyWithoutRoomsInput
}

input RoomCreateWithoutParticipantsInput {
  id: ID
  messages: MessageCreateManyWithoutRoomInput
}

type RoomEdge {
  node: Room!
  cursor: String!
}

enum RoomOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type RoomPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input RoomScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [RoomScalarWhereInput!]
  OR: [RoomScalarWhereInput!]
  NOT: [RoomScalarWhereInput!]
}

type RoomSubscriptionPayload {
  mutation: MutationType!
  node: Room
  updatedFields: [String!]
  previousValues: RoomPreviousValues
}

input RoomSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: RoomWhereInput
  AND: [RoomSubscriptionWhereInput!]
  OR: [RoomSubscriptionWhereInput!]
  NOT: [RoomSubscriptionWhereInput!]
}

input RoomUpdateInput {
  participants: UserUpdateManyWithoutRoomsInput
  messages: MessageUpdateManyWithoutRoomInput
}

input RoomUpdateManyWithoutParticipantsInput {
  create: [RoomCreateWithoutParticipantsInput!]
  delete: [RoomWhereUniqueInput!]
  connect: [RoomWhereUniqueInput!]
  set: [RoomWhereUniqueInput!]
  disconnect: [RoomWhereUniqueInput!]
  update: [RoomUpdateWithWhereUniqueWithoutParticipantsInput!]
  upsert: [RoomUpsertWithWhereUniqueWithoutParticipantsInput!]
  deleteMany: [RoomScalarWhereInput!]
}

input RoomUpdateOneRequiredWithoutMessagesInput {
  create: RoomCreateWithoutMessagesInput
  update: RoomUpdateWithoutMessagesDataInput
  upsert: RoomUpsertWithoutMessagesInput
  connect: RoomWhereUniqueInput
}

input RoomUpdateWithoutMessagesDataInput {
  participants: UserUpdateManyWithoutRoomsInput
}

input RoomUpdateWithoutParticipantsDataInput {
  messages: MessageUpdateManyWithoutRoomInput
}

input RoomUpdateWithWhereUniqueWithoutParticipantsInput {
  where: RoomWhereUniqueInput!
  data: RoomUpdateWithoutParticipantsDataInput!
}

input RoomUpsertWithoutMessagesInput {
  update: RoomUpdateWithoutMessagesDataInput!
  create: RoomCreateWithoutMessagesInput!
}

input RoomUpsertWithWhereUniqueWithoutParticipantsInput {
  where: RoomWhereUniqueInput!
  update: RoomUpdateWithoutParticipantsDataInput!
  create: RoomCreateWithoutParticipantsInput!
}

input RoomWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  participants_every: UserWhereInput
  participants_some: UserWhereInput
  participants_none: UserWhereInput
  messages_every: MessageWhereInput
  messages_some: MessageWhereInput
  messages_none: MessageWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [RoomWhereInput!]
  OR: [RoomWhereInput!]
  NOT: [RoomWhereInput!]
}

input RoomWhereUniqueInput {
  id: ID
}

type Subscription {
  audio(where: AudioSubscriptionWhereInput): AudioSubscriptionPayload
  category(where: CategorySubscriptionWhereInput): CategorySubscriptionPayload
  comment(where: CommentSubscriptionWhereInput): CommentSubscriptionPayload
  file(where: FileSubscriptionWhereInput): FileSubscriptionPayload
  hashtag(where: HashtagSubscriptionWhereInput): HashtagSubscriptionPayload
  image(where: ImageSubscriptionWhereInput): ImageSubscriptionPayload
  like(where: LikeSubscriptionWhereInput): LikeSubscriptionPayload
  message(where: MessageSubscriptionWhereInput): MessageSubscriptionPayload
  post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
  room(where: RoomSubscriptionWhereInput): RoomSubscriptionPayload
  text(where: TextSubscriptionWhereInput): TextSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  video(where: VideoSubscriptionWhereInput): VideoSubscriptionPayload
}

type Text {
  id: ID!
  text_img_url: String!
  content: String!
  imageFile: File!
  post: Post
  relay: Boolean!
  createdAt: DateTime!
}

type TextConnection {
  pageInfo: PageInfo!
  edges: [TextEdge]!
  aggregate: AggregateText!
}

input TextCreateInput {
  id: ID
  text_img_url: String!
  content: String!
  imageFile: FileCreateOneWithoutTextInput!
  post: PostCreateOneWithoutTextInput
  relay: Boolean!
}

input TextCreateManyWithoutImageFileInput {
  create: [TextCreateWithoutImageFileInput!]
  connect: [TextWhereUniqueInput!]
}

input TextCreateManyWithoutPostInput {
  create: [TextCreateWithoutPostInput!]
  connect: [TextWhereUniqueInput!]
}

input TextCreateWithoutImageFileInput {
  id: ID
  text_img_url: String!
  content: String!
  post: PostCreateOneWithoutTextInput
  relay: Boolean!
}

input TextCreateWithoutPostInput {
  id: ID
  text_img_url: String!
  content: String!
  imageFile: FileCreateOneWithoutTextInput!
  relay: Boolean!
}

type TextEdge {
  node: Text!
  cursor: String!
}

enum TextOrderByInput {
  id_ASC
  id_DESC
  text_img_url_ASC
  text_img_url_DESC
  content_ASC
  content_DESC
  relay_ASC
  relay_DESC
  createdAt_ASC
  createdAt_DESC
}

type TextPreviousValues {
  id: ID!
  text_img_url: String!
  content: String!
  relay: Boolean!
  createdAt: DateTime!
}

input TextScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  text_img_url: String
  text_img_url_not: String
  text_img_url_in: [String!]
  text_img_url_not_in: [String!]
  text_img_url_lt: String
  text_img_url_lte: String
  text_img_url_gt: String
  text_img_url_gte: String
  text_img_url_contains: String
  text_img_url_not_contains: String
  text_img_url_starts_with: String
  text_img_url_not_starts_with: String
  text_img_url_ends_with: String
  text_img_url_not_ends_with: String
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  relay: Boolean
  relay_not: Boolean
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [TextScalarWhereInput!]
  OR: [TextScalarWhereInput!]
  NOT: [TextScalarWhereInput!]
}

type TextSubscriptionPayload {
  mutation: MutationType!
  node: Text
  updatedFields: [String!]
  previousValues: TextPreviousValues
}

input TextSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TextWhereInput
  AND: [TextSubscriptionWhereInput!]
  OR: [TextSubscriptionWhereInput!]
  NOT: [TextSubscriptionWhereInput!]
}

input TextUpdateInput {
  text_img_url: String
  content: String
  imageFile: FileUpdateOneRequiredWithoutTextInput
  post: PostUpdateOneWithoutTextInput
  relay: Boolean
}

input TextUpdateManyDataInput {
  text_img_url: String
  content: String
  relay: Boolean
}

input TextUpdateManyMutationInput {
  text_img_url: String
  content: String
  relay: Boolean
}

input TextUpdateManyWithoutImageFileInput {
  create: [TextCreateWithoutImageFileInput!]
  delete: [TextWhereUniqueInput!]
  connect: [TextWhereUniqueInput!]
  set: [TextWhereUniqueInput!]
  disconnect: [TextWhereUniqueInput!]
  update: [TextUpdateWithWhereUniqueWithoutImageFileInput!]
  upsert: [TextUpsertWithWhereUniqueWithoutImageFileInput!]
  deleteMany: [TextScalarWhereInput!]
  updateMany: [TextUpdateManyWithWhereNestedInput!]
}

input TextUpdateManyWithoutPostInput {
  create: [TextCreateWithoutPostInput!]
  delete: [TextWhereUniqueInput!]
  connect: [TextWhereUniqueInput!]
  set: [TextWhereUniqueInput!]
  disconnect: [TextWhereUniqueInput!]
  update: [TextUpdateWithWhereUniqueWithoutPostInput!]
  upsert: [TextUpsertWithWhereUniqueWithoutPostInput!]
  deleteMany: [TextScalarWhereInput!]
  updateMany: [TextUpdateManyWithWhereNestedInput!]
}

input TextUpdateManyWithWhereNestedInput {
  where: TextScalarWhereInput!
  data: TextUpdateManyDataInput!
}

input TextUpdateWithoutImageFileDataInput {
  text_img_url: String
  content: String
  post: PostUpdateOneWithoutTextInput
  relay: Boolean
}

input TextUpdateWithoutPostDataInput {
  text_img_url: String
  content: String
  imageFile: FileUpdateOneRequiredWithoutTextInput
  relay: Boolean
}

input TextUpdateWithWhereUniqueWithoutImageFileInput {
  where: TextWhereUniqueInput!
  data: TextUpdateWithoutImageFileDataInput!
}

input TextUpdateWithWhereUniqueWithoutPostInput {
  where: TextWhereUniqueInput!
  data: TextUpdateWithoutPostDataInput!
}

input TextUpsertWithWhereUniqueWithoutImageFileInput {
  where: TextWhereUniqueInput!
  update: TextUpdateWithoutImageFileDataInput!
  create: TextCreateWithoutImageFileInput!
}

input TextUpsertWithWhereUniqueWithoutPostInput {
  where: TextWhereUniqueInput!
  update: TextUpdateWithoutPostDataInput!
  create: TextCreateWithoutPostInput!
}

input TextWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  text_img_url: String
  text_img_url_not: String
  text_img_url_in: [String!]
  text_img_url_not_in: [String!]
  text_img_url_lt: String
  text_img_url_lte: String
  text_img_url_gt: String
  text_img_url_gte: String
  text_img_url_contains: String
  text_img_url_not_contains: String
  text_img_url_starts_with: String
  text_img_url_not_starts_with: String
  text_img_url_ends_with: String
  text_img_url_not_ends_with: String
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  imageFile: FileWhereInput
  post: PostWhereInput
  relay: Boolean
  relay_not: Boolean
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [TextWhereInput!]
  OR: [TextWhereInput!]
  NOT: [TextWhereInput!]
}

input TextWhereUniqueInput {
  id: ID
}

type User {
  id: ID!
  avatar: String
  username: String!
  nickname: String!
  passwd: String!
  email: String!
  bio: String
  following(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  followers(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
  likes(where: LikeWhereInput, orderBy: LikeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Like!]
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
  rooms(where: RoomWhereInput, orderBy: RoomOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Room!]
  relChallenger(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
  preChallenger(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
  nextChallenger(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
  tagChallenger(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
  loginSecret: String
  createdAt: DateTime!
  updatedAt: DateTime!
  favCategory: String
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  avatar: String
  username: String!
  nickname: String!
  passwd: String!
  email: String!
  bio: String
  following: UserCreateManyWithoutFollowersInput
  followers: UserCreateManyWithoutFollowingInput
  posts: PostCreateManyWithoutUserInput
  likes: LikeCreateManyWithoutUserInput
  comments: CommentCreateManyWithoutUserInput
  rooms: RoomCreateManyWithoutParticipantsInput
  relChallenger: PostCreateManyWithoutRelChallengerInput
  preChallenger: PostCreateManyWithoutPreChallengerInput
  nextChallenger: PostCreateManyWithoutNextChallengerInput
  tagChallenger: PostCreateManyWithoutTagChallengerInput
  loginSecret: String
  favCategory: String
}

input UserCreateManyWithoutFollowersInput {
  create: [UserCreateWithoutFollowersInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutFollowingInput {
  create: [UserCreateWithoutFollowingInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutNextChallengerInput {
  create: [UserCreateWithoutNextChallengerInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutPreChallengerInput {
  create: [UserCreateWithoutPreChallengerInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutRelChallengerInput {
  create: [UserCreateWithoutRelChallengerInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutRoomsInput {
  create: [UserCreateWithoutRoomsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutTagChallengerInput {
  create: [UserCreateWithoutTagChallengerInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutLikesInput {
  create: UserCreateWithoutLikesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutCommentsInput {
  id: ID
  avatar: String
  username: String!
  nickname: String!
  passwd: String!
  email: String!
  bio: String
  following: UserCreateManyWithoutFollowersInput
  followers: UserCreateManyWithoutFollowingInput
  posts: PostCreateManyWithoutUserInput
  likes: LikeCreateManyWithoutUserInput
  rooms: RoomCreateManyWithoutParticipantsInput
  relChallenger: PostCreateManyWithoutRelChallengerInput
  preChallenger: PostCreateManyWithoutPreChallengerInput
  nextChallenger: PostCreateManyWithoutNextChallengerInput
  tagChallenger: PostCreateManyWithoutTagChallengerInput
  loginSecret: String
  favCategory: String
}

input UserCreateWithoutFollowersInput {
  id: ID
  avatar: String
  username: String!
  nickname: String!
  passwd: String!
  email: String!
  bio: String
  following: UserCreateManyWithoutFollowersInput
  posts: PostCreateManyWithoutUserInput
  likes: LikeCreateManyWithoutUserInput
  comments: CommentCreateManyWithoutUserInput
  rooms: RoomCreateManyWithoutParticipantsInput
  relChallenger: PostCreateManyWithoutRelChallengerInput
  preChallenger: PostCreateManyWithoutPreChallengerInput
  nextChallenger: PostCreateManyWithoutNextChallengerInput
  tagChallenger: PostCreateManyWithoutTagChallengerInput
  loginSecret: String
  favCategory: String
}

input UserCreateWithoutFollowingInput {
  id: ID
  avatar: String
  username: String!
  nickname: String!
  passwd: String!
  email: String!
  bio: String
  followers: UserCreateManyWithoutFollowingInput
  posts: PostCreateManyWithoutUserInput
  likes: LikeCreateManyWithoutUserInput
  comments: CommentCreateManyWithoutUserInput
  rooms: RoomCreateManyWithoutParticipantsInput
  relChallenger: PostCreateManyWithoutRelChallengerInput
  preChallenger: PostCreateManyWithoutPreChallengerInput
  nextChallenger: PostCreateManyWithoutNextChallengerInput
  tagChallenger: PostCreateManyWithoutTagChallengerInput
  loginSecret: String
  favCategory: String
}

input UserCreateWithoutLikesInput {
  id: ID
  avatar: String
  username: String!
  nickname: String!
  passwd: String!
  email: String!
  bio: String
  following: UserCreateManyWithoutFollowersInput
  followers: UserCreateManyWithoutFollowingInput
  posts: PostCreateManyWithoutUserInput
  comments: CommentCreateManyWithoutUserInput
  rooms: RoomCreateManyWithoutParticipantsInput
  relChallenger: PostCreateManyWithoutRelChallengerInput
  preChallenger: PostCreateManyWithoutPreChallengerInput
  nextChallenger: PostCreateManyWithoutNextChallengerInput
  tagChallenger: PostCreateManyWithoutTagChallengerInput
  loginSecret: String
  favCategory: String
}

input UserCreateWithoutNextChallengerInput {
  id: ID
  avatar: String
  username: String!
  nickname: String!
  passwd: String!
  email: String!
  bio: String
  following: UserCreateManyWithoutFollowersInput
  followers: UserCreateManyWithoutFollowingInput
  posts: PostCreateManyWithoutUserInput
  likes: LikeCreateManyWithoutUserInput
  comments: CommentCreateManyWithoutUserInput
  rooms: RoomCreateManyWithoutParticipantsInput
  relChallenger: PostCreateManyWithoutRelChallengerInput
  preChallenger: PostCreateManyWithoutPreChallengerInput
  tagChallenger: PostCreateManyWithoutTagChallengerInput
  loginSecret: String
  favCategory: String
}

input UserCreateWithoutPostsInput {
  id: ID
  avatar: String
  username: String!
  nickname: String!
  passwd: String!
  email: String!
  bio: String
  following: UserCreateManyWithoutFollowersInput
  followers: UserCreateManyWithoutFollowingInput
  likes: LikeCreateManyWithoutUserInput
  comments: CommentCreateManyWithoutUserInput
  rooms: RoomCreateManyWithoutParticipantsInput
  relChallenger: PostCreateManyWithoutRelChallengerInput
  preChallenger: PostCreateManyWithoutPreChallengerInput
  nextChallenger: PostCreateManyWithoutNextChallengerInput
  tagChallenger: PostCreateManyWithoutTagChallengerInput
  loginSecret: String
  favCategory: String
}

input UserCreateWithoutPreChallengerInput {
  id: ID
  avatar: String
  username: String!
  nickname: String!
  passwd: String!
  email: String!
  bio: String
  following: UserCreateManyWithoutFollowersInput
  followers: UserCreateManyWithoutFollowingInput
  posts: PostCreateManyWithoutUserInput
  likes: LikeCreateManyWithoutUserInput
  comments: CommentCreateManyWithoutUserInput
  rooms: RoomCreateManyWithoutParticipantsInput
  relChallenger: PostCreateManyWithoutRelChallengerInput
  nextChallenger: PostCreateManyWithoutNextChallengerInput
  tagChallenger: PostCreateManyWithoutTagChallengerInput
  loginSecret: String
  favCategory: String
}

input UserCreateWithoutRelChallengerInput {
  id: ID
  avatar: String
  username: String!
  nickname: String!
  passwd: String!
  email: String!
  bio: String
  following: UserCreateManyWithoutFollowersInput
  followers: UserCreateManyWithoutFollowingInput
  posts: PostCreateManyWithoutUserInput
  likes: LikeCreateManyWithoutUserInput
  comments: CommentCreateManyWithoutUserInput
  rooms: RoomCreateManyWithoutParticipantsInput
  preChallenger: PostCreateManyWithoutPreChallengerInput
  nextChallenger: PostCreateManyWithoutNextChallengerInput
  tagChallenger: PostCreateManyWithoutTagChallengerInput
  loginSecret: String
  favCategory: String
}

input UserCreateWithoutRoomsInput {
  id: ID
  avatar: String
  username: String!
  nickname: String!
  passwd: String!
  email: String!
  bio: String
  following: UserCreateManyWithoutFollowersInput
  followers: UserCreateManyWithoutFollowingInput
  posts: PostCreateManyWithoutUserInput
  likes: LikeCreateManyWithoutUserInput
  comments: CommentCreateManyWithoutUserInput
  relChallenger: PostCreateManyWithoutRelChallengerInput
  preChallenger: PostCreateManyWithoutPreChallengerInput
  nextChallenger: PostCreateManyWithoutNextChallengerInput
  tagChallenger: PostCreateManyWithoutTagChallengerInput
  loginSecret: String
  favCategory: String
}

input UserCreateWithoutTagChallengerInput {
  id: ID
  avatar: String
  username: String!
  nickname: String!
  passwd: String!
  email: String!
  bio: String
  following: UserCreateManyWithoutFollowersInput
  followers: UserCreateManyWithoutFollowingInput
  posts: PostCreateManyWithoutUserInput
  likes: LikeCreateManyWithoutUserInput
  comments: CommentCreateManyWithoutUserInput
  rooms: RoomCreateManyWithoutParticipantsInput
  relChallenger: PostCreateManyWithoutRelChallengerInput
  preChallenger: PostCreateManyWithoutPreChallengerInput
  nextChallenger: PostCreateManyWithoutNextChallengerInput
  loginSecret: String
  favCategory: String
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  avatar_ASC
  avatar_DESC
  username_ASC
  username_DESC
  nickname_ASC
  nickname_DESC
  passwd_ASC
  passwd_DESC
  email_ASC
  email_DESC
  bio_ASC
  bio_DESC
  loginSecret_ASC
  loginSecret_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  favCategory_ASC
  favCategory_DESC
}

type UserPreviousValues {
  id: ID!
  avatar: String
  username: String!
  nickname: String!
  passwd: String!
  email: String!
  bio: String
  loginSecret: String
  createdAt: DateTime!
  updatedAt: DateTime!
  favCategory: String
}

input UserScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  avatar: String
  avatar_not: String
  avatar_in: [String!]
  avatar_not_in: [String!]
  avatar_lt: String
  avatar_lte: String
  avatar_gt: String
  avatar_gte: String
  avatar_contains: String
  avatar_not_contains: String
  avatar_starts_with: String
  avatar_not_starts_with: String
  avatar_ends_with: String
  avatar_not_ends_with: String
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  nickname: String
  nickname_not: String
  nickname_in: [String!]
  nickname_not_in: [String!]
  nickname_lt: String
  nickname_lte: String
  nickname_gt: String
  nickname_gte: String
  nickname_contains: String
  nickname_not_contains: String
  nickname_starts_with: String
  nickname_not_starts_with: String
  nickname_ends_with: String
  nickname_not_ends_with: String
  passwd: String
  passwd_not: String
  passwd_in: [String!]
  passwd_not_in: [String!]
  passwd_lt: String
  passwd_lte: String
  passwd_gt: String
  passwd_gte: String
  passwd_contains: String
  passwd_not_contains: String
  passwd_starts_with: String
  passwd_not_starts_with: String
  passwd_ends_with: String
  passwd_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  bio: String
  bio_not: String
  bio_in: [String!]
  bio_not_in: [String!]
  bio_lt: String
  bio_lte: String
  bio_gt: String
  bio_gte: String
  bio_contains: String
  bio_not_contains: String
  bio_starts_with: String
  bio_not_starts_with: String
  bio_ends_with: String
  bio_not_ends_with: String
  loginSecret: String
  loginSecret_not: String
  loginSecret_in: [String!]
  loginSecret_not_in: [String!]
  loginSecret_lt: String
  loginSecret_lte: String
  loginSecret_gt: String
  loginSecret_gte: String
  loginSecret_contains: String
  loginSecret_not_contains: String
  loginSecret_starts_with: String
  loginSecret_not_starts_with: String
  loginSecret_ends_with: String
  loginSecret_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  favCategory: String
  favCategory_not: String
  favCategory_in: [String!]
  favCategory_not_in: [String!]
  favCategory_lt: String
  favCategory_lte: String
  favCategory_gt: String
  favCategory_gte: String
  favCategory_contains: String
  favCategory_not_contains: String
  favCategory_starts_with: String
  favCategory_not_starts_with: String
  favCategory_ends_with: String
  favCategory_not_ends_with: String
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  avatar: String
  username: String
  nickname: String
  passwd: String
  email: String
  bio: String
  following: UserUpdateManyWithoutFollowersInput
  followers: UserUpdateManyWithoutFollowingInput
  posts: PostUpdateManyWithoutUserInput
  likes: LikeUpdateManyWithoutUserInput
  comments: CommentUpdateManyWithoutUserInput
  rooms: RoomUpdateManyWithoutParticipantsInput
  relChallenger: PostUpdateManyWithoutRelChallengerInput
  preChallenger: PostUpdateManyWithoutPreChallengerInput
  nextChallenger: PostUpdateManyWithoutNextChallengerInput
  tagChallenger: PostUpdateManyWithoutTagChallengerInput
  loginSecret: String
  favCategory: String
}

input UserUpdateInput {
  avatar: String
  username: String
  nickname: String
  passwd: String
  email: String
  bio: String
  following: UserUpdateManyWithoutFollowersInput
  followers: UserUpdateManyWithoutFollowingInput
  posts: PostUpdateManyWithoutUserInput
  likes: LikeUpdateManyWithoutUserInput
  comments: CommentUpdateManyWithoutUserInput
  rooms: RoomUpdateManyWithoutParticipantsInput
  relChallenger: PostUpdateManyWithoutRelChallengerInput
  preChallenger: PostUpdateManyWithoutPreChallengerInput
  nextChallenger: PostUpdateManyWithoutNextChallengerInput
  tagChallenger: PostUpdateManyWithoutTagChallengerInput
  loginSecret: String
  favCategory: String
}

input UserUpdateManyDataInput {
  avatar: String
  username: String
  nickname: String
  passwd: String
  email: String
  bio: String
  loginSecret: String
  favCategory: String
}

input UserUpdateManyMutationInput {
  avatar: String
  username: String
  nickname: String
  passwd: String
  email: String
  bio: String
  loginSecret: String
  favCategory: String
}

input UserUpdateManyWithoutFollowersInput {
  create: [UserCreateWithoutFollowersInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutFollowersInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutFollowersInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithoutFollowingInput {
  create: [UserCreateWithoutFollowingInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutFollowingInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutFollowingInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithoutNextChallengerInput {
  create: [UserCreateWithoutNextChallengerInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutNextChallengerInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutNextChallengerInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithoutPreChallengerInput {
  create: [UserCreateWithoutPreChallengerInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutPreChallengerInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutPreChallengerInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithoutRelChallengerInput {
  create: [UserCreateWithoutRelChallengerInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutRelChallengerInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutRelChallengerInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithoutRoomsInput {
  create: [UserCreateWithoutRoomsInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutRoomsInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutRoomsInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithoutTagChallengerInput {
  create: [UserCreateWithoutTagChallengerInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutTagChallengerInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutTagChallengerInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput
  update: UserUpdateWithoutCommentsDataInput
  upsert: UserUpsertWithoutCommentsInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutLikesInput {
  create: UserCreateWithoutLikesInput
  update: UserUpdateWithoutLikesDataInput
  upsert: UserUpsertWithoutLikesInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  update: UserUpdateWithoutPostsDataInput
  upsert: UserUpsertWithoutPostsInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutCommentsDataInput {
  avatar: String
  username: String
  nickname: String
  passwd: String
  email: String
  bio: String
  following: UserUpdateManyWithoutFollowersInput
  followers: UserUpdateManyWithoutFollowingInput
  posts: PostUpdateManyWithoutUserInput
  likes: LikeUpdateManyWithoutUserInput
  rooms: RoomUpdateManyWithoutParticipantsInput
  relChallenger: PostUpdateManyWithoutRelChallengerInput
  preChallenger: PostUpdateManyWithoutPreChallengerInput
  nextChallenger: PostUpdateManyWithoutNextChallengerInput
  tagChallenger: PostUpdateManyWithoutTagChallengerInput
  loginSecret: String
  favCategory: String
}

input UserUpdateWithoutFollowersDataInput {
  avatar: String
  username: String
  nickname: String
  passwd: String
  email: String
  bio: String
  following: UserUpdateManyWithoutFollowersInput
  posts: PostUpdateManyWithoutUserInput
  likes: LikeUpdateManyWithoutUserInput
  comments: CommentUpdateManyWithoutUserInput
  rooms: RoomUpdateManyWithoutParticipantsInput
  relChallenger: PostUpdateManyWithoutRelChallengerInput
  preChallenger: PostUpdateManyWithoutPreChallengerInput
  nextChallenger: PostUpdateManyWithoutNextChallengerInput
  tagChallenger: PostUpdateManyWithoutTagChallengerInput
  loginSecret: String
  favCategory: String
}

input UserUpdateWithoutFollowingDataInput {
  avatar: String
  username: String
  nickname: String
  passwd: String
  email: String
  bio: String
  followers: UserUpdateManyWithoutFollowingInput
  posts: PostUpdateManyWithoutUserInput
  likes: LikeUpdateManyWithoutUserInput
  comments: CommentUpdateManyWithoutUserInput
  rooms: RoomUpdateManyWithoutParticipantsInput
  relChallenger: PostUpdateManyWithoutRelChallengerInput
  preChallenger: PostUpdateManyWithoutPreChallengerInput
  nextChallenger: PostUpdateManyWithoutNextChallengerInput
  tagChallenger: PostUpdateManyWithoutTagChallengerInput
  loginSecret: String
  favCategory: String
}

input UserUpdateWithoutLikesDataInput {
  avatar: String
  username: String
  nickname: String
  passwd: String
  email: String
  bio: String
  following: UserUpdateManyWithoutFollowersInput
  followers: UserUpdateManyWithoutFollowingInput
  posts: PostUpdateManyWithoutUserInput
  comments: CommentUpdateManyWithoutUserInput
  rooms: RoomUpdateManyWithoutParticipantsInput
  relChallenger: PostUpdateManyWithoutRelChallengerInput
  preChallenger: PostUpdateManyWithoutPreChallengerInput
  nextChallenger: PostUpdateManyWithoutNextChallengerInput
  tagChallenger: PostUpdateManyWithoutTagChallengerInput
  loginSecret: String
  favCategory: String
}

input UserUpdateWithoutNextChallengerDataInput {
  avatar: String
  username: String
  nickname: String
  passwd: String
  email: String
  bio: String
  following: UserUpdateManyWithoutFollowersInput
  followers: UserUpdateManyWithoutFollowingInput
  posts: PostUpdateManyWithoutUserInput
  likes: LikeUpdateManyWithoutUserInput
  comments: CommentUpdateManyWithoutUserInput
  rooms: RoomUpdateManyWithoutParticipantsInput
  relChallenger: PostUpdateManyWithoutRelChallengerInput
  preChallenger: PostUpdateManyWithoutPreChallengerInput
  tagChallenger: PostUpdateManyWithoutTagChallengerInput
  loginSecret: String
  favCategory: String
}

input UserUpdateWithoutPostsDataInput {
  avatar: String
  username: String
  nickname: String
  passwd: String
  email: String
  bio: String
  following: UserUpdateManyWithoutFollowersInput
  followers: UserUpdateManyWithoutFollowingInput
  likes: LikeUpdateManyWithoutUserInput
  comments: CommentUpdateManyWithoutUserInput
  rooms: RoomUpdateManyWithoutParticipantsInput
  relChallenger: PostUpdateManyWithoutRelChallengerInput
  preChallenger: PostUpdateManyWithoutPreChallengerInput
  nextChallenger: PostUpdateManyWithoutNextChallengerInput
  tagChallenger: PostUpdateManyWithoutTagChallengerInput
  loginSecret: String
  favCategory: String
}

input UserUpdateWithoutPreChallengerDataInput {
  avatar: String
  username: String
  nickname: String
  passwd: String
  email: String
  bio: String
  following: UserUpdateManyWithoutFollowersInput
  followers: UserUpdateManyWithoutFollowingInput
  posts: PostUpdateManyWithoutUserInput
  likes: LikeUpdateManyWithoutUserInput
  comments: CommentUpdateManyWithoutUserInput
  rooms: RoomUpdateManyWithoutParticipantsInput
  relChallenger: PostUpdateManyWithoutRelChallengerInput
  nextChallenger: PostUpdateManyWithoutNextChallengerInput
  tagChallenger: PostUpdateManyWithoutTagChallengerInput
  loginSecret: String
  favCategory: String
}

input UserUpdateWithoutRelChallengerDataInput {
  avatar: String
  username: String
  nickname: String
  passwd: String
  email: String
  bio: String
  following: UserUpdateManyWithoutFollowersInput
  followers: UserUpdateManyWithoutFollowingInput
  posts: PostUpdateManyWithoutUserInput
  likes: LikeUpdateManyWithoutUserInput
  comments: CommentUpdateManyWithoutUserInput
  rooms: RoomUpdateManyWithoutParticipantsInput
  preChallenger: PostUpdateManyWithoutPreChallengerInput
  nextChallenger: PostUpdateManyWithoutNextChallengerInput
  tagChallenger: PostUpdateManyWithoutTagChallengerInput
  loginSecret: String
  favCategory: String
}

input UserUpdateWithoutRoomsDataInput {
  avatar: String
  username: String
  nickname: String
  passwd: String
  email: String
  bio: String
  following: UserUpdateManyWithoutFollowersInput
  followers: UserUpdateManyWithoutFollowingInput
  posts: PostUpdateManyWithoutUserInput
  likes: LikeUpdateManyWithoutUserInput
  comments: CommentUpdateManyWithoutUserInput
  relChallenger: PostUpdateManyWithoutRelChallengerInput
  preChallenger: PostUpdateManyWithoutPreChallengerInput
  nextChallenger: PostUpdateManyWithoutNextChallengerInput
  tagChallenger: PostUpdateManyWithoutTagChallengerInput
  loginSecret: String
  favCategory: String
}

input UserUpdateWithoutTagChallengerDataInput {
  avatar: String
  username: String
  nickname: String
  passwd: String
  email: String
  bio: String
  following: UserUpdateManyWithoutFollowersInput
  followers: UserUpdateManyWithoutFollowingInput
  posts: PostUpdateManyWithoutUserInput
  likes: LikeUpdateManyWithoutUserInput
  comments: CommentUpdateManyWithoutUserInput
  rooms: RoomUpdateManyWithoutParticipantsInput
  relChallenger: PostUpdateManyWithoutRelChallengerInput
  preChallenger: PostUpdateManyWithoutPreChallengerInput
  nextChallenger: PostUpdateManyWithoutNextChallengerInput
  loginSecret: String
  favCategory: String
}

input UserUpdateWithWhereUniqueWithoutFollowersInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutFollowersDataInput!
}

input UserUpdateWithWhereUniqueWithoutFollowingInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutFollowingDataInput!
}

input UserUpdateWithWhereUniqueWithoutNextChallengerInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutNextChallengerDataInput!
}

input UserUpdateWithWhereUniqueWithoutPreChallengerInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutPreChallengerDataInput!
}

input UserUpdateWithWhereUniqueWithoutRelChallengerInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutRelChallengerDataInput!
}

input UserUpdateWithWhereUniqueWithoutRoomsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutRoomsDataInput!
}

input UserUpdateWithWhereUniqueWithoutTagChallengerInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutTagChallengerDataInput!
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutCommentsInput {
  update: UserUpdateWithoutCommentsDataInput!
  create: UserCreateWithoutCommentsInput!
}

input UserUpsertWithoutLikesInput {
  update: UserUpdateWithoutLikesDataInput!
  create: UserCreateWithoutLikesInput!
}

input UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput!
  create: UserCreateWithoutPostsInput!
}

input UserUpsertWithWhereUniqueWithoutFollowersInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutFollowersDataInput!
  create: UserCreateWithoutFollowersInput!
}

input UserUpsertWithWhereUniqueWithoutFollowingInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutFollowingDataInput!
  create: UserCreateWithoutFollowingInput!
}

input UserUpsertWithWhereUniqueWithoutNextChallengerInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutNextChallengerDataInput!
  create: UserCreateWithoutNextChallengerInput!
}

input UserUpsertWithWhereUniqueWithoutPreChallengerInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutPreChallengerDataInput!
  create: UserCreateWithoutPreChallengerInput!
}

input UserUpsertWithWhereUniqueWithoutRelChallengerInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutRelChallengerDataInput!
  create: UserCreateWithoutRelChallengerInput!
}

input UserUpsertWithWhereUniqueWithoutRoomsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutRoomsDataInput!
  create: UserCreateWithoutRoomsInput!
}

input UserUpsertWithWhereUniqueWithoutTagChallengerInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutTagChallengerDataInput!
  create: UserCreateWithoutTagChallengerInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  avatar: String
  avatar_not: String
  avatar_in: [String!]
  avatar_not_in: [String!]
  avatar_lt: String
  avatar_lte: String
  avatar_gt: String
  avatar_gte: String
  avatar_contains: String
  avatar_not_contains: String
  avatar_starts_with: String
  avatar_not_starts_with: String
  avatar_ends_with: String
  avatar_not_ends_with: String
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  nickname: String
  nickname_not: String
  nickname_in: [String!]
  nickname_not_in: [String!]
  nickname_lt: String
  nickname_lte: String
  nickname_gt: String
  nickname_gte: String
  nickname_contains: String
  nickname_not_contains: String
  nickname_starts_with: String
  nickname_not_starts_with: String
  nickname_ends_with: String
  nickname_not_ends_with: String
  passwd: String
  passwd_not: String
  passwd_in: [String!]
  passwd_not_in: [String!]
  passwd_lt: String
  passwd_lte: String
  passwd_gt: String
  passwd_gte: String
  passwd_contains: String
  passwd_not_contains: String
  passwd_starts_with: String
  passwd_not_starts_with: String
  passwd_ends_with: String
  passwd_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  bio: String
  bio_not: String
  bio_in: [String!]
  bio_not_in: [String!]
  bio_lt: String
  bio_lte: String
  bio_gt: String
  bio_gte: String
  bio_contains: String
  bio_not_contains: String
  bio_starts_with: String
  bio_not_starts_with: String
  bio_ends_with: String
  bio_not_ends_with: String
  following_every: UserWhereInput
  following_some: UserWhereInput
  following_none: UserWhereInput
  followers_every: UserWhereInput
  followers_some: UserWhereInput
  followers_none: UserWhereInput
  posts_every: PostWhereInput
  posts_some: PostWhereInput
  posts_none: PostWhereInput
  likes_every: LikeWhereInput
  likes_some: LikeWhereInput
  likes_none: LikeWhereInput
  comments_every: CommentWhereInput
  comments_some: CommentWhereInput
  comments_none: CommentWhereInput
  rooms_every: RoomWhereInput
  rooms_some: RoomWhereInput
  rooms_none: RoomWhereInput
  relChallenger_every: PostWhereInput
  relChallenger_some: PostWhereInput
  relChallenger_none: PostWhereInput
  preChallenger_every: PostWhereInput
  preChallenger_some: PostWhereInput
  preChallenger_none: PostWhereInput
  nextChallenger_every: PostWhereInput
  nextChallenger_some: PostWhereInput
  nextChallenger_none: PostWhereInput
  tagChallenger_every: PostWhereInput
  tagChallenger_some: PostWhereInput
  tagChallenger_none: PostWhereInput
  loginSecret: String
  loginSecret_not: String
  loginSecret_in: [String!]
  loginSecret_not_in: [String!]
  loginSecret_lt: String
  loginSecret_lte: String
  loginSecret_gt: String
  loginSecret_gte: String
  loginSecret_contains: String
  loginSecret_not_contains: String
  loginSecret_starts_with: String
  loginSecret_not_starts_with: String
  loginSecret_ends_with: String
  loginSecret_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  favCategory: String
  favCategory_not: String
  favCategory_in: [String!]
  favCategory_not_in: [String!]
  favCategory_lt: String
  favCategory_lte: String
  favCategory_gt: String
  favCategory_gte: String
  favCategory_contains: String
  favCategory_not_contains: String
  favCategory_starts_with: String
  favCategory_not_starts_with: String
  favCategory_ends_with: String
  favCategory_not_ends_with: String
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  username: String
  email: String
}

type Video {
  id: ID!
  video_url: String!
  createdAt: DateTime!
  post: Post
  files(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [File!]
}

type VideoConnection {
  pageInfo: PageInfo!
  edges: [VideoEdge]!
  aggregate: AggregateVideo!
}

input VideoCreateInput {
  id: ID
  video_url: String!
  post: PostCreateOneWithoutVideoInput
  files: FileCreateManyWithoutVideoInput
}

input VideoCreateManyWithoutFilesInput {
  create: [VideoCreateWithoutFilesInput!]
  connect: [VideoWhereUniqueInput!]
}

input VideoCreateManyWithoutPostInput {
  create: [VideoCreateWithoutPostInput!]
  connect: [VideoWhereUniqueInput!]
}

input VideoCreateWithoutFilesInput {
  id: ID
  video_url: String!
  post: PostCreateOneWithoutVideoInput
}

input VideoCreateWithoutPostInput {
  id: ID
  video_url: String!
  files: FileCreateManyWithoutVideoInput
}

type VideoEdge {
  node: Video!
  cursor: String!
}

enum VideoOrderByInput {
  id_ASC
  id_DESC
  video_url_ASC
  video_url_DESC
  createdAt_ASC
  createdAt_DESC
}

type VideoPreviousValues {
  id: ID!
  video_url: String!
  createdAt: DateTime!
}

input VideoScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  video_url: String
  video_url_not: String
  video_url_in: [String!]
  video_url_not_in: [String!]
  video_url_lt: String
  video_url_lte: String
  video_url_gt: String
  video_url_gte: String
  video_url_contains: String
  video_url_not_contains: String
  video_url_starts_with: String
  video_url_not_starts_with: String
  video_url_ends_with: String
  video_url_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [VideoScalarWhereInput!]
  OR: [VideoScalarWhereInput!]
  NOT: [VideoScalarWhereInput!]
}

type VideoSubscriptionPayload {
  mutation: MutationType!
  node: Video
  updatedFields: [String!]
  previousValues: VideoPreviousValues
}

input VideoSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: VideoWhereInput
  AND: [VideoSubscriptionWhereInput!]
  OR: [VideoSubscriptionWhereInput!]
  NOT: [VideoSubscriptionWhereInput!]
}

input VideoUpdateInput {
  video_url: String
  post: PostUpdateOneWithoutVideoInput
  files: FileUpdateManyWithoutVideoInput
}

input VideoUpdateManyDataInput {
  video_url: String
}

input VideoUpdateManyMutationInput {
  video_url: String
}

input VideoUpdateManyWithoutFilesInput {
  create: [VideoCreateWithoutFilesInput!]
  delete: [VideoWhereUniqueInput!]
  connect: [VideoWhereUniqueInput!]
  set: [VideoWhereUniqueInput!]
  disconnect: [VideoWhereUniqueInput!]
  update: [VideoUpdateWithWhereUniqueWithoutFilesInput!]
  upsert: [VideoUpsertWithWhereUniqueWithoutFilesInput!]
  deleteMany: [VideoScalarWhereInput!]
  updateMany: [VideoUpdateManyWithWhereNestedInput!]
}

input VideoUpdateManyWithoutPostInput {
  create: [VideoCreateWithoutPostInput!]
  delete: [VideoWhereUniqueInput!]
  connect: [VideoWhereUniqueInput!]
  set: [VideoWhereUniqueInput!]
  disconnect: [VideoWhereUniqueInput!]
  update: [VideoUpdateWithWhereUniqueWithoutPostInput!]
  upsert: [VideoUpsertWithWhereUniqueWithoutPostInput!]
  deleteMany: [VideoScalarWhereInput!]
  updateMany: [VideoUpdateManyWithWhereNestedInput!]
}

input VideoUpdateManyWithWhereNestedInput {
  where: VideoScalarWhereInput!
  data: VideoUpdateManyDataInput!
}

input VideoUpdateWithoutFilesDataInput {
  video_url: String
  post: PostUpdateOneWithoutVideoInput
}

input VideoUpdateWithoutPostDataInput {
  video_url: String
  files: FileUpdateManyWithoutVideoInput
}

input VideoUpdateWithWhereUniqueWithoutFilesInput {
  where: VideoWhereUniqueInput!
  data: VideoUpdateWithoutFilesDataInput!
}

input VideoUpdateWithWhereUniqueWithoutPostInput {
  where: VideoWhereUniqueInput!
  data: VideoUpdateWithoutPostDataInput!
}

input VideoUpsertWithWhereUniqueWithoutFilesInput {
  where: VideoWhereUniqueInput!
  update: VideoUpdateWithoutFilesDataInput!
  create: VideoCreateWithoutFilesInput!
}

input VideoUpsertWithWhereUniqueWithoutPostInput {
  where: VideoWhereUniqueInput!
  update: VideoUpdateWithoutPostDataInput!
  create: VideoCreateWithoutPostInput!
}

input VideoWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  video_url: String
  video_url_not: String
  video_url_in: [String!]
  video_url_not_in: [String!]
  video_url_lt: String
  video_url_lte: String
  video_url_gt: String
  video_url_gte: String
  video_url_contains: String
  video_url_not_contains: String
  video_url_starts_with: String
  video_url_not_starts_with: String
  video_url_ends_with: String
  video_url_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  post: PostWhereInput
  files_every: FileWhereInput
  files_some: FileWhereInput
  files_none: FileWhereInput
  AND: [VideoWhereInput!]
  OR: [VideoWhereInput!]
  NOT: [VideoWhereInput!]
}

input VideoWhereUniqueInput {
  id: ID
}
`
      }
    